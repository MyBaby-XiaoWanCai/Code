<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [JN910_HwVersionC_V1.0\JN910.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image JN910_HwVersionC_V1.0\JN910.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Mar 25 08:43:49 2022
<BR><P>
<H3>Maximum Stack Usage =       1284 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
AppTaskProtocol &rArr; Can_Network_Func &rArr; Can_Network_Analysis_Process &rArr; Network_Data_Push_Tx_Buffer &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[37]">CAN1_SCE_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">CAN1_SCE_IRQHandler</a><BR>
 <LI><a href="#[9d]">__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9d]">__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[83]">ADC_DMAConvCplt</a> from stm32f4xx_hal_adc.o(i.ADC_DMAConvCplt) referenced from stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[85]">ADC_DMAError</a> from stm32f4xx_hal_adc.o(i.ADC_DMAError) referenced from stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[84]">ADC_DMAHalfConvCplt</a> from stm32f4xx_hal_adc.o(i.ADC_DMAHalfConvCplt) referenced from stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[33]">ADC_IRQHandler</a> from stm32f4xx_it.o(i.ADC_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7f]">AppTaskDcdc</a> from task_dcdc.o(i.AppTaskDcdc) referenced from main.o(i.CreateTask)
 <LI><a href="#[7e]">AppTaskDebug</a> from task_debug.o(i.AppTaskDebug) referenced from main.o(i.CreateTask)
 <LI><a href="#[80]">AppTaskProtection</a> from task_protection.o(i.AppTaskProtection) referenced from main.o(i.CreateTask)
 <LI><a href="#[81]">AppTaskProtocol</a> from task_protocol.o(i.AppTaskProtocol) referenced from main.o(i.CreateTask)
 <LI><a href="#[88]">AppTaskStart</a> from task_start.o(i.AppTaskStart) referenced from main.o(i.main)
 <LI><a href="#[82]">AppTaskWorkStep</a> from task_workstep.o(i.AppTaskWorkStep) referenced from main.o(i.CreateTask)
 <LI><a href="#[1b]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[35]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[36]">CAN1_RX1_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_RX1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[37]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[34]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[61]">CAN2_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[62]">CAN2_RX1_IRQHandler</a> from stm32f4xx_it.o(i.CAN2_RX1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[63]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[60]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6f]">DCMI_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[30]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[31]">DMA1_Stream5_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream5_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[32]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[50]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7a]">DMA2D_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream0_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[65]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[66]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[67]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[15]">DcdcAdcDataReadRep</a> from task_dcdc.o(i.DcdcAdcDataReadRep) referenced 2 times from task_dcdc.o(.data)
 <LI><a href="#[14]">DcdcClibParamInqRep</a> from task_dcdc.o(i.DcdcClibParamInqRep) referenced 2 times from task_dcdc.o(.data)
 <LI><a href="#[13]">DcdcCtrlParamInqRep</a> from task_dcdc.o(i.DcdcCtrlParamInqRep) referenced 2 times from task_dcdc.o(.data)
 <LI><a href="#[10]">DcdcProtectInqRep</a> from task_dcdc.o(i.DcdcProtectInqRep) referenced 2 times from task_dcdc.o(.data)
 <LI><a href="#[11]">DcdcProtectTrig</a> from task_dcdc.o(i.DcdcProtectTrig) referenced 2 times from task_dcdc.o(.data)
 <LI><a href="#[12]">DcdcRecordDataInqRep</a> from task_dcdc.o(i.DcdcRecordDataInqRep) referenced 2 times from task_dcdc.o(.data)
 <LI><a href="#[f]">DcdcSetCmdRep</a> from task_dcdc.o(i.DcdcSetCmdRep) referenced 10 times from task_dcdc.o(.data)
 <LI><a href="#[16]">DcdcSystemInqRep</a> from task_dcdc.o(i.DcdcSystemInqRep) referenced 2 times from task_dcdc.o(.data)
 <LI><a href="#[1e]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5e]">ETH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5f]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[27]">EXTI0_IRQHandler</a> from stm32f4xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[49]">EXTI15_10_IRQHandler</a> from stm32f4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[28]">EXTI1_IRQHandler</a> from stm32f4xx_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[29]">EXTI2_IRQHandler</a> from stm32f4xx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2a]">EXTI3_IRQHandler</a> from stm32f4xx_it.o(i.EXTI3_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2b]">EXTI4_IRQHandler</a> from stm32f4xx_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[38]">EXTI9_5_IRQHandler</a> from stm32f4xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[25]">FLASH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[51]">FMC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[71]">FPU_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[70]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[19]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[41]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[40]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[43]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[42]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6a]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[69]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[79]">LTDC_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[78]">LTDC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1a]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[18]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[64]">OTG_FS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4b]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6c]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6b]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6e]">OTG_HS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6d]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[22]">PVD_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1f]">PendSV_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[26]">RCC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4a]">RTC_Alarm_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[24]">RTC_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[17]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[77]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[52]">SDIO_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[44]">SPI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[45]">SPI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[54]">SPI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[74]">SPI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[75]">SPI5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[76]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1d]">SVC_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[20]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[20]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from rtx_kernel.o(i.svcRtxKernelStart)
 <LI><a href="#[7c]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[23]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[39]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3c]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3b]">TIM1_TRG_COM_TIM11_IRQHandler</a> from stm32f4xx_it.o(i.TIM1_TRG_COM_TIM11_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3a]">TIM1_UP_TIM10_IRQHandler</a> from stm32f4xx_it.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3d]">TIM2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3e]">TIM3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3f]">TIM4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[53]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[57]">TIM6_DAC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[58]">TIM7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4c]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4f]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4e]">TIM8_TRG_COM_TIM14_IRQHandler</a> from stm32f4xx_it.o(i.TIM8_TRG_COM_TIM14_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4d]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[55]">UART4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[56]">UART5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[72]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[73]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[86]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[46]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[47]">USART2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[48]">USART3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[68]">USART6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1c]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[21]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[87]">fputc</a> from usart.o(i.fputc) referenced from printfb.o(i.__0printf$bare)
 <LI><a href="#[8]">i2c_Ack</a> from bsp_i2c.o(i.i2c_Ack) referenced 2 times from bsp_i2c.o(.data)
 <LI><a href="#[c]">i2c_CheckDevice</a> from bsp_i2c.o(i.i2c_CheckDevice) referenced 2 times from bsp_i2c.o(.data)
 <LI><a href="#[d]">i2c_Create</a> from bsp_i2c.o(i.i2c_Create) referenced 2 times from bsp_i2c.o(.data)
 <LI><a href="#[1]">i2c_Delay</a> from bsp_i2c.o(i.i2c_Delay) referenced 2 times from bsp_i2c.o(.data)
 <LI><a href="#[e]">i2c_Delete</a> from bsp_i2c.o(i.i2c_Delete) referenced 2 times from bsp_i2c.o(.data)
 <LI><a href="#[4]">i2c_Init</a> from bsp_i2c.o(i.i2c_Init) referenced 2 times from bsp_i2c.o(.data)
 <LI><a href="#[9]">i2c_NAck</a> from bsp_i2c.o(i.i2c_NAck) referenced 2 times from bsp_i2c.o(.data)
 <LI><a href="#[a]">i2c_ReadByte</a> from bsp_i2c.o(i.i2c_ReadByte) referenced 2 times from bsp_i2c.o(.data)
 <LI><a href="#[3]">i2c_ReadPin</a> from bsp_i2c.o(i.i2c_ReadPin) referenced 2 times from bsp_i2c.o(.data)
 <LI><a href="#[7]">i2c_SendByte</a> from bsp_i2c.o(i.i2c_SendByte) referenced 2 times from bsp_i2c.o(.data)
 <LI><a href="#[5]">i2c_Start</a> from bsp_i2c.o(i.i2c_Start) referenced 2 times from bsp_i2c.o(.data)
 <LI><a href="#[6]">i2c_Stop</a> from bsp_i2c.o(i.i2c_Stop) referenced 2 times from bsp_i2c.o(.data)
 <LI><a href="#[b]">i2c_WaitAck</a> from bsp_i2c.o(i.i2c_WaitAck) referenced 2 times from bsp_i2c.o(.data)
 <LI><a href="#[2]">i2c_WritePin</a> from bsp_i2c.o(i.i2c_WritePin) referenced 2 times from bsp_i2c.o(.data)
 <LI><a href="#[7b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[8f]">osRtxIdleThread</a> from rtx_config.o(i.osRtxIdleThread) referenced from rtx_thread.o(i.osRtxThreadStartup)
 <LI><a href="#[97]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(i.osRtxMessageQueuePostProcess) referenced from rtx_msgqueue.o(i.svcRtxMessageQueueNew)
 <LI><a href="#[98]">osRtxSemaphorePostProcess</a> from rtx_semaphore.o(i.osRtxSemaphorePostProcess) referenced from rtx_semaphore.o(i.svcRtxSemaphoreNew)
 <LI><a href="#[9a]">osRtxThreadPostProcess</a> from rtx_thread.o(i.osRtxThreadPostProcess) referenced from rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[90]">osRtxTimerThread</a> from rtx_timer.o(i.osRtxTimerThread) referenced from rtx_thread.o(i.osRtxThreadStartup)
 <LI><a href="#[91]">osRtxTimerTick</a> from rtx_timer.o(i.osRtxTimerTick) referenced from rtx_timer.o(i.osRtxTimerThread)
 <LI><a href="#[99]">osThreadExit</a> from rtx_thread.o(i.osThreadExit) referenced from rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[89]">svcRtxDelay</a> from rtx_delay.o(i.svcRtxDelay) referenced from rtx_delay.o(i.osDelay)
 <LI><a href="#[8a]">svcRtxKernelInitialize</a> from rtx_kernel.o(i.svcRtxKernelInitialize) referenced from rtx_kernel.o(i.osKernelInitialize)
 <LI><a href="#[8b]">svcRtxKernelStart</a> from rtx_kernel.o(i.svcRtxKernelStart) referenced from rtx_kernel.o(i.osKernelStart)
 <LI><a href="#[8c]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(i.svcRtxMessageQueueGet) referenced from rtx_msgqueue.o(i.osMessageQueueGet)
 <LI><a href="#[8d]">svcRtxMessageQueueNew</a> from rtx_msgqueue.o(i.svcRtxMessageQueueNew) referenced from rtx_msgqueue.o(i.osMessageQueueNew)
 <LI><a href="#[8e]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(i.svcRtxMessageQueuePut) referenced from rtx_msgqueue.o(i.osMessageQueuePut)
 <LI><a href="#[92]">svcRtxSemaphoreAcquire</a> from rtx_semaphore.o(i.svcRtxSemaphoreAcquire) referenced from rtx_semaphore.o(i.osSemaphoreAcquire)
 <LI><a href="#[93]">svcRtxSemaphoreNew</a> from rtx_semaphore.o(i.svcRtxSemaphoreNew) referenced from rtx_semaphore.o(i.osSemaphoreNew)
 <LI><a href="#[94]">svcRtxSemaphoreRelease</a> from rtx_semaphore.o(i.svcRtxSemaphoreRelease) referenced from rtx_semaphore.o(i.osSemaphoreRelease)
 <LI><a href="#[95]">svcRtxThreadExit</a> from rtx_thread.o(i.svcRtxThreadExit) referenced from rtx_thread.o(i.osThreadExit)
 <LI><a href="#[96]">svcRtxThreadNew</a> from rtx_thread.o(i.svcRtxThreadNew) referenced from rtx_thread.o(i.osThreadNew)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[236]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[9b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bc]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[237]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[238]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[239]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[23a]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[23b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[23c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[23d]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[23e]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[23f]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[240]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[241]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[1e7]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[242]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[243]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[244]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[245]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[1e6]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[9d]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[16b]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[246]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[247]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[248]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[249]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[16d]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
</UL>

<P><STRONG><a name="[24a]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[24b]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[24c]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[16a]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[24d]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[24e]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[9e]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_put
</UL>

<P><STRONG><a name="[24f]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[250]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[251]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[252]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[253]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[254]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[18a]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
</UL>

<P><STRONG><a name="[255]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[256]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[257]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[188]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
</UL>

<P><STRONG><a name="[258]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[9f]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_link_put
</UL>

<P><STRONG><a name="[259]"></a>__asm___12_rtx_system_c_024f2f18__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[25a]"></a>__asm___12_rtx_system_c_024f2f18__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[25b]"></a>__asm___12_rtx_system_c_024f2f18__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[25c]"></a>__asm___12_rtx_system_c_024f2f18__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[25d]"></a>__asm___12_rtx_system_c_024f2f18__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[25e]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[1c5]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>

<P><STRONG><a name="[1c3]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[25f]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[260]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[1c2]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[261]"></a>__asm___12_rtx_system_c_024f2f18__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[a0]"></a>__asm___12_rtx_system_c_024f2f18__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_link_put
</UL>

<P><STRONG><a name="[262]"></a>__asm___12_rtx_thread_c_add96be5__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[263]"></a>__asm___12_rtx_thread_c_add96be5__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[264]"></a>__asm___12_rtx_thread_c_add96be5__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[196]"></a>__asm___12_rtx_thread_c_add96be5__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[197]"></a>__asm___12_rtx_thread_c_add96be5__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[265]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[266]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[267]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[268]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[269]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[26a]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[26b]"></a>__asm___12_rtx_thread_c_add96be5__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[a1]"></a>__asm___12_rtx_thread_c_add96be5__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_link_put
</UL>

<P><STRONG><a name="[17]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SVC_Handler</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_stm32f429xx.o(RESET)
<LI> rtx_kernel.o(i.svcRtxKernelStart)
</UL>
<P><STRONG><a name="[a4]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Reload_Func
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepSetAnalysis
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepInqAnalysis
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInqAnalysis
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordInqAnalysis
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugDataInqAnalysis
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Pack
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Push_Tx_Buffer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Push_Rx_Buffer
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Pop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Push
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateSetAnalysis
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateInqAnalysis
</UL>

<P><STRONG><a name="[26c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[26d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Reload_Func
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Analysis_Func
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Action_Func
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepSetAnalysis
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepInqAnalysis
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Push_Tx_Buffer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Push_Rx_Buffer
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Pop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskProtection
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVal
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bit_Reverse
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepProtUpcast
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetAnalysis
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInqAnalysis
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateSetAnalysis
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Tx_Process
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Analysis_Process
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Rx_Buffer_Clr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Push_Rx_Buffer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Pop
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Buffer_Clr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[26f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[aa]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_FanSpdSet
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVal
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NTC_Temperature
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVal
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NTC_Temperature
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_FanSpdSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVal
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_FanSpdSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVal
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NTC_Temperature
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_FanSpdSet
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_FanSpdSet
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVal
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NTC_Temperature
</UL>

<P><STRONG><a name="[1af]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_FanSpdSet
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVal
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NTC_Temperature
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[270]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[271]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[272]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[273]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[274]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[af]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[1a3]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[275]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[276]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[ba]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[bd]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[277]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>ADC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_IRQHandler &rArr; HAL_ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>ADS131_CS_Disable</STRONG> (Thumb, 472 bytes, Stack size 8 bytes, bsp_ads131.o(i.ADS131_CS_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADS131_CS_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readData
</UL>

<P><STRONG><a name="[c4]"></a>ADS131_CS_Enable</STRONG> (Thumb, 506 bytes, Stack size 8 bytes, bsp_ads131.o(i.ADS131_CS_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADS131_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readData
</UL>

<P><STRONG><a name="[17d]"></a>AdDataInqAnalysis</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, task_protocol.o(i.AdDataInqAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AdDataInqAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[7f]"></a>AppTaskDcdc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, task_dcdc.o(i.AppTaskDcdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AppTaskDcdc &rArr; osSemaphoreAcquire &rArr; SemaphoreTokenDecrement
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdcRecvHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.CreateTask)
</UL>
<P><STRONG><a name="[7e]"></a>AppTaskDebug</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, task_debug.o(i.AppTaskDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AppTaskDebug &rArr; osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DebugLed
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.CreateTask)
</UL>
<P><STRONG><a name="[80]"></a>AppTaskProtection</STRONG> (Thumb, 60 bytes, Stack size 1024 bytes, task_protection.o(i.AppTaskProtection))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = AppTaskProtection &rArr; osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.CreateTask)
</UL>
<P><STRONG><a name="[81]"></a>AppTaskProtocol</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, task_protocol.o(i.AppTaskProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 1284<LI>Call Chain = AppTaskProtocol &rArr; Can_Network_Func &rArr; Can_Network_Analysis_Process &rArr; Network_Data_Push_Tx_Buffer &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.CreateTask)
</UL>
<P><STRONG><a name="[88]"></a>AppTaskStart</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, task_start.o(i.AppTaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AppTaskStart &rArr; CreateTask &rArr; osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[82]"></a>AppTaskWorkStep</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, task_workstep.o(i.AppTaskWorkStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 1100<LI>Call Chain = AppTaskWorkStep &rArr; Workstep_Abort_Func &rArr; Protect_Action_Func &rArr; WorkstepProtUpcast &rArr; Can_Network_Upcast &rArr; Network_Data_Push_Tx_Buffer &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Analysis_Func
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Abort_Func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.CreateTask)
</UL>
<P><STRONG><a name="[172]"></a>BatteryFormattingStop</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, task_workstep.o(i.BatteryFormattingStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BatteryFormattingStop
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Switch_Func
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Execute_Func
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Analysis_Func
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Abort_Func
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Action_Func
</UL>

<P><STRONG><a name="[1b]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; Can_Network_Rx_Process &rArr; Network_Data_Push_Rx_Buffer &rArr; Network_Data_Push_Tx_Buffer &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN1_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132<LI>Call Chain = CAN1_RX1_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; Can_Network_Rx_Process &rArr; Network_Data_Push_Rx_Buffer &rArr; Network_Data_Push_Tx_Buffer &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; Can_Network_Rx_Process &rArr; Network_Data_Push_Rx_Buffer &rArr; Network_Data_Push_Tx_Buffer &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN2_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132<LI>Call Chain = CAN2_RX1_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; Can_Network_Rx_Process &rArr; Network_Data_Push_Rx_Buffer &rArr; Network_Data_Push_Tx_Buffer &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>CAN_SendMultiFrames</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, can_network_transplant.o(i.CAN_SendMultiFrames))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendSingleFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Data_Pack_Send
</UL>

<P><STRONG><a name="[d2]"></a>CAN_SendSingleFrame</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, can_network_transplant.o(i.CAN_SendSingleFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetTxMailboxesFreeLevel
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendMultiFrames
</UL>

<P><STRONG><a name="[d5]"></a>CRC16N</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, can_network_driver.o(i.CRC16N))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CRC16N &rArr; CRC16_2
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_2
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepProtUpcast
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPack
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvUnpack
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Pack
</UL>

<P><STRONG><a name="[d7]"></a>CalibrateInqAnalysis</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, task_protocol.o(i.CalibrateInqAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CalibrateInqAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[d9]"></a>CalibrateSetAnalysis</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, task_protocol.o(i.CalibrateSetAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CalibrateSetAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[da]"></a>CanSendMsg</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bsp_can.o(i.CanSendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CanSendMsg &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetTxMailboxesFreeLevel
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Execute_Func
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Analysis_Func
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Abort_Func
</UL>

<P><STRONG><a name="[db]"></a>Can_Data_Pack_Analysis</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, can_network_transplant.o(i.Can_Data_Pack_Analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Can_Data_Pack_Analysis &rArr; ProtocolDataProcess &rArr; SystemSetAnalysis &rArr; MB85Ctrl_Write &rArr; SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Analysis_Process
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Push_Rx_Buffer
</UL>

<P><STRONG><a name="[dd]"></a>Can_Data_Pack_Send</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, can_network_transplant.o(i.Can_Data_Pack_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendMultiFrames
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Tx_Process
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Push_Tx_Buffer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Pop
</UL>

<P><STRONG><a name="[de]"></a>Can_Network_Analysis_Process</STRONG> (Thumb, 140 bytes, Stack size 544 bytes, can_network_protocol.o(i.Can_Network_Analysis_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1252<LI>Call Chain = Can_Network_Analysis_Process &rArr; Network_Data_Push_Tx_Buffer &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Data_Pack_Analysis
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Push_Tx_Buffer
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Pop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Push
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Func
</UL>

<P><STRONG><a name="[cb]"></a>Can_Network_Func</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, can_network_protocol.o(i.Can_Network_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 1276<LI>Call Chain = Can_Network_Func &rArr; Can_Network_Analysis_Process &rArr; Network_Data_Push_Tx_Buffer &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Tx_Process
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Tx_Process
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Rx_Timeout
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Analysis_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskProtocol
</UL>

<P><STRONG><a name="[e5]"></a>Can_Network_Rx_Process</STRONG> (Thumb, 900 bytes, Stack size 48 bytes, can_network_protocol.o(i.Can_Network_Rx_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = Can_Network_Rx_Process &rArr; Network_Data_Push_Rx_Buffer &rArr; Network_Data_Push_Tx_Buffer &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Rx_Buffer_Clr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Push_Rx_Buffer
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Push
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[e2]"></a>Can_Network_Rx_Timeout</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, can_network_protocol.o(i.Can_Network_Rx_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = Can_Network_Rx_Timeout &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Rx_Buffer_Clr
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Push
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Func
</UL>

<P><STRONG><a name="[e3]"></a>Can_Network_Tx_Process</STRONG> (Thumb, 58 bytes, Stack size 272 bytes, can_network_protocol.o(i.Can_Network_Tx_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 972<LI>Call Chain = Can_Network_Tx_Process &rArr; Network_Data_Pop &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Data_Pack_Send
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Pop
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Func
</UL>

<P><STRONG><a name="[e8]"></a>Can_Network_Upcast</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, can_network_protocol.o(i.Can_Network_Upcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = Can_Network_Upcast &rArr; Network_Data_Push_Tx_Buffer &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Push_Tx_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepProtUpcast
</UL>

<P><STRONG><a name="[cc]"></a>CreateTask</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(i.CreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CreateTask &rArr; osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[31]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>DcdcCtrlParaSet</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, task_dcdc.o(i.DcdcCtrlParaSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DcdcCtrlParaSet &rArr; CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Analysis_Func
</UL>

<P><STRONG><a name="[ef]"></a>DcdcProtectSet</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, task_dcdc.o(i.DcdcProtectSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DcdcProtectSet &rArr; CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Analysis_Func
</UL>

<P><STRONG><a name="[c6]"></a>DcdcRecvHandle</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, task_dcdc.o(i.DcdcRecvHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DcdcRecvHandle &rArr; IsFrameValid &rArr; CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFrameValid
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDcdc
</UL>

<P><STRONG><a name="[f1]"></a>DcdcRunModeSet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, task_dcdc.o(i.DcdcRunModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DcdcRunModeSet &rArr; CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Execute_Func
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Analysis_Func
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Abort_Func
</UL>

<P><STRONG><a name="[f2]"></a>DebugDataInqAnalysis</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, task_protocol.o(i.DebugDataInqAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DebugDataInqAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[1e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[181]"></a>DebugParamSetAnalysis</STRONG> (Thumb, 330 bytes, Stack size 28 bytes, task_protocol.o(i.DebugParamSetAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DebugParamSetAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[182]"></a>DebugSystemSetAnalysis</STRONG> (Thumb, 132 bytes, Stack size 36 bytes, task_protocol.o(i.DebugSystemSetAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DebugSystemSetAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[183]"></a>DefaultAnalyze</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, task_protocol.o(i.DefaultAnalyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DefaultAnalyze
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[f4]"></a>DisableExtIRQ</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, gpio.o(i.DisableExtIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DisableExtIRQ &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[27]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; readData &rArr; SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; readData &rArr; SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; readData &rArr; SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; readData &rArr; SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; readData &rArr; SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; readData &rArr; SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; readData &rArr; SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>Err_Info_Pack</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, can_network_transplant.o(i.Err_Info_Pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Err_Info_Pack &rArr; CRC16N &rArr; CRC16_2
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16N
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Pop
</UL>

<P><STRONG><a name="[f9]"></a>Err_Info_Pop</STRONG> (Thumb, 110 bytes, Stack size 544 bytes, can_network_driver.o(i.Err_Info_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Pack
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Data_Pack_Send
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Buffer_Clr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Tx_Process
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Push
</UL>

<P><STRONG><a name="[e1]"></a>Err_Info_Push</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, can_network_driver.o(i.Err_Info_Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Pop
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Rx_Process
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Rx_Timeout
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Analysis_Process
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Push_Tx_Buffer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Push_Rx_Buffer
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Pop
</UL>

<P><STRONG><a name="[e4]"></a>Err_Info_Tx_Process</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, can_network_protocol.o(i.Err_Info_Tx_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = Err_Info_Tx_Process &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Func
</UL>

<P><STRONG><a name="[105]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_TempInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM11_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[1cc]"></a>EvrRtxDelay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxDelay))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[1fd]"></a>EvrRtxDelayCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxDelayCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1cf]"></a>EvrRtxDelayError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxDelayError))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[227]"></a>EvrRtxDelayStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxDelayStarted))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[200]"></a>EvrRtxEventFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxEventFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1d4]"></a>EvrRtxKernelError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelError))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[1d1]"></a>EvrRtxKernelInitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[228]"></a>EvrRtxKernelInitialized</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[1d5]"></a>EvrRtxKernelStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelStart))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[22c]"></a>EvrRtxKernelStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelStarted))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1df]"></a>EvrRtxMemoryAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[1e5]"></a>EvrRtxMemoryBlockAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryBlockAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[1e9]"></a>EvrRtxMemoryBlockFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryBlockFree))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[1ec]"></a>EvrRtxMemoryBlockInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryBlockInit))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>

<P><STRONG><a name="[1e2]"></a>EvrRtxMemoryFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryFree))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[1e4]"></a>EvrRtxMemoryInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[203]"></a>EvrRtxMemoryPoolAllocTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryPoolAllocTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[22e]"></a>EvrRtxMessageQueueCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueCreated))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[1b6]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueError))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1d7]"></a>EvrRtxMessageQueueGet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueGet))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[22d]"></a>EvrRtxMessageQueueGetPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueGetPending))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[204]"></a>EvrRtxMessageQueueGetTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueGetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1bc]"></a>EvrRtxMessageQueueInsertPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueInsertPending))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[1f1]"></a>EvrRtxMessageQueueInserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueInserted))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1db]"></a>EvrRtxMessageQueueNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueNew))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>

<P><STRONG><a name="[1bd]"></a>EvrRtxMessageQueueNotInserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueNotInserted))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[1b9]"></a>EvrRtxMessageQueueNotRetrieved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueNotRetrieved))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1dd]"></a>EvrRtxMessageQueuePut</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueuePut))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[22f]"></a>EvrRtxMessageQueuePutPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueuePutPending))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[205]"></a>EvrRtxMessageQueuePutTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueuePutTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1b8]"></a>EvrRtxMessageQueueRetrieved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueRetrieved))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[201]"></a>EvrRtxMutexAcquireTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexAcquireTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1f4]"></a>EvrRtxMutexAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>

<P><STRONG><a name="[1f3]"></a>EvrRtxMutexReleased</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexReleased))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>

<P><STRONG><a name="[21a]"></a>EvrRtxSemaphoreAcquire</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[230]"></a>EvrRtxSemaphoreAcquirePending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreAcquirePending))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[202]"></a>EvrRtxSemaphoreAcquireTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreAcquireTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1f9]"></a>EvrRtxSemaphoreAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[231]"></a>EvrRtxSemaphoreCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreCreated))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
</UL>

<P><STRONG><a name="[1bf]"></a>EvrRtxSemaphoreError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreError))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[21e]"></a>EvrRtxSemaphoreNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreNew))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[21d]"></a>EvrRtxSemaphoreNotAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreNotAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[21f]"></a>EvrRtxSemaphoreRelease</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreRelease))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[1c0]"></a>EvrRtxSemaphoreReleased</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreReleased))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[213]"></a>EvrRtxThreadBlocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadBlocked))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[235]"></a>EvrRtxThreadCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadCreated))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[234]"></a>EvrRtxThreadDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[221]"></a>EvrRtxThreadError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadError))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[220]"></a>EvrRtxThreadExit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadExit))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[20e]"></a>EvrRtxThreadFlagsWaitCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsWaitCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[1fe]"></a>EvrRtxThreadFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[232]"></a>EvrRtxThreadJoined</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadJoined))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[222]"></a>EvrRtxThreadNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[1fb]"></a>EvrRtxThreadPreempted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadPreempted))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>

<P><STRONG><a name="[211]"></a>EvrRtxThreadSwitched</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadSwitched))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[206]"></a>EvrRtxThreadUnblocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadUnblocked))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[217]"></a>EvrRtxTimerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxTimerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[fa]"></a>GetTempVal</STRONG> (Thumb, 476 bytes, Stack size 104 bytes, bsp_temp.o(i.GetTempVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = GetTempVal &rArr; Get_NTC_Temperature &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NTC_Temperature
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TRG_COM_TIM11_IRQHandler
</UL>

<P><STRONG><a name="[176]"></a>GlobalProtectInqAnalysis</STRONG> (Thumb, 520 bytes, Stack size 48 bytes, task_protocol.o(i.GlobalProtectInqAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GlobalProtectInqAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[175]"></a>GlobalProtectSetAnalysis</STRONG> (Thumb, 736 bytes, Stack size 76 bytes, task_protocol.o(i.GlobalProtectSetAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GlobalProtectSetAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[fe]"></a>HAL_ADCEx_InjectedConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[be]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[bf]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[c1]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>HAL_ADC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[ff]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_LevelOutOfWindowCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[108]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_TempInit
</UL>

<P><STRONG><a name="[160]"></a>HAL_CAN_ActivateNotification</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ActivateNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[d4]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 342 bytes, Stack size 20 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendMsg
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendSingleFrame
</UL>

<P><STRONG><a name="[15f]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 286 bytes, Stack size 20 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[116]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[d3]"></a>HAL_CAN_GetTxMailboxesFreeLevel</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_GetTxMailboxesFreeLevel))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendMsg
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendSingleFrame
</UL>

<P><STRONG><a name="[d0]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1124<LI>Call Chain = HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; Can_Network_Rx_Process &rArr; Network_Data_Push_Rx_Buffer &rArr; Network_Data_Push_Tx_Buffer &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>HAL_CAN_Init</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[118]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, can.o(i.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[110]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bsp_can.o(i.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084<LI>Call Chain = HAL_CAN_RxFifo0MsgPendingCallback &rArr; Can_Network_Rx_Process &rArr; Network_Data_Push_Rx_Buffer &rArr; Network_Data_Push_Tx_Buffer &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Rx_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_SleepCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>HAL_CAN_Start</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[10b]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>HAL_DMA_Abort</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[109]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[121]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 882 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; readData &rArr; SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableExtIRQ
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readData
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; readData &rArr; SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>HAL_GPIO_Init</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Init
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_OcfDetect
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_FanErrDetect
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadPin
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DebugLed
</UL>

<P><STRONG><a name="[c3]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Write
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Read
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AllLedOff
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WritePin
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS131_CS_Enable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS131_CS_Disable
</UL>

<P><STRONG><a name="[119]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[123]"></a>HAL_IWDG_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[18f]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TRG_COM_TIM11_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[124]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>HAL_InitTick</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, stm32f4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[127]"></a>HAL_MspInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[f5]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableExtIRQ
</UL>

<P><STRONG><a name="[107]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[106]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[125]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[12e]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[12f]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[128]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[131]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[129]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[130]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[132]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1172 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[133]"></a>HAL_SPI_Init</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
</UL>

<P><STRONG><a name="[134]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[135]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 554 bytes, Stack size 56 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[1c9]"></a>HAL_SuspendTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_timebase_tim.o(i.HAL_SuspendTick))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[168]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[12a]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM11_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[137]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[12b]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[13a]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_TRG_COM_TIM14_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TRG_COM_TIM11_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[13b]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[147]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[148]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[13c]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_FanInit
</UL>

<P><STRONG><a name="[13d]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[150]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[14c]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 732 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[199]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[198]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[19]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1c7]"></a>I2C_ParamTabInit</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, bsp_i2c.o(i.I2C_ParamTabInit))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>InternalProtectInqAnalysis</STRONG> (Thumb, 512 bytes, Stack size 48 bytes, task_protocol.o(i.InternalProtectInqAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InternalProtectInqAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[177]"></a>InternalProtectSetAnalysis</STRONG> (Thumb, 728 bytes, Stack size 76 bytes, task_protocol.o(i.InternalProtectSetAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = InternalProtectSetAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[156]"></a>MB85Ctrl_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_mb85rs2.o(i.MB85Ctrl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MB85Ctrl_Init &rArr; MX_SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>MB85Ctrl_Read</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, bsp_mb85rs2.o(i.MB85Ctrl_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MB85Ctrl_Read &rArr; SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInqAnalysis
</UL>

<P><STRONG><a name="[15a]"></a>MB85Ctrl_Write</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, bsp_mb85rs2.o(i.MB85Ctrl_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MB85Ctrl_Write &rArr; SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetAnalysis
</UL>

<P><STRONG><a name="[15c]"></a>MX_ADC1_Init</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_TempInit
</UL>

<P><STRONG><a name="[15e]"></a>MX_CAN1_Init</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, can.o(i.MX_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_CAN1_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[161]"></a>MX_CAN2_Init</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, can.o(i.MX_CAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_CAN2_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[162]"></a>MX_DMA_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>MX_GPIO_Init</STRONG> (Thumb, 970 bytes, Stack size 32 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[164]"></a>MX_IWDG_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iwdg.o(i.MX_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_IWDG_Init &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>MX_SPI3_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, spi.o(i.MX_SPI3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Init
</UL>

<P><STRONG><a name="[165]"></a>MX_TIM10_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tim.o(i.MX_TIM10_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_TIM10_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[166]"></a>MX_TIM11_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tim.o(i.MX_TIM11_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_TIM11_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[167]"></a>MX_TIM2_Init</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, tim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_FanInit
</UL>

<P><STRONG><a name="[1a]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>Network_Data_Pop</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, can_network_driver.o(i.Network_Data_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = Network_Data_Pop &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Push
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Handler_Inquiry
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Tx_Process
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Analysis_Process
</UL>

<P><STRONG><a name="[e7]"></a>Network_Data_Push_Rx_Buffer</STRONG> (Thumb, 446 bytes, Stack size 304 bytes, can_network_driver.o(i.Network_Data_Push_Rx_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012<LI>Call Chain = Network_Data_Push_Rx_Buffer &rArr; Network_Data_Push_Tx_Buffer &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Data_Pack_Analysis
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Push_Tx_Buffer
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Push
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Handler_Request
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Handler_Inquiry
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Rx_Process
</UL>

<P><STRONG><a name="[e0]"></a>Network_Data_Push_Tx_Buffer</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, can_network_driver.o(i.Network_Data_Push_Tx_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = Network_Data_Push_Tx_Buffer &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Data_Pack_Send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Push
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Handler_Request
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Handler_Inquiry
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Upcast
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Analysis_Process
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Push_Rx_Buffer
</UL>

<P><STRONG><a name="[216]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[22b]"></a>OS_Tick_Enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[22a]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[229]"></a>OS_Tick_Setup</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, os_systick.o(i.OS_Tick_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_Tick_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1a6]"></a>PCA9555_ConfigInputReg</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, bsp_pca9555.o(i.PCA9555_ConfigInputReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PCA9555_ConfigInputReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AddrErrInit
</UL>

<P><STRONG><a name="[1b1]"></a>PCA9555_ConfigOutputReg</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, bsp_pca9555.o(i.PCA9555_ConfigOutputReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PCA9555_ConfigOutputReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedInit
</UL>

<P><STRONG><a name="[1a8]"></a>Pca9555_RegRead</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, bsp_pca9555.o(i.Pca9555_RegRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pca9555_RegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AddrRead
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_HwErrRead
</UL>

<P><STRONG><a name="[1aa]"></a>Pca9555_RegWrite</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, bsp_pca9555.o(i.Pca9555_RegWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pca9555_RegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AllLedOff
</UL>

<P><STRONG><a name="[170]"></a>Protect_Action_Func</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, task_workstep.o(i.Protect_Action_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = Protect_Action_Func &rArr; WorkstepProtUpcast &rArr; Can_Network_Upcast &rArr; Network_Data_Push_Tx_Buffer &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingStop
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepProtUpcast
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Abort_Func
</UL>

<P><STRONG><a name="[dc]"></a>ProtocolDataProcess</STRONG> (Thumb, 546 bytes, Stack size 24 bytes, task_protocol.o(i.ProtocolDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ProtocolDataProcess &rArr; SystemSetAnalysis &rArr; MB85Ctrl_Write &rArr; SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepSetAnalysis
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepRunstaSetAnalysis
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepInqAnalysis
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetAnalysis
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInqAnalysis
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordInqAnalysis
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalProtectSetAnalysis
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalProtectInqAnalysis
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalProtectSetAnalysis
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalProtectInqAnalysis
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultAnalyze
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugSystemSetAnalysis
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugParamSetAnalysis
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugDataInqAnalysis
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateSetAnalysis
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateInqAnalysis
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdDataInqAnalysis
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPack
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvUnpack
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Data_Pack_Analysis
</UL>

<P><STRONG><a name="[184]"></a>RecordDatSync</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_protocol.o(i.RecordDatSync))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordInqAnalysis
</UL>

<P><STRONG><a name="[179]"></a>RecordInqAnalysis</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, task_protocol.o(i.RecordInqAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RecordInqAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordDatSync
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[18b]"></a>SystemClock_Config</STRONG> (Thumb, 186 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[17e]"></a>SystemInqAnalysis</STRONG> (Thumb, 538 bytes, Stack size 112 bytes, task_protocol.o(i.SystemInqAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SystemInqAnalysis &rArr; MB85Ctrl_Read &rArr; SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Read
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[17f]"></a>SystemSetAnalysis</STRONG> (Thumb, 578 bytes, Stack size 120 bytes, task_protocol.o(i.SystemSetAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SystemSetAnalysis &rArr; MB85Ctrl_Write &rArr; SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Write
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytesWithCheck
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[180]"></a>SystemUpdateAnalysis</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, task_protocol.o(i.SystemUpdateAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SystemUpdateAnalysis &rArr; ee_WriteBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[3b]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM1_TRG_COM_TIM11_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = TIM1_TRG_COM_TIM11_IRQHandler &rArr; GetTempVal &rArr; Get_NTC_Temperature &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; bsp_FanSpdSet &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_OcfDetect
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_HwErrRead
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_FanStop
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_FanSpdSet
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_FanErrDetect
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM8_TRG_COM_TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM8_TRG_COM_TIM14_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[138]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[14a]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[144]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[155]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[46]"></a>USART1_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART1_IRQHandler &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[17c]"></a>WorkstepInqAnalysis</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, task_protocol.o(i.WorkstepInqAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WorkstepInqAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[171]"></a>WorkstepProtUpcast</STRONG> (Thumb, 252 bytes, Stack size 304 bytes, task_protocol.o(i.WorkstepProtUpcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036<LI>Call Chain = WorkstepProtUpcast &rArr; Can_Network_Upcast &rArr; Network_Data_Push_Tx_Buffer &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Upcast
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16N
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Action_Func
</UL>

<P><STRONG><a name="[17b]"></a>WorkstepRunstaSetAnalysis</STRONG> (Thumb, 962 bytes, Stack size 36 bytes, task_protocol.o(i.WorkstepRunstaSetAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WorkstepRunstaSetAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[17a]"></a>WorkstepSetAnalysis</STRONG> (Thumb, 1680 bytes, Stack size 56 bytes, task_protocol.o(i.WorkstepSetAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WorkstepSetAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[ce]"></a>Workstep_Abort_Func</STRONG> (Thumb, 2446 bytes, Stack size 40 bytes, task_workstep.o(i.Workstep_Abort_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 1100<LI>Call Chain = Workstep_Abort_Func &rArr; Protect_Action_Func &rArr; WorkstepProtUpcast &rArr; Can_Network_Upcast &rArr; Network_Data_Push_Tx_Buffer &rArr; Err_Info_Push &rArr; Err_Info_Pop &rArr; Can_Data_Pack_Send &rArr; CAN_SendMultiFrames &rArr; CAN_SendSingleFrame &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendMsg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Switch_Func
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Action_Func
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingStop
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdcRunModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskWorkStep
</UL>

<P><STRONG><a name="[cd]"></a>Workstep_Analysis_Func</STRONG> (Thumb, 814 bytes, Stack size 16 bytes, task_workstep.o(i.Workstep_Analysis_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Workstep_Analysis_Func &rArr; Workstep_Switch_Func &rArr; Workstep_Execute_Func &rArr; CanSendMsg &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendMsg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Switch_Func
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Reload_Func
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Execute_Func
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingStop
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdcRunModeSet
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdcProtectSet
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdcCtrlParaSet
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskWorkStep
</UL>

<P><STRONG><a name="[19c]"></a>Workstep_Execute_Func</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, task_workstep.o(i.Workstep_Execute_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Workstep_Execute_Func &rArr; CanSendMsg &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendMsg
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingStop
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdcRunModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Switch_Func
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Analysis_Func
</UL>

<P><STRONG><a name="[19b]"></a>Workstep_Reload_Func</STRONG> (Thumb, 2502 bytes, Stack size 24 bytes, task_workstep.o(i.Workstep_Reload_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Workstep_Reload_Func
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Switch_Func
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Analysis_Func
</UL>

<P><STRONG><a name="[19a]"></a>Workstep_Switch_Func</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, task_workstep.o(i.Workstep_Switch_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Workstep_Switch_Func &rArr; Workstep_Execute_Func &rArr; CanSendMsg &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Reload_Func
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Execute_Func
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingStop
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Analysis_Func
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Abort_Func
</UL>

<P><STRONG><a name="[19d]"></a>__0printf$bare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[279]"></a>__1printf$bare</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)

<P><STRONG><a name="[c8]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDebug
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[27a]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[fd]"></a>__hardfp_log</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NTC_Temperature
</UL>

<P><STRONG><a name="[1a4]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[1a2]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[19f]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[1a1]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[27b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[27c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[27d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1a0]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[1a5]"></a>bsp_AddrErrInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_addrerr.o(i.bsp_AddrErrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_AddrErrInit &rArr; PCA9555_ConfigInputReg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9555_ConfigInputReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>bsp_AddrRead</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_addrerr.o(i.bsp_AddrRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_AddrRead &rArr; Pca9555_RegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pca9555_RegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a9]"></a>bsp_AllLedOff</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_led.o(i.bsp_AllLedOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_AllLedOff &rArr; Pca9555_RegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pca9555_RegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedInit
</UL>

<P><STRONG><a name="[c9]"></a>bsp_DebugLed</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_debug.o(i.bsp_DebugLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_DebugLed &rArr; HAL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDebug
</UL>

<P><STRONG><a name="[1ac]"></a>bsp_DelayMS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_dwt.o(i.bsp_DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_OcfDetect
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_FanErrDetect
</UL>

<P><STRONG><a name="[15b]"></a>bsp_DelayUS</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, bsp_dwt.o(i.bsp_DelayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Write
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>

<P><STRONG><a name="[1c8]"></a>bsp_EepromInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_eeprom.o(i.bsp_EepromInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_EepromInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>bsp_FanErrDetect</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_fan.o(i.bsp_FanErrDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsp_FanErrDetect &rArr; bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[1ae]"></a>bsp_FanInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_fan.o(i.bsp_FanInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bsp_FanInit &rArr; MX_TIM2_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[192]"></a>bsp_FanSpdSet</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, bsp_fan.o(i.bsp_FanSpdSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bsp_FanSpdSet &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[191]"></a>bsp_FanStop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_fan.o(i.bsp_FanStop))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[194]"></a>bsp_HwErrRead</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_addrerr.o(i.bsp_HwErrRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_HwErrRead &rArr; Bit_Reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bit_Reverse
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pca9555_RegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[1c6]"></a>bsp_InitDWT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp_dwt.o(i.bsp_InitDWT))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>bsp_LedInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_led.o(i.bsp_LedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_LedInit &rArr; bsp_AllLedOff &rArr; Pca9555_RegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AllLedOff
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9555_ConfigOutputReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[193]"></a>bsp_OcfDetect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_addrerr.o(i.bsp_OcfDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsp_OcfDetect &rArr; bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[1b2]"></a>bsp_TempInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_temp.o(i.bsp_TempInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bsp_TempInit &rArr; MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[225]"></a>combineBytes</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_ads131.o(i.combineBytes))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readData
</UL>

<P><STRONG><a name="[18c]"></a>ee_ReadBytes</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, bsp_eeprom.o(i.ee_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ee_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytesWithCheck
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInqAnalysis
</UL>

<P><STRONG><a name="[18e]"></a>ee_WriteBytes</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, bsp_eeprom.o(i.ee_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ee_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytesWithCheck
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
</UL>

<P><STRONG><a name="[18d]"></a>ee_WriteBytesWithCheck</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bsp_eeprom.o(i.ee_WriteBytesWithCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ee_WriteBytesWithCheck &rArr; ee_WriteBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetAnalysis
</UL>

<P><STRONG><a name="[87]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0printf$bare)
</UL>
<P><STRONG><a name="[1b4]"></a>getRegisterValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_ads131.o(i.getRegisterValue))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWordByteLength
</UL>

<P><STRONG><a name="[1b3]"></a>getWordByteLength</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, bsp_ads131.o(i.getWordByteLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = getWordByteLength
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRegisterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readData
</UL>

<P><STRONG><a name="[7b]"></a>main</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_TempInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitDWT
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_FanInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_EepromInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AddrRead
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AddrErrInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM11_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Write
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Read
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ParamTabInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c7]"></a>osDelay</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rtx_delay.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskWorkStep
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskProtocol
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskProtection
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDebug
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDcdc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Switch_Func
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Execute_Func
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Analysis_Func
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Abort_Func
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Action_Func
</UL>

<P><STRONG><a name="[1ca]"></a>osKernelInitialize</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cb]"></a>osKernelStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d6]"></a>osMessageQueueGet</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[1da]"></a>osMessageQueueNew</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osMessageQueueNew
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNew
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[1dc]"></a>osMessageQueuePut</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[1f8]"></a>osRtxErrorNotify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxErrorNotify))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[8f]"></a>osRtxIdleThread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxIdleThread))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[1d0]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_kernel.o(i.osRtxKernelPreInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[1de]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, rtx_memory.o(i.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[1e1]"></a>osRtxMemoryFree</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_memory.o(i.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[1e3]"></a>osRtxMemoryInit</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, rtx_memory.o(i.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxMemoryInit &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[1bb]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_mempool.o(i.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_get
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[1e8]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtx_mempool.o(i.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[1eb]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rtx_mempool.o(i.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[1f2]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rtx_mutex.o(i.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[1f5]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, rtx_mutex.o(i.osRtxMutexOwnerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[a2]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, rtx_system.o(i.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1b7]"></a>osRtxPostProcess</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_system.o(i.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1fc]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1f7]"></a>osRtxThreadDispatch</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rtx_thread.o(i.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[1ee]"></a>osRtxThreadListGet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[20d]"></a>osRtxThreadListPut</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, rtx_thread.o(i.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[207]"></a>osRtxThreadListRemove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1f6]"></a>osRtxThreadListSort</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
</UL>

<P><STRONG><a name="[208]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1f0]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[210]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_lib.o(i.osRtxThreadStackCheck))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[20f]"></a>osRtxThreadStartup</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[20b]"></a>osRtxThreadSwitch</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[212]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[1ef]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, rtx_thread.o(i.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[a3]"></a>osRtxTick_Handler</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, rtx_system.o(i.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[90]"></a>osRtxTimerThread</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_timer.o(i.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[c5]"></a>osSemaphoreAcquire</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, rtx_semaphore.o(i.osSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osSemaphoreAcquire &rArr; SemaphoreTokenDecrement
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDcdc
</UL>

<P><STRONG><a name="[e9]"></a>osSemaphoreNew</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtx_semaphore.o(i.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osSemaphoreNew
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNew
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
</UL>

<P><STRONG><a name="[11b]"></a>osSemaphoreRelease</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rtx_semaphore.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[99]"></a>osThreadExit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_thread.o(i.osThreadExit))
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[ea]"></a>osThreadNew</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtx_thread.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
</UL>

<P><STRONG><a name="[122]"></a>readData</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, bsp_ads131.o(i.readData))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = readData &rArr; SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signExtend
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWordByteLength
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combineBytes
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS131_CS_Enable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS131_CS_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[226]"></a>signExtend</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_ads131.o(i.signExtend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = signExtend
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readData
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[83]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[85]"></a>ADC_DMAError</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[84]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[102]"></a>ADC_Init</STRONG> (Thumb, 344 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[11f]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[11e]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[120]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[12c]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[12d]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[136]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[185]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[143]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[145]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[146]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[86]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[14e]"></a>UART_EndRxTransfer</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>UART_Receive_IT</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>UART_Transmit_IT</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[159]"></a>SPI_ReadWriteByte</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_mb85rs2.o(i.SPI_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Write
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Read
</UL>

<P><STRONG><a name="[186]"></a>SPI_ReadWriteByte</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_ads131.o(i.SPI_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readData
</UL>

<P><STRONG><a name="[fc]"></a>Get_NTC_Temperature</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, bsp_temp.o(i.Get_NTC_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Get_NTC_Temperature &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVal
</UL>

<P><STRONG><a name="[8]"></a>i2c_Ack</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, bsp_i2c.o(i.i2c_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>i2c_CheckDevice</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, bsp_i2c.o(i.i2c_CheckDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i2c_CheckDevice &rArr; i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>i2c_Create</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, bsp_i2c.o(i.i2c_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_Create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>i2c_Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_i2c.o(i.i2c_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>i2c_Delete</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, bsp_i2c.o(i.i2c_Delete))
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>i2c_Init</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, bsp_i2c.o(i.i2c_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = i2c_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>i2c_NAck</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, bsp_i2c.o(i.i2c_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_NAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>i2c_ReadByte</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, bsp_i2c.o(i.i2c_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_ReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>i2c_ReadPin</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bsp_i2c.o(i.i2c_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>i2c_SendByte</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, bsp_i2c.o(i.i2c_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>i2c_Start</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, bsp_i2c.o(i.i2c_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>i2c_Stop</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, bsp_i2c.o(i.i2c_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>i2c_WaitAck</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, bsp_i2c.o(i.i2c_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_WaitAck
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>i2c_WritePin</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_i2c.o(i.i2c_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c.o(.data)
</UL>
<P><STRONG><a name="[cf]"></a>Bit_Reverse</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, bsp_addrerr.o(i.Bit_Reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bit_Reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_HwErrRead
</UL>

<P><STRONG><a name="[ec]"></a>Bit2ChNum</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, task_dcdc.o(i.Bit2ChNum))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdcRecordDataInqRep
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdcProtectTrig
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdcProtectInqRep
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdcCtrlParamInqRep
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdcClibParamInqRep
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdcAdcDataReadRep
</UL>

<P><STRONG><a name="[ee]"></a>CheckSum</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, task_dcdc.o(i.CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdcRunModeSet
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdcProtectSet
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdcCtrlParaSet
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFrameValid
</UL>

<P><STRONG><a name="[15]"></a>DcdcAdcDataReadRep</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, task_dcdc.o(i.DcdcAdcDataReadRep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DcdcAdcDataReadRep
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bit2ChNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_dcdc.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>DcdcClibParamInqRep</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, task_dcdc.o(i.DcdcClibParamInqRep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DcdcClibParamInqRep
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bit2ChNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_dcdc.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>DcdcCtrlParamInqRep</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, task_dcdc.o(i.DcdcCtrlParamInqRep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DcdcCtrlParamInqRep
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bit2ChNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_dcdc.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>DcdcProtectInqRep</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, task_dcdc.o(i.DcdcProtectInqRep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DcdcProtectInqRep
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bit2ChNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_dcdc.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>DcdcProtectTrig</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, task_dcdc.o(i.DcdcProtectTrig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DcdcProtectTrig
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bit2ChNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_dcdc.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>DcdcRecordDataInqRep</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, task_dcdc.o(i.DcdcRecordDataInqRep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DcdcRecordDataInqRep
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bit2ChNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_dcdc.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>DcdcSetCmdRep</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, task_dcdc.o(i.DcdcSetCmdRep))
<BR>[Address Reference Count : 1]<UL><LI> task_dcdc.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>DcdcSystemInqRep</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, task_dcdc.o(i.DcdcSystemInqRep))
<BR>[Address Reference Count : 1]<UL><LI> task_dcdc.o(.data)
</UL>
<P><STRONG><a name="[f0]"></a>IsFrameValid</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, task_dcdc.o(i.IsFrameValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IsFrameValid &rArr; CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdcRecvHandle
</UL>

<P><STRONG><a name="[d6]"></a>CRC16_2</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, can_network_driver.o(i.CRC16_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC16_2
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16N
</UL>

<P><STRONG><a name="[16e]"></a>Data_Handler_Inquiry</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, can_network_driver.o(i.Data_Handler_Inquiry))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Push_Tx_Buffer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Push_Rx_Buffer
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Pop
</UL>

<P><STRONG><a name="[16f]"></a>Data_Handler_Request</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, can_network_driver.o(i.Data_Handler_Request))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Push_Tx_Buffer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Data_Push_Rx_Buffer
</UL>

<P><STRONG><a name="[f7]"></a>Err_Buffer_Clr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, can_network_driver.o(i.Err_Buffer_Clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Err_Buffer_Clr
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_Info_Pop
</UL>

<P><STRONG><a name="[e6]"></a>Can_Rx_Buffer_Clr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, can_network_protocol.o(i.Can_Rx_Buffer_Clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Can_Rx_Buffer_Clr
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Rx_Process
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Network_Rx_Timeout
</UL>

<P><STRONG><a name="[173]"></a>RecvUnpack</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, task_protocol.o(i.RecvUnpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RecvUnpack &rArr; CRC16N &rArr; CRC16_2
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16N
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[174]"></a>SendPack</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, task_protocol.o(i.SendPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SendPack &rArr; CRC16N &rArr; CRC16_2
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16N
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[1ce]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_delay.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[1cd]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_delay.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[89]"></a>svcRtxDelay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_delay.o(i.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(i.osDelay)
</UL>
<P><STRONG><a name="[1d3]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_kernel.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[1d2]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_kernel.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[8a]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 538 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[8b]"></a>svcRtxKernelStart</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[1e0]"></a>MemBlockPtr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtx_memory.o(i.MemBlockPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[1d9]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_msgqueue.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[1d8]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_msgqueue.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[169]"></a>MessageQueueGet</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec32_nz
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_wr8
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[16c]"></a>MessageQueuePut</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1ed]"></a>MessageQueueRemove</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_msgqueue.o(i.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1b5]"></a>isrRtxMessageQueueGet</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, rtx_msgqueue.o(i.isrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[1ba]"></a>isrRtxMessageQueuePut</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, rtx_msgqueue.o(i.isrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[97]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, rtx_msgqueue.o(i.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[8c]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, rtx_msgqueue.o(i.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueGet)
</UL>
<P><STRONG><a name="[8d]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 396 bytes, Stack size 48 bytes, rtx_msgqueue.o(i.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueNew)
</UL>
<P><STRONG><a name="[8e]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, rtx_msgqueue.o(i.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueuePut)
</UL>
<P><STRONG><a name="[21c]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_semaphore.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[21b]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_semaphore.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[187]"></a>SemaphoreTokenDecrement</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_semaphore.o(i.SemaphoreTokenDecrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenDecrement
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[189]"></a>SemaphoreTokenIncrement</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtx_semaphore.o(i.SemaphoreTokenIncrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[1be]"></a>isrRtxSemaphoreRelease</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rtx_semaphore.o(i.isrRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[98]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rtx_semaphore.o(i.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[92]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, rtx_semaphore.o(i.svcRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxSemaphoreAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquirePending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreAcquire)
</UL>
<P><STRONG><a name="[93]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, rtx_semaphore.o(i.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreNew)
</UL>
<P><STRONG><a name="[94]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_semaphore.o(i.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[1c1]"></a>isr_queue_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtx_system.o(i.isr_queue_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isr_queue_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[1c4]"></a>isr_queue_put</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, rtx_system.o(i.isr_queue_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[224]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_thread.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[223]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[195]"></a>ThreadFlagsCheck</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rtx_thread.o(i.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_any
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[209]"></a>osRtxKernelGetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[1fa]"></a>osRtxThreadBlock</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rtx_thread.o(i.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[214]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[215]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[20c]"></a>osRtxThreadFree</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[20a]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[1ff]"></a>osRtxThreadListRoot</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadListRoot))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[9a]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[233]"></a>osRtxThreadSetRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadSetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[95]"></a>svcRtxThreadExit</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, rtx_thread.o(i.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[96]"></a>svcRtxThreadNew</STRONG> (Thumb, 612 bytes, Stack size 56 bytes, rtx_thread.o(i.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadNew)
</UL>
<P><STRONG><a name="[219]"></a>TimerInsert</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, rtx_timer.o(i.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[218]"></a>TimerUnlink</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_timer.o(i.TimerUnlink))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[91]"></a>osRtxTimerTick</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_timer.o(i.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerUnlink
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osRtxTimerThread)
</UL>
<P><STRONG><a name="[19e]"></a>_printf_core</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$bare
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
