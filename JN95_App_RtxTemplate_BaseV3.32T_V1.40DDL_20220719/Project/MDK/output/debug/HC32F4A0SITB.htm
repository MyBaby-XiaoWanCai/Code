<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\debug\HC32F4A0SITB.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\debug\HC32F4A0SITB.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Jul 20 16:24:13 2022
<BR><P>
<H3>Maximum Stack Usage =       8360 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
AppTaskDebug &rArr; MB85Ctrl_Write &rArr; SPI_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2bd]">__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2bd]">__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a6]">AD7124_EXINT_IrqCallback</a> from bsp_exti.o(i.AD7124_EXINT_IrqCallback) referenced from bsp_exti.o(i.AD7124_EXINT_Init)
 <LI><a href="#[a7]">AD7175_EXINT_IrqCallback</a> from bsp_exti.o(i.AD7175_EXINT_IrqCallback) referenced from bsp_exti.o(i.AD7175_EXINT_Init)
 <LI><a href="#[b0]">AppACDC_alarm</a> from app_task_acdc_alarm.o(i.AppACDC_alarm) referenced from main.o(i.CreateTask)
 <LI><a href="#[ae]">AppTaskAgeing</a> from app_task_ageing.o(i.AppTaskAgeing) referenced from main.o(i.CreateTask)
 <LI><a href="#[ad]">AppTaskDebug</a> from app_task_debug.o(i.AppTaskDebug) referenced from main.o(i.CreateTask)
 <LI><a href="#[a9]">AppTaskEth</a> from app_task_eth.o(i.AppTaskEth) referenced from main.o(i.AppTaskStart)
 <LI><a href="#[ac]">AppTaskLed</a> from app_task_led.o(i.AppTaskLed) referenced from main.o(i.CreateTask)
 <LI><a href="#[b1]">AppTaskProtection</a> from app_task_protection.o(i.AppTaskProtection) referenced from main.o(i.CreateTask)
 <LI><a href="#[aa]">AppTaskProtocol</a> from app_task_protocol.o(i.AppTaskProtocol) referenced from main.o(i.AppTaskStart)
 <LI><a href="#[b9]">AppTaskStart</a> from main.o(i.AppTaskStart) referenced from main.o(i.main)
 <LI><a href="#[af]">AppTaskWorkstep</a> from app_task_workstep.o(i.AppTaskWorkstep) referenced from main.o(i.CreateTask)
 <LI><a href="#[d]">BusFault_Handler</a> from hc32f4a0_interrupts.o(i.BusFault_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[ab]">CAN1_IrqCallback</a> from bsp_acdc.o(i.CAN1_IrqCallback) referenced from bsp_acdc.o(i.Can1IrqConfig)
 <LI><a href="#[a8]">DMA_Btc0_IrqCallback</a> from bsp_adc3.o(i.DMA_Btc0_IrqCallback) referenced from bsp_adc3.o(i.AdcDmaIrqConfig)
 <LI><a href="#[10]">DebugMon_Handler</a> from hc32f4a0_interrupts.o(i.DebugMon_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[b8]">HC_USART3_RxErr_IrqCallback</a> from bsp_debug.o(i.HC_USART3_RxErr_IrqCallback) referenced from bsp_debug.o(i.bsp_InitUSART)
 <LI><a href="#[b7]">HC_USART_RxIrq_Callback</a> from bsp_debug.o(i.HC_USART_RxIrq_Callback) referenced from bsp_debug.o(i.bsp_InitUSART)
 <LI><a href="#[b]">HardFault_Handler</a> from hc32f4a0_interrupts.o(i.HardFault_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[13]">IRQ000_Handler</a> from hc32f4a0_interrupts.o(i.IRQ000_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[14]">IRQ001_Handler</a> from hc32f4a0_interrupts.o(i.IRQ001_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[15]">IRQ002_Handler</a> from hc32f4a0_interrupts.o(i.IRQ002_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[16]">IRQ003_Handler</a> from hc32f4a0_interrupts.o(i.IRQ003_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[17]">IRQ004_Handler</a> from hc32f4a0_interrupts.o(i.IRQ004_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[18]">IRQ005_Handler</a> from hc32f4a0_interrupts.o(i.IRQ005_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[19]">IRQ006_Handler</a> from hc32f4a0_interrupts.o(i.IRQ006_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[1a]">IRQ007_Handler</a> from hc32f4a0_interrupts.o(i.IRQ007_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[1b]">IRQ008_Handler</a> from hc32f4a0_interrupts.o(i.IRQ008_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[1c]">IRQ009_Handler</a> from hc32f4a0_interrupts.o(i.IRQ009_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[1d]">IRQ010_Handler</a> from hc32f4a0_interrupts.o(i.IRQ010_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[1e]">IRQ011_Handler</a> from hc32f4a0_interrupts.o(i.IRQ011_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[1f]">IRQ012_Handler</a> from hc32f4a0_interrupts.o(i.IRQ012_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[20]">IRQ013_Handler</a> from hc32f4a0_interrupts.o(i.IRQ013_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[21]">IRQ014_Handler</a> from hc32f4a0_interrupts.o(i.IRQ014_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[22]">IRQ015_Handler</a> from hc32f4a0_interrupts.o(i.IRQ015_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[23]">IRQ016_Handler</a> from hc32f4a0_interrupts.o(i.IRQ016_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[24]">IRQ017_Handler</a> from hc32f4a0_interrupts.o(i.IRQ017_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[25]">IRQ018_Handler</a> from hc32f4a0_interrupts.o(i.IRQ018_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[26]">IRQ019_Handler</a> from hc32f4a0_interrupts.o(i.IRQ019_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[27]">IRQ020_Handler</a> from hc32f4a0_interrupts.o(i.IRQ020_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[28]">IRQ021_Handler</a> from hc32f4a0_interrupts.o(i.IRQ021_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[29]">IRQ022_Handler</a> from hc32f4a0_interrupts.o(i.IRQ022_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[2a]">IRQ023_Handler</a> from hc32f4a0_interrupts.o(i.IRQ023_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[2b]">IRQ024_Handler</a> from hc32f4a0_interrupts.o(i.IRQ024_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[2c]">IRQ025_Handler</a> from hc32f4a0_interrupts.o(i.IRQ025_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[2d]">IRQ026_Handler</a> from hc32f4a0_interrupts.o(i.IRQ026_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[2e]">IRQ027_Handler</a> from hc32f4a0_interrupts.o(i.IRQ027_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[2f]">IRQ028_Handler</a> from hc32f4a0_interrupts.o(i.IRQ028_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[30]">IRQ029_Handler</a> from hc32f4a0_interrupts.o(i.IRQ029_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[31]">IRQ030_Handler</a> from hc32f4a0_interrupts.o(i.IRQ030_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[32]">IRQ031_Handler</a> from hc32f4a0_interrupts.o(i.IRQ031_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[33]">IRQ032_Handler</a> from hc32f4a0_interrupts.o(i.IRQ032_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[34]">IRQ033_Handler</a> from hc32f4a0_interrupts.o(i.IRQ033_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[35]">IRQ034_Handler</a> from hc32f4a0_interrupts.o(i.IRQ034_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[36]">IRQ035_Handler</a> from hc32f4a0_interrupts.o(i.IRQ035_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[37]">IRQ036_Handler</a> from hc32f4a0_interrupts.o(i.IRQ036_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[38]">IRQ037_Handler</a> from hc32f4a0_interrupts.o(i.IRQ037_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[39]">IRQ038_Handler</a> from hc32f4a0_interrupts.o(i.IRQ038_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[3a]">IRQ039_Handler</a> from hc32f4a0_interrupts.o(i.IRQ039_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[3b]">IRQ040_Handler</a> from hc32f4a0_interrupts.o(i.IRQ040_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[3c]">IRQ041_Handler</a> from hc32f4a0_interrupts.o(i.IRQ041_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[3d]">IRQ042_Handler</a> from hc32f4a0_interrupts.o(i.IRQ042_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[3e]">IRQ043_Handler</a> from hc32f4a0_interrupts.o(i.IRQ043_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[3f]">IRQ044_Handler</a> from hc32f4a0_interrupts.o(i.IRQ044_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[40]">IRQ045_Handler</a> from hc32f4a0_interrupts.o(i.IRQ045_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[41]">IRQ046_Handler</a> from hc32f4a0_interrupts.o(i.IRQ046_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[42]">IRQ047_Handler</a> from hc32f4a0_interrupts.o(i.IRQ047_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[43]">IRQ048_Handler</a> from hc32f4a0_interrupts.o(i.IRQ048_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[44]">IRQ049_Handler</a> from hc32f4a0_interrupts.o(i.IRQ049_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[45]">IRQ050_Handler</a> from hc32f4a0_interrupts.o(i.IRQ050_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[46]">IRQ051_Handler</a> from hc32f4a0_interrupts.o(i.IRQ051_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[47]">IRQ052_Handler</a> from hc32f4a0_interrupts.o(i.IRQ052_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[48]">IRQ053_Handler</a> from hc32f4a0_interrupts.o(i.IRQ053_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[49]">IRQ054_Handler</a> from hc32f4a0_interrupts.o(i.IRQ054_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[4a]">IRQ055_Handler</a> from hc32f4a0_interrupts.o(i.IRQ055_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[4b]">IRQ056_Handler</a> from hc32f4a0_interrupts.o(i.IRQ056_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[4c]">IRQ057_Handler</a> from hc32f4a0_interrupts.o(i.IRQ057_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[4d]">IRQ058_Handler</a> from hc32f4a0_interrupts.o(i.IRQ058_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[4e]">IRQ059_Handler</a> from hc32f4a0_interrupts.o(i.IRQ059_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[4f]">IRQ060_Handler</a> from hc32f4a0_interrupts.o(i.IRQ060_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[50]">IRQ061_Handler</a> from hc32f4a0_interrupts.o(i.IRQ061_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[51]">IRQ062_Handler</a> from hc32f4a0_interrupts.o(i.IRQ062_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[52]">IRQ063_Handler</a> from hc32f4a0_interrupts.o(i.IRQ063_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[53]">IRQ064_Handler</a> from hc32f4a0_interrupts.o(i.IRQ064_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[54]">IRQ065_Handler</a> from hc32f4a0_interrupts.o(i.IRQ065_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[55]">IRQ066_Handler</a> from hc32f4a0_interrupts.o(i.IRQ066_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[56]">IRQ067_Handler</a> from hc32f4a0_interrupts.o(i.IRQ067_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[57]">IRQ068_Handler</a> from hc32f4a0_interrupts.o(i.IRQ068_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[58]">IRQ069_Handler</a> from hc32f4a0_interrupts.o(i.IRQ069_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[59]">IRQ070_Handler</a> from hc32f4a0_interrupts.o(i.IRQ070_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[5a]">IRQ071_Handler</a> from hc32f4a0_interrupts.o(i.IRQ071_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[5b]">IRQ072_Handler</a> from hc32f4a0_interrupts.o(i.IRQ072_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[5c]">IRQ073_Handler</a> from hc32f4a0_interrupts.o(i.IRQ073_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[5d]">IRQ074_Handler</a> from hc32f4a0_interrupts.o(i.IRQ074_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[5e]">IRQ075_Handler</a> from hc32f4a0_interrupts.o(i.IRQ075_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[5f]">IRQ076_Handler</a> from hc32f4a0_interrupts.o(i.IRQ076_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[60]">IRQ077_Handler</a> from hc32f4a0_interrupts.o(i.IRQ077_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[61]">IRQ078_Handler</a> from hc32f4a0_interrupts.o(i.IRQ078_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[62]">IRQ079_Handler</a> from hc32f4a0_interrupts.o(i.IRQ079_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[63]">IRQ080_Handler</a> from hc32f4a0_interrupts.o(i.IRQ080_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[64]">IRQ081_Handler</a> from hc32f4a0_interrupts.o(i.IRQ081_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[65]">IRQ082_Handler</a> from hc32f4a0_interrupts.o(i.IRQ082_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[66]">IRQ083_Handler</a> from hc32f4a0_interrupts.o(i.IRQ083_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[67]">IRQ084_Handler</a> from hc32f4a0_interrupts.o(i.IRQ084_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[68]">IRQ085_Handler</a> from hc32f4a0_interrupts.o(i.IRQ085_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[69]">IRQ086_Handler</a> from hc32f4a0_interrupts.o(i.IRQ086_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[6a]">IRQ087_Handler</a> from hc32f4a0_interrupts.o(i.IRQ087_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[6b]">IRQ088_Handler</a> from hc32f4a0_interrupts.o(i.IRQ088_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[6c]">IRQ089_Handler</a> from hc32f4a0_interrupts.o(i.IRQ089_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[6d]">IRQ090_Handler</a> from hc32f4a0_interrupts.o(i.IRQ090_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[6e]">IRQ091_Handler</a> from hc32f4a0_interrupts.o(i.IRQ091_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[6f]">IRQ092_Handler</a> from hc32f4a0_interrupts.o(i.IRQ092_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[70]">IRQ093_Handler</a> from hc32f4a0_interrupts.o(i.IRQ093_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[71]">IRQ094_Handler</a> from hc32f4a0_interrupts.o(i.IRQ094_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[72]">IRQ095_Handler</a> from hc32f4a0_interrupts.o(i.IRQ095_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[73]">IRQ096_Handler</a> from hc32f4a0_interrupts.o(i.IRQ096_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[74]">IRQ097_Handler</a> from hc32f4a0_interrupts.o(i.IRQ097_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[75]">IRQ098_Handler</a> from hc32f4a0_interrupts.o(i.IRQ098_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[76]">IRQ099_Handler</a> from hc32f4a0_interrupts.o(i.IRQ099_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[77]">IRQ100_Handler</a> from hc32f4a0_interrupts.o(i.IRQ100_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[78]">IRQ101_Handler</a> from hc32f4a0_interrupts.o(i.IRQ101_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[79]">IRQ102_Handler</a> from hc32f4a0_interrupts.o(i.IRQ102_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[7a]">IRQ103_Handler</a> from hc32f4a0_interrupts.o(i.IRQ103_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[7b]">IRQ104_Handler</a> from hc32f4a0_interrupts.o(i.IRQ104_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[7c]">IRQ105_Handler</a> from hc32f4a0_interrupts.o(i.IRQ105_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[7d]">IRQ106_Handler</a> from hc32f4a0_interrupts.o(i.IRQ106_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[7e]">IRQ107_Handler</a> from hc32f4a0_interrupts.o(i.IRQ107_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[7f]">IRQ108_Handler</a> from hc32f4a0_interrupts.o(i.IRQ108_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[80]">IRQ109_Handler</a> from hc32f4a0_interrupts.o(i.IRQ109_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[81]">IRQ110_Handler</a> from hc32f4a0_interrupts.o(i.IRQ110_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[82]">IRQ111_Handler</a> from hc32f4a0_interrupts.o(i.IRQ111_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[83]">IRQ112_Handler</a> from hc32f4a0_interrupts.o(i.IRQ112_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[84]">IRQ113_Handler</a> from hc32f4a0_interrupts.o(i.IRQ113_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[85]">IRQ114_Handler</a> from hc32f4a0_interrupts.o(i.IRQ114_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[86]">IRQ115_Handler</a> from hc32f4a0_interrupts.o(i.IRQ115_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[87]">IRQ116_Handler</a> from hc32f4a0_interrupts.o(i.IRQ116_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[88]">IRQ117_Handler</a> from hc32f4a0_interrupts.o(i.IRQ117_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[89]">IRQ118_Handler</a> from hc32f4a0_interrupts.o(i.IRQ118_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[8a]">IRQ119_Handler</a> from hc32f4a0_interrupts.o(i.IRQ119_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[8b]">IRQ120_Handler</a> from hc32f4a0_interrupts.o(i.IRQ120_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[8c]">IRQ121_Handler</a> from hc32f4a0_interrupts.o(i.IRQ121_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[8d]">IRQ122_Handler</a> from hc32f4a0_interrupts.o(i.IRQ122_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[8e]">IRQ123_Handler</a> from hc32f4a0_interrupts.o(i.IRQ123_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[8f]">IRQ124_Handler</a> from hc32f4a0_interrupts.o(i.IRQ124_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[90]">IRQ125_Handler</a> from hc32f4a0_interrupts.o(i.IRQ125_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[91]">IRQ126_Handler</a> from hc32f4a0_interrupts.o(i.IRQ126_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[92]">IRQ127_Handler</a> from hc32f4a0_interrupts.o(i.IRQ127_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[93]">IRQ128_Handler</a> from hc32f4a0_interrupts.o(i.IRQ128_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[94]">IRQ129_Handler</a> from hc32f4a0_interrupts.o(i.IRQ129_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[95]">IRQ130_Handler</a> from hc32f4a0_interrupts.o(i.IRQ130_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[96]">IRQ131_Handler</a> from hc32f4a0_interrupts.o(i.IRQ131_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[97]">IRQ132_Handler</a> from hc32f4a0_interrupts.o(i.IRQ132_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[98]">IRQ133_Handler</a> from hc32f4a0_interrupts.o(i.IRQ133_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[99]">IRQ134_Handler</a> from hc32f4a0_interrupts.o(i.IRQ134_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[9a]">IRQ135_Handler</a> from hc32f4a0_interrupts.o(i.IRQ135_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[9b]">IRQ136_Handler</a> from hc32f4a0_interrupts.o(i.IRQ136_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[9c]">IRQ137_Handler</a> from hc32f4a0_interrupts.o(i.IRQ137_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[9d]">IRQ138_Handler</a> from hc32f4a0_interrupts.o(i.IRQ138_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[9e]">IRQ139_Handler</a> from hc32f4a0_interrupts.o(i.IRQ139_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[9f]">IRQ140_Handler</a> from hc32f4a0_interrupts.o(i.IRQ140_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[a0]">IRQ141_Handler</a> from hc32f4a0_interrupts.o(i.IRQ141_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[a1]">IRQ142_Handler</a> from hc32f4a0_interrupts.o(i.IRQ142_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[a2]">IRQ143_Handler</a> from hc32f4a0_interrupts.o(i.IRQ143_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from hc32f4a0_interrupts.o(i.MemManage_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from hc32f4a0_interrupts.o(i.NMI_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from irq_cm4f.o(.text) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_hc32f4a0sitb.o(.text) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[2]">RunPer1000ms</a> from app_timer_periodic_adc3.o(i.RunPer1000ms) referenced 2 times from bsp_systick.o(.data)
 <LI><a href="#[1]">RunPer100ms</a> from app_timer_periodic_adc3.o(i.RunPer100ms) referenced 2 times from bsp_systick.o(.data)
 <LI><a href="#[0]">RunPer10ms</a> from app_timer_periodic_adc3.o(i.RunPer10ms) referenced 2 times from bsp_systick.o(.data)
 <LI><a href="#[f]">SVC_Handler</a> from irq_cm4f.o(.text) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from rtx_kernel.o(i.svcRtxKernelStart)
 <LI><a href="#[a4]">SystemInit</a> from system_hc32f4a0sitb.o(i.SystemInit) referenced from startup_hc32f4a0sitb.o(.text)
 <LI><a href="#[b2]">TimerAUnit1_OvfIrqCallback</a> from bsp_timer.o(i.TimerAUnit1_OvfIrqCallback) referenced from bsp_timer.o(i.TimerAUint1_IrqConfig)
 <LI><a href="#[b3]">TimerAUnit2_OvfIrqCallback</a> from bsp_timer.o(i.TimerAUnit2_OvfIrqCallback) referenced from bsp_timer.o(i.TimerAUint2_IrqConfig)
 <LI><a href="#[b4]">TimerAUnit3_OvfIrqCallback</a> from bsp_timer.o(i.TimerAUnit3_OvfIrqCallback) referenced from bsp_timer.o(i.TimerAUint3_IrqConfig)
 <LI><a href="#[e]">UsageFault_Handler</a> from hc32f4a0_interrupts.o(i.UsageFault_Handler) referenced from startup_hc32f4a0sitb.o(RESET)
 <LI><a href="#[a5]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hc32f4a0sitb.o(.text)
 <LI><a href="#[b6]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[b5]">fputc</a> from bsp_debug.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[a3]">main</a> from system_hc32f4a0sitb.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[c4]">osRtxIdleThread</a> from rtx_config.o(i.osRtxIdleThread) referenced from rtx_thread.o(i.osRtxThreadStartup)
 <LI><a href="#[d2]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(i.osRtxMessageQueuePostProcess) referenced from rtx_msgqueue.o(i.svcRtxMessageQueueNew)
 <LI><a href="#[d3]">osRtxSemaphorePostProcess</a> from rtx_semaphore.o(i.osRtxSemaphorePostProcess) referenced from rtx_semaphore.o(i.svcRtxSemaphoreNew)
 <LI><a href="#[d5]">osRtxThreadPostProcess</a> from rtx_thread.o(i.osRtxThreadPostProcess) referenced from rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[c5]">osRtxTimerThread</a> from rtx_timer.o(i.osRtxTimerThread) referenced from rtx_thread.o(i.osRtxThreadStartup)
 <LI><a href="#[c6]">osRtxTimerTick</a> from rtx_timer.o(i.osRtxTimerTick) referenced from rtx_timer.o(i.osRtxTimerThread)
 <LI><a href="#[d4]">osThreadExit</a> from rtx_thread.o(i.osThreadExit) referenced from rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[ba]">svcRtxDelay</a> from rtx_delay.o(i.svcRtxDelay) referenced from rtx_delay.o(i.osDelay)
 <LI><a href="#[bb]">svcRtxKernelGetState</a> from rtx_kernel.o(i.svcRtxKernelGetState) referenced from rtx_kernel.o(i.osKernelGetState)
 <LI><a href="#[bc]">svcRtxKernelInitialize</a> from rtx_kernel.o(i.svcRtxKernelInitialize) referenced from rtx_kernel.o(i.osKernelInitialize)
 <LI><a href="#[bd]">svcRtxKernelLock</a> from rtx_kernel.o(i.svcRtxKernelLock) referenced from rtx_kernel.o(i.osKernelLock)
 <LI><a href="#[be]">svcRtxKernelRestoreLock</a> from rtx_kernel.o(i.svcRtxKernelRestoreLock) referenced from rtx_kernel.o(i.osKernelRestoreLock)
 <LI><a href="#[bf]">svcRtxKernelStart</a> from rtx_kernel.o(i.svcRtxKernelStart) referenced from rtx_kernel.o(i.osKernelStart)
 <LI><a href="#[c0]">svcRtxKernelUnlock</a> from rtx_kernel.o(i.svcRtxKernelUnlock) referenced from rtx_kernel.o(i.osKernelUnlock)
 <LI><a href="#[c1]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(i.svcRtxMessageQueueGet) referenced from rtx_msgqueue.o(i.osMessageQueueGet)
 <LI><a href="#[c2]">svcRtxMessageQueueNew</a> from rtx_msgqueue.o(i.svcRtxMessageQueueNew) referenced from rtx_msgqueue.o(i.osMessageQueueNew)
 <LI><a href="#[c3]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(i.svcRtxMessageQueuePut) referenced from rtx_msgqueue.o(i.osMessageQueuePut)
 <LI><a href="#[c7]">svcRtxSemaphoreAcquire</a> from rtx_semaphore.o(i.svcRtxSemaphoreAcquire) referenced from rtx_semaphore.o(i.osSemaphoreAcquire)
 <LI><a href="#[c8]">svcRtxSemaphoreNew</a> from rtx_semaphore.o(i.svcRtxSemaphoreNew) referenced from rtx_semaphore.o(i.osSemaphoreNew)
 <LI><a href="#[c9]">svcRtxSemaphoreRelease</a> from rtx_semaphore.o(i.svcRtxSemaphoreRelease) referenced from rtx_semaphore.o(i.osSemaphoreRelease)
 <LI><a href="#[ca]">svcRtxThreadExit</a> from rtx_thread.o(i.svcRtxThreadExit) referenced from rtx_thread.o(i.osThreadExit)
 <LI><a href="#[cb]">svcRtxThreadNew</a> from rtx_thread.o(i.svcRtxThreadNew) referenced from rtx_thread.o(i.osThreadNew)
 <LI><a href="#[cc]">svcRtxThreadSuspend</a> from rtx_thread.o(i.svcRtxThreadSuspend) referenced from rtx_thread.o(i.osThreadSuspend)
 <LI><a href="#[cd]">svcRtxThreadTerminate</a> from rtx_thread.o(i.svcRtxThreadTerminate) referenced from rtx_thread.o(i.osThreadTerminate)
 <LI><a href="#[ce]">svcRtxTimerDelete</a> from rtx_timer.o(i.svcRtxTimerDelete) referenced from rtx_timer.o(i.osTimerDelete)
 <LI><a href="#[cf]">svcRtxTimerStop</a> from rtx_timer.o(i.svcRtxTimerStop) referenced from rtx_timer.o(i.osTimerStop)
 <LI><a href="#[7]">wizchip_bus_readdata</a> from wizchip_conf.o(i.wizchip_bus_readdata) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[8]">wizchip_bus_writedata</a> from wizchip_conf.o(i.wizchip_bus_writedata) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[3]">wizchip_cris_enter</a> from wizchip_conf.o(i.wizchip_cris_enter) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[3]">wizchip_cris_enter</a> from wizchip_conf.o(i.wizchip_cris_enter) referenced from wizchip_conf.o(i.reg_wizchip_cris_cbfunc)
 <LI><a href="#[4]">wizchip_cris_exit</a> from wizchip_conf.o(i.wizchip_cris_exit) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[4]">wizchip_cris_exit</a> from wizchip_conf.o(i.wizchip_cris_exit) referenced from wizchip_conf.o(i.reg_wizchip_cris_cbfunc)
 <LI><a href="#[6]">wizchip_cs_deselect</a> from wizchip_conf.o(i.wizchip_cs_deselect) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[6]">wizchip_cs_deselect</a> from wizchip_conf.o(i.wizchip_cs_deselect) referenced from wizchip_conf.o(i.reg_wizchip_cs_cbfunc)
 <LI><a href="#[5]">wizchip_cs_select</a> from wizchip_conf.o(i.wizchip_cs_select) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[5]">wizchip_cs_select</a> from wizchip_conf.o(i.wizchip_cs_select) referenced from wizchip_conf.o(i.reg_wizchip_cs_cbfunc)
 <LI><a href="#[d0]">wizchip_spi_readbyte</a> from wizchip_conf.o(i.wizchip_spi_readbyte) referenced from wizchip_conf.o(i.reg_wizchip_spi_cbfunc)
 <LI><a href="#[d1]">wizchip_spi_writebyte</a> from wizchip_conf.o(i.wizchip_spi_writebyte) referenced from wizchip_conf.o(i.reg_wizchip_spi_cbfunc)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a5]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(.text)
</UL>
<P><STRONG><a name="[516]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2bb]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2d8]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[517]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[518]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[519]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[51a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[51b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[51c]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[51d]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[51e]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[51f]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[520]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[4ec]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[521]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[522]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[4ee]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[523]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[524]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[4eb]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[2bd]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
</UL>

<P><STRONG><a name="[43b]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[525]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[526]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[527]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[528]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[43d]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
</UL>

<P><STRONG><a name="[529]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[52a]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[52b]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[43a]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[52c]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[52d]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[2be]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_put
</UL>

<P><STRONG><a name="[52e]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[52f]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[530]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[531]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[532]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[533]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[467]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
</UL>

<P><STRONG><a name="[534]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[535]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[536]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[465]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
</UL>

<P><STRONG><a name="[537]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[2bf]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_link_put
</UL>

<P><STRONG><a name="[538]"></a>__asm___12_rtx_system_c_024f2f18__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[539]"></a>__asm___12_rtx_system_c_024f2f18__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[53a]"></a>__asm___12_rtx_system_c_024f2f18__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[53b]"></a>__asm___12_rtx_system_c_024f2f18__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[53c]"></a>__asm___12_rtx_system_c_024f2f18__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[53d]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[4d9]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>

<P><STRONG><a name="[4d7]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[53e]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[53f]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[4d6]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[540]"></a>__asm___12_rtx_system_c_024f2f18__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[2c0]"></a>__asm___12_rtx_system_c_024f2f18__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_link_put
</UL>

<P><STRONG><a name="[541]"></a>__asm___12_rtx_thread_c_add96be5__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[542]"></a>__asm___12_rtx_thread_c_add96be5__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[543]"></a>__asm___12_rtx_thread_c_add96be5__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[47d]"></a>__asm___12_rtx_thread_c_add96be5__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[47e]"></a>__asm___12_rtx_thread_c_add96be5__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[544]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[545]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[546]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[547]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[548]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[549]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[54a]"></a>__asm___12_rtx_thread_c_add96be5__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[2c1]"></a>__asm___12_rtx_thread_c_add96be5__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_link_put
</UL>

<P><STRONG><a name="[42e]"></a>__asm___15_EventRecorder_c_e8d3082c__atomic_inc8</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
</UL>

<P><STRONG><a name="[3d2]"></a>__asm___15_EventRecorder_c_e8d3082c__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[3d1]"></a>__asm___15_EventRecorder_c_e8d3082c__atomic_xch32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[3d8]"></a>__asm___15_EventRecorder_c_e8d3082c__LockRecord</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[3d9]"></a>__asm___15_EventRecorder_c_e8d3082c__UnlockRecord</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_hc32f4a0sitb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_hc32f4a0sitb.o(RESET)
<LI> rtx_kernel.o(i.svcRtxKernelStart)
</UL>
<P><STRONG><a name="[2c2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcUartBaudrate
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSmartcardBaudrate
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcClkSyncBaudrate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit3_OvfIrqCallback
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[2c5]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit3_OvfIrqCallback
</UL>

<P><STRONG><a name="[328]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start_DMA
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskProtocol
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDebug
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRingBuffer
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordDatUpcast
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRingBuffer
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepDatLoad
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepDatSync
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepSetAnalysis
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepInqAnalysis
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetAnalysis
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInqAnalysis
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Data_To_Buffer
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordInqAnalysis
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugDataInqAnalysis
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxRecordDatUpcast
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Reload_Func
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[340]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSetPinAnalogMode
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Config
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUSART
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tier2ToTier1
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tier1ToTier2
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateSetAnalysis
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateInqAnalysis
</UL>

<P><STRONG><a name="[54b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[54c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[54d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGRS232_RxHandler
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_TCP_Client
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Poll
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepSetAnalysis
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepInqAnalysis
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Reload_Func
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Analysis_Func
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Action_Func
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[343]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Trigger_Judgemet
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskProtocol
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskProtection
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDebug
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppACDC_alarm
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode_Mac_CheckSet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGCmdProcess
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordDatUpcast
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmQuarry
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_TCP_Client
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Poll
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepProtUpcast
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetAnalysis
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInqAnalysis
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateSetAnalysis
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxRecordDatUpcast
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfChecking
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ageing
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[54e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[430]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGCmdProcess
</UL>

<P><STRONG><a name="[494]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[2c9]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcUartBaudrate
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSmartcardBaudrate
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcClkSyncBaudrate
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDC_DataHandle
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPer10ms
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2cb]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDC_DataHandle
</UL>

<P><STRONG><a name="[2cd]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcUartBaudrate
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSmartcardBaudrate
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcClkSyncBaudrate
</UL>

<P><STRONG><a name="[2ce]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcUartBaudrate
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSmartcardBaudrate
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcClkSyncBaudrate
</UL>

<P><STRONG><a name="[2cf]"></a>__aeabi_f2ulz</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ffixul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit3_OvfIrqCallback
</UL>

<P><STRONG><a name="[348]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Trigger_Judgemet
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppACDC_alarm
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGCmdProcess
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntelProtectRunParmCheck
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPer10ms
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_TCP_Client
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Poll
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Protect_Func
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtoCVConvertFunc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ageing
</UL>

<P><STRONG><a name="[54f]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtoCVConvertFunc
</UL>

<P><STRONG><a name="[397]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntelProtectRunParmCheck
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtoCVConvertFunc
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2d0]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcUartBaudrate
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSmartcardBaudrate
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcClkSyncBaudrate
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDC_DataHandle
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPer10ms
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Protect_Func
</UL>

<P><STRONG><a name="[550]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[4ae]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2c4]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[551]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[552]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[553]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[554]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2cc]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2d2]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2d4]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2d5]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2d6]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2d7]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2bc]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[555]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[556]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[557]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[558]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, system_hc32f4a0sitb.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = main &rArr; $Super$$main &rArr; System_Init &rArr; bsp_Init &rArr; bsp_InitUSART &rArr; USART_UartInit &rArr; USART_SetBaudrate &rArr; CalcSmartcardBaudrate &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2db]"></a>ACDCUpdateAnalysis</STRONG> (Thumb, 1452 bytes, Stack size 56 bytes, app_task_protocol.o(i.ACDCUpdateAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ACDCUpdateAnalysis &rArr; CANx_SendData &rArr; CAN_TransData &rArr; CAN_GetStatusVal
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_SendData
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUintStop
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[2e6]"></a>ACDC_ACV_Query_CMD</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bsp_acdc.o(i.ACDC_ACV_Query_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ACDC_ACV_Query_CMD &rArr; CANx_SendData &rArr; CAN_TransData &rArr; CAN_GetStatusVal
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInqAnalysis
</UL>

<P><STRONG><a name="[2ea]"></a>ACDC_FW_VERSION_CMD</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bsp_acdc.o(i.ACDC_FW_VERSION_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ACDC_FW_VERSION_CMD &rArr; CANx_SendData &rArr; CAN_TransData &rArr; CAN_GetStatusVal
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInqAnalysis
</UL>

<P><STRONG><a name="[2eb]"></a>ACDC_Fan_Speed51_ModeTest</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, bsp_acdc.o(i.ACDC_Fan_Speed51_ModeTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ACDC_Fan_Speed51_ModeTest &rArr; CANx_SendData &rArr; CAN_TransData &rArr; CAN_GetStatusVal
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_SendData
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntelProtectDeviceCheck
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[2ed]"></a>ACDC_Fan_Speed_CMD</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, bsp_acdc.o(i.ACDC_Fan_Speed_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ACDC_Fan_Speed_CMD &rArr; CANx_SendData &rArr; CAN_TransData &rArr; CAN_GetStatusVal
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPer1000ms
</UL>

<P><STRONG><a name="[2ee]"></a>AD5245_Init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bsp_ad5245.o(i.AD5245_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5245_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[2f2]"></a>AD5245_Value_Read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_ad5245.o(i.AD5245_Value_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AD5245_Value_Read &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Value_Set
</UL>

<P><STRONG><a name="[2f7]"></a>AD5245_Value_Set</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bsp_ad5245.o(i.AD5245_Value_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AD5245_Value_Set &rArr; AD5245_Value_Read &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Value_Read
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Vpro_Set
</UL>

<P><STRONG><a name="[2f8]"></a>AD5245_Vpro_Set</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bsp_ad5245.o(i.AD5245_Vpro_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AD5245_Vpro_Set &rArr; AD5245_Value_Set &rArr; AD5245_Value_Read &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Value_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDebug
</UL>

<P><STRONG><a name="[2f9]"></a>AD7124_CfgADC</STRONG> (Thumb, 554 bytes, Stack size 16 bytes, bsp_ad7124.o(i.AD7124_CfgADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD7124_CfgADC &rArr; AD7124_WriteReg &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_WriteReg
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_Reset
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_ReadId
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AD7124Init
</UL>

<P><STRONG><a name="[2fd]"></a>AD7124_EXINT_Init</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, bsp_exti.o(i.AD7124_EXINT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AD7124_EXINT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT_StructInit
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AD7124Init
</UL>

<P><STRONG><a name="[306]"></a>AD7124_Process</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bsp_ad7124.o(i.AD7124_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD7124_Process &rArr; AD7124_ReadData &rArr; AD7124_ReadReg &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_EXINT_IrqCallback
</UL>

<P><STRONG><a name="[309]"></a>AD7124_ReadData</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_ad7124.o(i.AD7124_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD7124_ReadData &rArr; AD7124_ReadReg &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_Process
</UL>

<P><STRONG><a name="[2fc]"></a>AD7124_ReadId</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, bsp_ad7124.o(i.AD7124_ReadId))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AD7124_ReadId &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_CfgADC
</UL>

<P><STRONG><a name="[30a]"></a>AD7124_ReadReg</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, bsp_ad7124.o(i.AD7124_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AD7124_ReadReg &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitReceive
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_ReadData
</UL>

<P><STRONG><a name="[2fa]"></a>AD7124_Reset</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bsp_ad7124.o(i.AD7124_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AD7124_Reset &rArr; ad7124_wait_to_power_on &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitReceive
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7124_wait_to_power_on
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_CfgADC
</UL>

<P><STRONG><a name="[310]"></a>AD7124_SpiInit</STRONG> (Thumb, 214 bytes, Stack size 72 bytes, bsp_spi.o(i.AD7124_SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AD7124_SpiInit &rArr; GPIO_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FunctionCmd
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AD7124Init
</UL>

<P><STRONG><a name="[2fb]"></a>AD7124_WriteReg</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, bsp_ad7124.o(i.AD7124_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AD7124_WriteReg &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitReceive
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_CfgADC
</UL>

<P><STRONG><a name="[317]"></a>AD7175_CfgADC</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, bsp_ad7175.o(i.AD7175_CfgADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD7175_CfgADC &rArr; AD7175_ReadReg &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_WriteReg
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_Reset
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_ReadReg
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AD7175Init
</UL>

<P><STRONG><a name="[31f]"></a>AD7175_ComputeCRC8</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, bsp_ad7175.o(i.AD7175_ComputeCRC8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AD7175_ComputeCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_WriteReg
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_ReadReg
</UL>

<P><STRONG><a name="[31c]"></a>AD7175_EXINT_Init</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, bsp_exti.o(i.AD7175_EXINT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AD7175_EXINT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT_StructInit
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AD7175Init
</UL>

<P><STRONG><a name="[31d]"></a>AD7175_Process</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp_ad7175.o(i.AD7175_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD7175_Process &rArr; AD7175_ReadData &rArr; AD7175_ReadReg &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_EXINT_IrqCallback
</UL>

<P><STRONG><a name="[31e]"></a>AD7175_ReadData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bsp_ad7175.o(i.AD7175_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD7175_ReadData &rArr; AD7175_ReadReg &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_Process
</UL>

<P><STRONG><a name="[31b]"></a>AD7175_ReadReg</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, bsp_ad7175.o(i.AD7175_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AD7175_ReadReg &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitReceive
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_ComputeCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_ReadData
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_CfgADC
</UL>

<P><STRONG><a name="[318]"></a>AD7175_Reset</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bsp_ad7175.o(i.AD7175_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AD7175_Reset &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_CfgADC
</UL>

<P><STRONG><a name="[320]"></a>AD7175_SpiInit</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, bsp_spi.o(i.AD7175_SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AD7175_SpiInit &rArr; GPIO_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FunctionCmd
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AD7175Init
</UL>

<P><STRONG><a name="[31a]"></a>AD7175_WriteReg</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, bsp_ad7175.o(i.AD7175_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AD7175_WriteReg &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitReceive
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_ComputeCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_CfgADC
</UL>

<P><STRONG><a name="[d8]"></a>ADC_1_Cmp0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.ADC_1_Cmp0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[d9]"></a>ADC_1_Cmp1Comb_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.ADC_1_Cmp1Comb_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[da]"></a>ADC_1_Cmp1Ind_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.ADC_1_Cmp1Ind_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[db]"></a>ADC_1_SeqA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.ADC_1_SeqA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[dc]"></a>ADC_1_SeqB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.ADC_1_SeqB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[dd]"></a>ADC_2_Cmp0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.ADC_2_Cmp0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[de]"></a>ADC_2_Cmp1Comb_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.ADC_2_Cmp1Comb_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[df]"></a>ADC_2_Cmp1Ind_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.ADC_2_Cmp1Ind_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[e0]"></a>ADC_2_SeqA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.ADC_2_SeqA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[e1]"></a>ADC_2_SeqB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.ADC_2_SeqB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[e2]"></a>ADC_3_Cmp0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.ADC_3_Cmp0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[e3]"></a>ADC_3_Cmp1Comb_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.ADC_3_Cmp1Comb_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[e4]"></a>ADC_3_Cmp1Ind_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.ADC_3_Cmp1Ind_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[e5]"></a>ADC_3_SeqA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.ADC_3_SeqA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[e6]"></a>ADC_3_SeqB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.ADC_3_SeqB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[321]"></a>ADC_AvgChannelCmd</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hc32f4a0_adc.o(i.ADC_AvgChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_AvgChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcChannelConfig
</UL>

<P><STRONG><a name="[322]"></a>ADC_AvgChannelConfig</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hc32f4a0_adc.o(i.ADC_AvgChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_AvgChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcChannelConfig
</UL>

<P><STRONG><a name="[323]"></a>ADC_ChannelCmd</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, hc32f4a0_adc.o(i.ADC_ChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADC_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcChannelConfig
</UL>

<P><STRONG><a name="[324]"></a>ADC_ChannelRemap</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, hc32f4a0_adc.o(i.ADC_ChannelRemap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_ChannelRemap
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcChannelConfig
</UL>

<P><STRONG><a name="[325]"></a>ADC_GetChannelPinNum</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, hc32f4a0_adc.o(i.ADC_GetChannelPinNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_GetChannelPinNum
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSetChannelPinAnalogMode
</UL>

<P><STRONG><a name="[326]"></a>ADC_Init</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, hc32f4a0_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInitConfig
</UL>

<P><STRONG><a name="[3b8]"></a>ADC_Start_Stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_adc3.o(i.ADC_Start_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_adc3_init
</UL>

<P><STRONG><a name="[329]"></a>ADC_Start_Stop_DMA</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_adc3.o(i.ADC_Start_Stop_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADC_Start_Stop_DMA &rArr; ADC_Switch_Channel &rArr; ADC_Start_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Switch_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit3_OvfIrqCallback
</UL>

<P><STRONG><a name="[33d]"></a>ADC_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hc32f4a0_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInitConfig
</UL>

<P><STRONG><a name="[32b]"></a>ADC_Switch_ConfigGPIO</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bsp_adc3.o(i.ADC_Switch_ConfigGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADC_Switch_ConfigGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[44c]"></a>AdDataInqAnalysis</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, app_task_protocol.o(i.AdDataInqAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AdDataInqAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[341]"></a>Ageing</STRONG> (Thumb, 2776 bytes, Stack size 56 bytes, app_task_ageing.o(i.Ageing))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Ageing &rArr; Chg_Dis_On_Cfg &rArr; DAC_SetLinearData &rArr; DAC80508_ReadDacData &rArr; DAC80508_ReadCmd &rArr; SPI5_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Port_Cfg
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_send
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_sync_func
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_On_Cfg
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Off_Cfg
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskAgeing
</UL>

<P><STRONG><a name="[34a]"></a>AlarmClear</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, app_task_protection.o(i.AlarmClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AlarmClear &rArr; CANx_SendData &rArr; CAN_TransData &rArr; CAN_GetStatusVal
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit1_OvfIrqCallback
</UL>

<P><STRONG><a name="[34b]"></a>AlarmQuarry</STRONG> (Thumb, 884 bytes, Stack size 1056 bytes, app_task_protection.o(i.AlarmQuarry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = AlarmQuarry &rArr; Protect_BitAction_Func &rArr; Protect_Action_Func &rArr; WorkstepProtUpcast &rArr; W5500_send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntelProtectRunParmCheck
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobleProtectRunParmCheck
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_send
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_BitAction_Func
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16N
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_TCP_Client
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Poll
</UL>

<P><STRONG><a name="[b0]"></a>AppACDC_alarm</STRONG> (Thumb, 900 bytes, Stack size 48 bytes, app_task_acdc_alarm.o(i.AppACDC_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = AppACDC_alarm &rArr; Protect_BitAction_Func &rArr; Protect_Action_Func &rArr; WorkstepProtUpcast &rArr; W5500_send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_send
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_BitAction_Func
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16N
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.CreateTask)
</UL>
<P><STRONG><a name="[ae]"></a>AppTaskAgeing</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, app_task_ageing.o(i.AppTaskAgeing))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = AppTaskAgeing &rArr; Ageing &rArr; Chg_Dis_On_Cfg &rArr; DAC_SetLinearData &rArr; DAC80508_ReadDacData &rArr; DAC80508_ReadCmd &rArr; SPI5_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfChecking
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ageing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.CreateTask)
</UL>
<P><STRONG><a name="[ad]"></a>AppTaskDebug</STRONG> (Thumb, 696 bytes, Stack size 8256 bytes, app_task_debug.o(i.AppTaskDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 8360<LI>Call Chain = AppTaskDebug &rArr; MB85Ctrl_Write &rArr; SPI_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Vpro_Set
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Write
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.CreateTask)
</UL>
<P><STRONG><a name="[a9]"></a>AppTaskEth</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, app_task_eth.o(i.AppTaskEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 3600<LI>Call Chain = AppTaskEth &rArr; W5500_Poll &rArr; AlarmQuarry &rArr; Protect_BitAction_Func &rArr; Protect_Action_Func &rArr; WorkstepProtUpcast &rArr; W5500_send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_close
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitW5500
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_TCP_Client
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[ac]"></a>AppTaskLed</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_task_led.o(i.AppTaskLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AppTaskLed &rArr; AuxRecordDatUpcast &rArr; W5500_send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Data_To_Record
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxRecordDatUpcast
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedStaSwFunc
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedStaInit
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedStaExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.CreateTask)
</UL>
<P><STRONG><a name="[b1]"></a>AppTaskProtection</STRONG> (Thumb, 682 bytes, Stack size 1024 bytes, app_task_protection.o(i.AppTaskProtection))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = AppTaskProtection &rArr; Protect_Action_Func &rArr; WorkstepProtUpcast &rArr; W5500_send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_send
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16N
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Action_Func
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.CreateTask)
</UL>
<P><STRONG><a name="[aa]"></a>AppTaskProtocol</STRONG> (Thumb, 340 bytes, Stack size 2064 bytes, app_task_protocol.o(i.AppTaskProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 3280<LI>Call Chain = AppTaskProtocol &rArr; ProtocolDataProcess &rArr; SystemUpdateAnalysis &rArr; osTimerStop &rArr; EvrRtxTimerError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRingBuffer
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRingBuffer
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_send
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[b9]"></a>AppTaskStart</STRONG> (Thumb, 1310 bytes, Stack size 16 bytes, main.o(i.AppTaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = AppTaskStart &rArr; BatteryFormattingStop &rArr; CurLinearOutputSetting &rArr; DAC80508_ReadDacData &rArr; DAC80508_ReadCmd &rArr; SPI5_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_cfg_set
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedToggle
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOn
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUintStart
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Msg_Init
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Trigger_Judgemet
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Read
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntelProtectDeviceCheck
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Scanning
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_WDG
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDatInit
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingStop
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDC_Fan_Speed51_ModeTest
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode_Mac_CheckSet
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[af]"></a>AppTaskWorkstep</STRONG> (Thumb, 250 bytes, Stack size 0 bytes, app_task_workstep.o(i.AppTaskWorkstep))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = AppTaskWorkstep &rArr; Workstep_Protect_Func &rArr; Protect_Action_Func &rArr; WorkstepProtUpcast &rArr; W5500_send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Protect_Func
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Analysis_Func
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Abort_Func
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtoCVConvertFunc
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_On_Cfg
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Off_Cfg
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.CreateTask)
</UL>
<P><STRONG><a name="[456]"></a>AuxRecordDatSync</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, app_task_protocol.o(i.AuxRecordDatSync))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit2_OvfIrqCallback
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPer10ms
</UL>

<P><STRONG><a name="[35c]"></a>AuxRecordDatUpcast</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, app_task_protocol.o(i.AuxRecordDatUpcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AuxRecordDatUpcast &rArr; W5500_send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_send
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16N
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLed
</UL>

<P><STRONG><a name="[365]"></a>BarCode_Mac_CheckSet</STRONG> (Thumb, 394 bytes, Stack size 88 bytes, main.o(i.BarCode_Mac_CheckSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = BarCode_Mac_CheckSet &rArr; ee_ReadBytes &rArr; osKernelRestoreLock &rArr; EvrRtxKernelRestoreLock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[37a]"></a>BatteryFormattingProcess</STRONG> (Thumb, 702 bytes, Stack size 72 bytes, app_task_workstep.o(i.BatteryFormattingProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = BatteryFormattingProcess &rArr; CurLinearOutputSetting &rArr; DAC80508_ReadDacData &rArr; DAC80508_ReadCmd &rArr; SPI5_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_SetDacData
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Port_Cfg
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolAnalogToDigital
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurLinearOutputSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Execute_Func
</UL>

<P><STRONG><a name="[374]"></a>BatteryFormattingStop</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, app_task_workstep.o(i.BatteryFormattingStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = BatteryFormattingStop &rArr; CurLinearOutputSetting &rArr; DAC80508_ReadDacData &rArr; DAC80508_ReadCmd &rArr; SPI5_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Port_Cfg
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurLinearOutputSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPer10ms
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Switch_Func
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Execute_Func
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Analysis_Func
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Abort_Func
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Action_Func
</UL>

<P><STRONG><a name="[35b]"></a>Buffer_Data_To_Record</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, app_task_protocol.o(i.Buffer_Data_To_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Buffer_Data_To_Record &rArr; W5500_send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_send
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLed
</UL>

<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BusFault_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>BusFault_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.BusFault_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[e8]"></a>CAN_1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.CAN_1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[e9]"></a>CAN_2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.CAN_2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[382]"></a>CAN_AFConfig</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, hc32f4a0_can.o(i.CAN_AFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[383]"></a>CAN_AbortTrans</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hc32f4a0_can.o(i.CAN_AbortTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_AbortTrans
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_SendData
</UL>

<P><STRONG><a name="[381]"></a>CAN_ClrStatus</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hc32f4a0_can.o(i.CAN_ClrStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_ClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IrqCallback
</UL>

<P><STRONG><a name="[384]"></a>CAN_DeInit</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, hc32f4a0_can.o(i.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Config
</UL>

<P><STRONG><a name="[385]"></a>CAN_EnterNormalComm</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hc32f4a0_can.o(i.CAN_EnterNormalComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_EnterNormalComm
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[392]"></a>CAN_FD_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hc32f4a0_can.o(i.CAN_FD_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
</UL>

<P><STRONG><a name="[37f]"></a>CAN_GetErrType</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hc32f4a0_can.o(i.CAN_GetErrType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_GetErrType
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IrqCallback
</UL>

<P><STRONG><a name="[386]"></a>CAN_GetStatus</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, hc32f4a0_can.o(i.CAN_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_SendData
</UL>

<P><STRONG><a name="[37e]"></a>CAN_GetStatusVal</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, hc32f4a0_can.o(i.CAN_GetStatusVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_GetStatusVal
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransData
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IrqCallback
</UL>

<P><STRONG><a name="[387]"></a>CAN_Init</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, hc32f4a0_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN_Init &rArr; CAN_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetWorkMode
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetTransMode
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetSTBPrioMode
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRBStoreSel
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRBSWarnLimit
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRBOvfOp
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetErrWarnLimit
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SWReset
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnterNormalComm
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClrStatus
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_AFConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Config
</UL>

<P><STRONG><a name="[390]"></a>CAN_IntCmd</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, hc32f4a0_can.o(i.CAN_IntCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1IrqConfig
</UL>

<P><STRONG><a name="[394]"></a>CAN_ReceiveData</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, hc32f4a0_can.o(i.CAN_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_ResvData
</UL>

<P><STRONG><a name="[388]"></a>CAN_SWReset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hc32f4a0_can.o(i.CAN_SWReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_SWReset
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_SendData
</UL>

<P><STRONG><a name="[38e]"></a>CAN_SetErrWarnLimit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hc32f4a0_can.o(i.CAN_SetErrWarnLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_SetErrWarnLimit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[38f]"></a>CAN_SetRBOvfOp</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hc32f4a0_can.o(i.CAN_SetRBOvfOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_SetRBOvfOp
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[38d]"></a>CAN_SetRBSWarnLimit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hc32f4a0_can.o(i.CAN_SetRBSWarnLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_SetRBSWarnLimit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[38c]"></a>CAN_SetRBStoreSel</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hc32f4a0_can.o(i.CAN_SetRBStoreSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_SetRBStoreSel
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[389]"></a>CAN_SetSTBPrioMode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hc32f4a0_can.o(i.CAN_SetSTBPrioMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_SetSTBPrioMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[38b]"></a>CAN_SetTransMode</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hc32f4a0_can.o(i.CAN_SetTransMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_SetTransMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[38a]"></a>CAN_SetWorkMode</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, hc32f4a0_can.o(i.CAN_SetWorkMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_SetWorkMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[391]"></a>CAN_StructInit</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, hc32f4a0_can.o(i.CAN_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FD_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Config
</UL>

<P><STRONG><a name="[393]"></a>CAN_TransData</STRONG> (Thumb, 404 bytes, Stack size 64 bytes, hc32f4a0_can.o(i.CAN_TransData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CAN_TransData &rArr; CAN_GetStatusVal
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetStatusVal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_SendData
</UL>

<P><STRONG><a name="[2e4]"></a>CANx_SendData</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, bsp_acdc.o(i.CANx_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CANx_SendData &rArr; CAN_TransData &rArr; CAN_GetStatusVal
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransData
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SWReset
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetStatus
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_AbortTrans
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_WDG
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDC_FW_VERSION_CMD
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDC_ACV_Query_CMD
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDC_Fan_Speed_CMD
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDC_Fan_Speed51_ModeTest
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClear
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDCUpdateAnalysis
</UL>

<P><STRONG><a name="[378]"></a>CCtoCVConvertFunc</STRONG> (Thumb, 1192 bytes, Stack size 24 bytes, app_task_workstep.o(i.CCtoCVConvertFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CCtoCVConvertFunc &rArr; __hardfp_fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskWorkstep
</UL>

<P><STRONG><a name="[398]"></a>CLK_CAN_ClkConfig</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, hc32f4a0_clk.o(i.CLK_CAN_ClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_CAN_ClkConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Config
</UL>

<P><STRONG><a name="[32f]"></a>CLK_ClkDiv</STRONG> (Thumb, 962 bytes, Stack size 40 bytes, hc32f4a0_clk.o(i.CLK_ClkDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_ClkDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcClockConfig
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRNG
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[399]"></a>CLK_GetStableStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hc32f4a0_clk.o(i.CLK_GetStableStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLHCmd
</UL>

<P><STRONG><a name="[330]"></a>CLK_PERI_ClkConfig</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, hc32f4a0_clk.o(i.CLK_PERI_ClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_PERI_ClkConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcClockConfig
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRNG
</UL>

<P><STRONG><a name="[39a]"></a>CLK_PLLHCmd</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, hc32f4a0_clk.o(i.CLK_PLLHCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_PLLHCmd &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetStableStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLHInit
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[39b]"></a>CLK_PLLHInit</STRONG> (Thumb, 588 bytes, Stack size 24 bytes, hc32f4a0_clk.o(i.CLK_PLLHInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_PLLHInit &rArr; CLK_PLLHCmd &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLHCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[46a]"></a>CLK_PLLHStructInit</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, hc32f4a0_clk.o(i.CLK_PLLHStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[39c]"></a>CLK_SetSysClkSrc</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, hc32f4a0_clk.o(i.CLK_SetSysClkSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_SetSysClkSrc &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[39d]"></a>CLK_XtalCmd</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, hc32f4a0_clk.o(i.CLK_XtalCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_XtalCmd &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetStableStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
</UL>

<P><STRONG><a name="[39e]"></a>CLK_XtalInit</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, hc32f4a0_clk.o(i.CLK_XtalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_XtalInit &rArr; CLK_XtalCmd &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ea]"></a>CLK_XtalStop_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.CLK_XtalStop_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[469]"></a>CLK_XtalStructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hc32f4a0_clk.o(i.CLK_XtalStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[34e]"></a>CRC16N</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, app_task_protocol.o(i.CRC16N))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CRC16N &rArr; CRC16_2
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_2
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskProtection
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppACDC_alarm
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordDatUpcast
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmQuarry
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepProtUpcast
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPack
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvUnpack
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxRecordDatUpcast
</UL>

<P><STRONG><a name="[39f]"></a>CRC16_2</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_task_protocol.o(i.CRC16_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC16_2
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16N
</UL>

<P><STRONG><a name="[eb]"></a>CTC_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.CTC_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[ec]"></a>CTC_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.CTC_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[3a3]"></a>CalibrateDatInit</STRONG> (Thumb, 664 bytes, Stack size 16 bytes, app_func_eeprom.o(i.CalibrateDatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CalibrateDatInit &rArr; Tier2ToTier1
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tier2ToTier1
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDatInit
</UL>

<P><STRONG><a name="[3a5]"></a>CalibrateInqAnalysis</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, app_task_protocol.o(i.CalibrateInqAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CalibrateInqAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[3a6]"></a>CalibrateSetAnalysis</STRONG> (Thumb, 502 bytes, Stack size 64 bytes, app_task_protocol.o(i.CalibrateSetAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CalibrateSetAnalysis &rArr; ee_WriteBytesWithCheck &rArr; ee_ReadBytes &rArr; osKernelRestoreLock &rArr; EvrRtxKernelRestoreLock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytesWithCheck
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[349]"></a>Chg_Dis_Off_Cfg</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, app_task_ageing.o(i.Chg_Dis_Off_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Chg_Dis_Off_Cfg &rArr; DAC_SetLinearData &rArr; DAC80508_ReadDacData &rArr; DAC80508_ReadCmd &rArr; SPI5_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetLinearData
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_SetDacData
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Port_Cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Trigger_Judgemet
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskWorkstep
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfChecking
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ageing
</UL>

<P><STRONG><a name="[346]"></a>Chg_Dis_On_Cfg</STRONG> (Thumb, 688 bytes, Stack size 72 bytes, app_task_ageing.o(i.Chg_Dis_On_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Chg_Dis_On_Cfg &rArr; DAC_SetLinearData &rArr; DAC80508_ReadDacData &rArr; DAC80508_ReadCmd &rArr; SPI5_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetLinearData
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_SetDacData
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Port_Cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskWorkstep
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfChecking
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ageing
</UL>

<P><STRONG><a name="[342]"></a>Chg_Dis_Port_Cfg</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, bsp_charge.o(i.Chg_Dis_Port_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Chg_Dis_Port_Cfg &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCharge
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingStop
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetAnalysis
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugSystemSetAnalysis
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingProcess
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfChecking
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_On_Cfg
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Off_Cfg
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ageing
</UL>

<P><STRONG><a name="[30d]"></a>ComputeCRC8</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bsp_ad7124.o(i.ComputeCRC8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ComputeCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_WriteReg
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_ReadReg
</UL>

<P><STRONG><a name="[3ad]"></a>CurAnalogToDigital</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, app_task_workstep.o(i.CurAnalogToDigital))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CurAnalogToDigital
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurLinearOutputSetting
</UL>

<P><STRONG><a name="[37d]"></a>CurLinearOutputSetting</STRONG> (Thumb, 472 bytes, Stack size 88 bytes, app_task_workstep.o(i.CurLinearOutputSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CurLinearOutputSetting &rArr; DAC80508_ReadDacData &rArr; DAC80508_ReadCmd &rArr; SPI5_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;En_int
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_int
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_SetDacData
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_ReadDacData
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurAnalogToDigital
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingStop
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingProcess
</UL>

<P><STRONG><a name="[3af]"></a>DAC1_SpiInit</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, bsp_spi.o(i.DAC1_SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DAC1_SpiInit &rArr; GPIO_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FunctionCmd
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_dac_spi_init
</UL>

<P><STRONG><a name="[3b0]"></a>DAC2_SpiInit</STRONG> (Thumb, 220 bytes, Stack size 72 bytes, bsp_spi.o(i.DAC2_SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DAC2_SpiInit &rArr; GPIO_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FunctionCmd
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_dac_spi_init
</UL>

<P><STRONG><a name="[3b1]"></a>DAC80508_BRDCAST</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bsp_dac80508.o(i.DAC80508_BRDCAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DAC80508_BRDCAST &rArr; DAC80508_WriteCmd &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dacx0508_cfg
</UL>

<P><STRONG><a name="[3ac]"></a>DAC80508_ReadDacData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp_dac80508.o(i.DAC80508_ReadDacData))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DAC80508_ReadDacData &rArr; DAC80508_ReadCmd &rArr; SPI5_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_ReadCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetLinearData
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurLinearOutputSetting
</UL>

<P><STRONG><a name="[37c]"></a>DAC80508_SetDacData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp_dac80508.o(i.DAC80508_SetDacData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DAC80508_SetDacData &rArr; DAC80508_WriteCmd &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetLinearData
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurLinearOutputSetting
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingProcess
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_On_Cfg
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Off_Cfg
</UL>

<P><STRONG><a name="[3aa]"></a>DAC_SetLinearData</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, bsp_dac80508.o(i.DAC_SetLinearData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DAC_SetLinearData &rArr; DAC80508_ReadDacData &rArr; DAC80508_ReadCmd &rArr; SPI5_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_SetDacData
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_ReadDacData
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_On_Cfg
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Off_Cfg
</UL>

<P><STRONG><a name="[2b7]"></a>DBGRS232_RxHandler</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, bsp_debug.o(i.DBGRS232_RxHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DBGRS232_RxHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC_USART_RxIrq_Callback
</UL>

<P><STRONG><a name="[ed]"></a>DCU_1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DCU_1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[ee]"></a>DCU_2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DCU_2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[ef]"></a>DCU_3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DCU_3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[f0]"></a>DCU_4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DCU_4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[f1]"></a>DCU_5_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DCU_5_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[f2]"></a>DCU_6_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DCU_6_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[f3]"></a>DCU_7_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DCU_7_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[f4]"></a>DCU_8_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DCU_8_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[d6]"></a>DDL_AssertHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hc32f4a0_utility.o(i.DDL_AssertHandler))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransData
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetWorkMode
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetTransMode
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetSTBPrioMode
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRBStoreSel
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRBSWarnLimit
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRBOvfOp
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetErrWarnLimit
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SWReset
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IntCmd
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetStatusVal
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetStatus
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetErrType
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnterNormalComm
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClrStatus
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_AbortTrans
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_AFConfig
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetChannelPinNum
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelRemap
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelCmd
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AvgChannelConfig
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AvgChannelCmd
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTriggerSrc
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RepeatInit
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearTransIntStatus
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSrc
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLHInit
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLHCmd
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PERI_ClkConfig
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetStableStatus
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_ClkDiv
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_CAN_ClkConfig
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TogglePins
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetReadWaitCycle
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDebugPort
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetWaitCycle
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SequenceProgram
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorCmd_Sequential
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_GetFlagStatus
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FWMC_Unlock
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FWMC_Lock
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ClearFlag
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWDT_Init
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetWaitCycle
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FunctionCmd
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_VBAT_Reset
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg3PeriphClockCmd
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcUartBaudrate
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSmartcardBaudrate
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcClkSyncBaudrate
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_SetShiftCnt
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_ReloadCmd
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_Stop
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_Start
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_IntCmd
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_Init
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_GetStatus
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_ClrStatus
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UartInit
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT_Init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT_GetExIntSrc
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT_ClrExIntSrc
</UL>

<P><STRONG><a name="[f5]"></a>DMA_1_Btc0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Btc0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[f6]"></a>DMA_1_Btc1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Btc1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[f7]"></a>DMA_1_Btc2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Btc2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[f8]"></a>DMA_1_Btc3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Btc3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[f9]"></a>DMA_1_Btc4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Btc4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[fa]"></a>DMA_1_Btc5_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Btc5_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[fb]"></a>DMA_1_Btc6_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Btc6_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[fc]"></a>DMA_1_Btc7_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Btc7_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[fd]"></a>DMA_1_Err0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Err0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[fe]"></a>DMA_1_Err1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Err1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[ff]"></a>DMA_1_Err2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Err2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[100]"></a>DMA_1_Err3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Err3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[101]"></a>DMA_1_Err4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Err4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[102]"></a>DMA_1_Err5_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Err5_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[103]"></a>DMA_1_Err6_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Err6_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[104]"></a>DMA_1_Err7_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Err7_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[105]"></a>DMA_1_Tc0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Tc0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[106]"></a>DMA_1_Tc1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Tc1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[107]"></a>DMA_1_Tc2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Tc2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[108]"></a>DMA_1_Tc3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Tc3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[109]"></a>DMA_1_Tc4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Tc4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[10a]"></a>DMA_1_Tc5_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Tc5_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[10b]"></a>DMA_1_Tc6_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Tc6_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[10c]"></a>DMA_1_Tc7_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_1_Tc7_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[10d]"></a>DMA_2_Btc0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Btc0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[10e]"></a>DMA_2_Btc1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Btc1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[10f]"></a>DMA_2_Btc2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Btc2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[110]"></a>DMA_2_Btc3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Btc3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[111]"></a>DMA_2_Btc4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Btc4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[112]"></a>DMA_2_Btc5_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Btc5_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[113]"></a>DMA_2_Btc6_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Btc6_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[114]"></a>DMA_2_Btc7_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Btc7_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[115]"></a>DMA_2_Err0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Err0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[116]"></a>DMA_2_Err1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Err1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[117]"></a>DMA_2_Err2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Err2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[118]"></a>DMA_2_Err3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Err3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[119]"></a>DMA_2_Err4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Err4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[11a]"></a>DMA_2_Err5_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Err5_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[11b]"></a>DMA_2_Err6_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Err6_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[11c]"></a>DMA_2_Err7_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Err7_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[11d]"></a>DMA_2_Tc0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Tc0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[11e]"></a>DMA_2_Tc1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Tc1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[11f]"></a>DMA_2_Tc2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Tc2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[120]"></a>DMA_2_Tc3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Tc3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[121]"></a>DMA_2_Tc4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Tc4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[122]"></a>DMA_2_Tc5_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Tc5_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[123]"></a>DMA_2_Tc6_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Tc6_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[124]"></a>DMA_2_Tc7_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DMA_2_Tc7_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[33a]"></a>DMA_ChannelCmd</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hc32f4a0_dma.o(i.DMA_ChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDmaConfig
</UL>

<P><STRONG><a name="[33b]"></a>DMA_ClearTransIntStatus</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hc32f4a0_dma.o(i.DMA_ClearTransIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_ClearTransIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Btc0_IrqCallback
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDmaIrqConfig
</UL>

<P><STRONG><a name="[339]"></a>DMA_Cmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hc32f4a0_dma.o(i.DMA_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDmaConfig
</UL>

<P><STRONG><a name="[335]"></a>DMA_Init</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, hc32f4a0_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDmaConfig
</UL>

<P><STRONG><a name="[337]"></a>DMA_RepeatInit</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, hc32f4a0_dma.o(i.DMA_RepeatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_RepeatInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDmaConfig
</UL>

<P><STRONG><a name="[336]"></a>DMA_RepeatStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hc32f4a0_dma.o(i.DMA_RepeatStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDmaConfig
</UL>

<P><STRONG><a name="[333]"></a>DMA_SetTriggerSrc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, hc32f4a0_dma.o(i.DMA_SetTriggerSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_SetTriggerSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDmaConfig
</UL>

<P><STRONG><a name="[334]"></a>DMA_StructInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hc32f4a0_dma.o(i.DMA_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDmaConfig
</UL>

<P><STRONG><a name="[3b7]"></a>DMA_adc3_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_adc3.o(i.DMA_adc3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DMA_adc3_init &rArr; AdcChannelConfig &rArr; AdcSetChannelPinAnalogMode &rArr; AdcSetPinAnalogMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInitConfig
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDmaConfig
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcClockConfig
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcChannelConfig
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[125]"></a>DVP_FifoErr_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DVP_FifoErr_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[126]"></a>DVP_FrameEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DVP_FrameEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[127]"></a>DVP_FrameStart_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DVP_FrameStart_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[128]"></a>DVP_LineEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DVP_LineEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[129]"></a>DVP_LineStart_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DVP_LineStart_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[12a]"></a>DVP_SwSyncErr_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DVP_SwSyncErr_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[3b9]"></a>DebugDataInqAnalysis</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, app_task_protocol.o(i.DebugDataInqAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DebugDataInqAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DebugMon_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>DebugMon_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.DebugMon_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>

<P><STRONG><a name="[450]"></a>DebugParamSetAnalysis</STRONG> (Thumb, 458 bytes, Stack size 32 bytes, app_task_protocol.o(i.DebugParamSetAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DebugParamSetAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[3ba]"></a>DebugSystemSetAnalysis</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, app_task_protocol.o(i.DebugSystemSetAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DebugSystemSetAnalysis &rArr; Chg_Dis_Port_Cfg &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Port_Cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[451]"></a>DefaultAnalyze</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_task_protocol.o(i.DefaultAnalyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DefaultAnalyze
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[3ab]"></a>Dis_int</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp.o(i.Dis_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dis_int
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepDatSync
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetAnalysis
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurLinearOutputSetting
</UL>

<P><STRONG><a name="[3bc]"></a>Disable_Mloop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_gpio.o(i.Disable_Mloop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Disable_Mloop &rArr; GPIO_ResetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit3_OvfIrqCallback
</UL>

<P><STRONG><a name="[3bd]"></a>EFM_ClearFlag</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hc32f4a0_efm.o(i.EFM_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFM_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SequenceProgram
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
</UL>

<P><STRONG><a name="[12c]"></a>EFM_ColErr_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EFM_ColErr_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[3be]"></a>EFM_FWMC_Lock</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hc32f4a0_efm.o(i.EFM_FWMC_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFM_FWMC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peripheral_WP
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
</UL>

<P><STRONG><a name="[3bf]"></a>EFM_FWMC_Unlock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hc32f4a0_efm.o(i.EFM_FWMC_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFM_FWMC_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peripheral_WE
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
</UL>

<P><STRONG><a name="[3c0]"></a>EFM_GetFlagStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hc32f4a0_efm.o(i.EFM_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFM_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SequenceProgram
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
</UL>

<P><STRONG><a name="[12d]"></a>EFM_OpEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EFM_OpEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[12e]"></a>EFM_PgmEraseErr_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EFM_PgmEraseErr_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[3c1]"></a>EFM_SectorCmd_Sequential</STRONG> (Thumb, 316 bytes, Stack size 64 bytes, hc32f4a0_efm.o(i.EFM_SectorCmd_Sequential))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EFM_SectorCmd_Sequential
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Update_Zone
</UL>

<P><STRONG><a name="[3c2]"></a>EFM_SectorErase</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, hc32f4a0_efm.o(i.EFM_SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EFM_SectorErase &rArr; EFM_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_GetFlagStatus
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Update_Zone
</UL>

<P><STRONG><a name="[3c3]"></a>EFM_SequenceProgram</STRONG> (Thumb, 500 bytes, Stack size 48 bytes, hc32f4a0_efm.o(i.EFM_SequenceProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EFM_SequenceProgram &rArr; EFM_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_GetFlagStatus
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
</UL>

<P><STRONG><a name="[3c4]"></a>EFM_SetWaitCycle</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hc32f4a0_efm.o(i.EFM_SetWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFM_SetWaitCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[12f]"></a>EMB_GR0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EMB_GR0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[130]"></a>EMB_GR1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EMB_GR1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[131]"></a>EMB_GR2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EMB_GR2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[132]"></a>EMB_GR3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EMB_GR3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[133]"></a>EMB_GR4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EMB_GR4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[134]"></a>EMB_GR5_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EMB_GR5_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[135]"></a>EMB_GR6_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EMB_GR6_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[136]"></a>ETH_Global_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.ETH_Global_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[137]"></a>ETH_Wakeup_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.ETH_Wakeup_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[305]"></a>EXINT_ClrExIntSrc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.EXINT_ClrExIntSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXINT_ClrExIntSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_EXINT_IrqCallback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_EXINT_IrqCallback
</UL>

<P><STRONG><a name="[304]"></a>EXINT_GetExIntSrc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.EXINT_GetExIntSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXINT_GetExIntSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_EXINT_IrqCallback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_EXINT_IrqCallback
</UL>

<P><STRONG><a name="[2ff]"></a>EXINT_Init</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, hc32f4a0_interrupts.o(i.EXINT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXINT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_EXINT_Init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_EXINT_Init
</UL>

<P><STRONG><a name="[2fe]"></a>EXINT_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EXINT_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_EXINT_Init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_EXINT_Init
</UL>

<P><STRONG><a name="[138]"></a>EXTINT_00_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EXTINT_00_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[139]"></a>EXTINT_01_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EXTINT_01_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[13a]"></a>EXTINT_02_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EXTINT_02_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[13b]"></a>EXTINT_03_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EXTINT_03_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[13c]"></a>EXTINT_04_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EXTINT_04_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[13d]"></a>EXTINT_05_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EXTINT_05_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[13e]"></a>EXTINT_06_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EXTINT_06_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[13f]"></a>EXTINT_07_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EXTINT_07_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[140]"></a>EXTINT_08_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EXTINT_08_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[141]"></a>EXTINT_09_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EXTINT_09_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[142]"></a>EXTINT_10_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EXTINT_10_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[143]"></a>EXTINT_11_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EXTINT_11_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[144]"></a>EXTINT_12_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EXTINT_12_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[145]"></a>EXTINT_13_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EXTINT_13_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[146]"></a>EXTINT_14_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EXTINT_14_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[147]"></a>EXTINT_15_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.EXTINT_15_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[3c5]"></a>EepDatLoad</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, app_func_eeprom.o(i.EepDatLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EepDatLoad &rArr; ee_ReadBytes &rArr; osKernelRestoreLock &rArr; EvrRtxKernelRestoreLock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tier1ToTier2
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDatInit
</UL>

<P><STRONG><a name="[3c7]"></a>EepDatSync</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, app_func_eeprom.o(i.EepDatSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = EepDatSync &rArr; ee_WriteBytesWithCheck &rArr; ee_ReadBytes &rArr; osKernelRestoreLock &rArr; EvrRtxKernelRestoreLock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;En_int
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_int
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytesWithCheck
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDatInit
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalProtectSetAnalysis
</UL>

<P><STRONG><a name="[370]"></a>EepromDatInit</STRONG> (Thumb, 402 bytes, Stack size 16 bytes, app_func_eeprom.o(i.EepromDatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = EepromDatInit &rArr; EepDatSync &rArr; ee_WriteBytesWithCheck &rArr; ee_ReadBytes &rArr; osKernelRestoreLock &rArr; EvrRtxKernelRestoreLock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalProtectDatInit
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalProtectDatInit
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepDatLoad
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateDatInit
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepDatSync
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[3ae]"></a>En_int</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp.o(i.En_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = En_int
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepDatSync
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetAnalysis
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurLinearOutputSetting
</UL>

<P><STRONG><a name="[3cc]"></a>Enable_Mloop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_gpio.o(i.Enable_Mloop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Enable_Mloop &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit3_OvfIrqCallback
</UL>

<P><STRONG><a name="[3cd]"></a>Erase_Update_Zone</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, app_task_protocol.o(i.Erase_Update_Zone))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Erase_Update_Zone &rArr; EFM_SectorCmd_Sequential
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorCmd_Sequential
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_WDG
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
</UL>

<P><STRONG><a name="[2b6]"></a>Error_Handler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Error_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Switch_Channel
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_WriteCmd
</UL>

<P><STRONG><a name="[3d3]"></a>EventRecord2</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, eventrecorder.o(i.EventRecord2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStopped
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStop
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerDestroyed
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerDelete
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadTerminate
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSuspended
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSuspend
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreRelease
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreCreated
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquirePending
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquire
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelUnlocked
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelUnlock
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelRestoreLock
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelLocked
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelLockRestored
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelLock
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
</UL>

<P><STRONG><a name="[3d6]"></a>EventRecord4</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, eventrecorder.o(i.EventRecord4))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNew
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNew
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>

<P><STRONG><a name="[3de]"></a>EventRecorderEnable</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, eventrecorder.o(i.EventRecorderEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EventRecorderEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evr_initialize
</UL>

<P><STRONG><a name="[3da]"></a>EventRecorderInitialize</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, eventrecorder.o(i.EventRecorderInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerSetup
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetFreq
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evr_initialize
</UL>

<P><STRONG><a name="[3df]"></a>EventRecorderStart</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, eventrecorder.o(i.EventRecorderStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[3d0]"></a>EventRecorderTimerGetCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eventrecorder.o(i.EventRecorderTimerGetCount))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[3dd]"></a>EventRecorderTimerGetFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eventrecorder.o(i.EventRecorderTimerGetFreq))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[3dc]"></a>EventRecorderTimerSetup</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, eventrecorder.o(i.EventRecorderTimerSetup))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[3e0]"></a>EvrRtxDelay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxDelay &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[3e1]"></a>EvrRtxDelayCompleted</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxDelayCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxDelayCompleted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[3e2]"></a>EvrRtxDelayError</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxDelayError))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxDelayError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[3e3]"></a>EvrRtxDelayStarted</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxDelayStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxDelayStarted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[3e4]"></a>EvrRtxEventFlagsWaitTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxEventFlagsWaitTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxEventFlagsWaitTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[3e5]"></a>EvrRtxKernelError</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelError))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelUnlock
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelRestoreLock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelLock
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
</UL>

<P><STRONG><a name="[3e6]"></a>EvrRtxKernelInitialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelInitialize &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[3e7]"></a>EvrRtxKernelInitialized</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelInitialized))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelInitialized &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[3e8]"></a>EvrRtxKernelLock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelLock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
</UL>

<P><STRONG><a name="[3e9]"></a>EvrRtxKernelLockRestored</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelLockRestored))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelLockRestored &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelRestoreLock
</UL>

<P><STRONG><a name="[3ea]"></a>EvrRtxKernelLocked</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelLocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelLocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelLock
</UL>

<P><STRONG><a name="[3eb]"></a>EvrRtxKernelRestoreLock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelRestoreLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelRestoreLock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
</UL>

<P><STRONG><a name="[3ec]"></a>EvrRtxKernelStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelStart &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[3ed]"></a>EvrRtxKernelStarted</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelStarted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[3ee]"></a>EvrRtxKernelUnlock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelUnlock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
</UL>

<P><STRONG><a name="[3ef]"></a>EvrRtxKernelUnlocked</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelUnlocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelUnlocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelUnlock
</UL>

<P><STRONG><a name="[3f0]"></a>EvrRtxMemoryAlloc</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[3f1]"></a>EvrRtxMemoryBlockAlloc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMemoryBlockAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[3f2]"></a>EvrRtxMemoryBlockFree</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMemoryBlockFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMemoryBlockFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[3f3]"></a>EvrRtxMemoryBlockInit</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMemoryBlockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMemoryBlockInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>

<P><STRONG><a name="[3f4]"></a>EvrRtxMemoryFree</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[3f5]"></a>EvrRtxMemoryInit</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMemoryInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[3f6]"></a>EvrRtxMemoryPoolAllocTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxMemoryPoolAllocTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxMemoryPoolAllocTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[3f7]"></a>EvrRtxMessageQueueCreated</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMessageQueueCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueCreated &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[3f8]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMessageQueueError))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[3f9]"></a>EvrRtxMessageQueueGet</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMessageQueueGet &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[3fa]"></a>EvrRtxMessageQueueGetPending</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMessageQueueGetPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMessageQueueGetPending &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[3fb]"></a>EvrRtxMessageQueueGetTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxMessageQueueGetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxMessageQueueGetTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[3fc]"></a>EvrRtxMessageQueueInsertPending</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMessageQueueInsertPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueInsertPending &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[3fd]"></a>EvrRtxMessageQueueInserted</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMessageQueueInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueInserted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[3fe]"></a>EvrRtxMessageQueueNew</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMessageQueueNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>

<P><STRONG><a name="[3ff]"></a>EvrRtxMessageQueueNotInserted</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMessageQueueNotInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueNotInserted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[400]"></a>EvrRtxMessageQueueNotRetrieved</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMessageQueueNotRetrieved))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueNotRetrieved &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[401]"></a>EvrRtxMessageQueuePut</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMessageQueuePut &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[402]"></a>EvrRtxMessageQueuePutPending</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMessageQueuePutPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMessageQueuePutPending &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[403]"></a>EvrRtxMessageQueuePutTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxMessageQueuePutTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxMessageQueuePutTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[404]"></a>EvrRtxMessageQueueRetrieved</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMessageQueueRetrieved))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueRetrieved &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[405]"></a>EvrRtxMutexAcquireTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxMutexAcquireTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxMutexAcquireTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[406]"></a>EvrRtxMutexAcquired</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMutexAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMutexAcquired &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>

<P><STRONG><a name="[407]"></a>EvrRtxMutexReleased</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMutexReleased))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMutexReleased &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>

<P><STRONG><a name="[408]"></a>EvrRtxSemaphoreAcquire</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxSemaphoreAcquire &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[409]"></a>EvrRtxSemaphoreAcquirePending</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxSemaphoreAcquirePending))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxSemaphoreAcquirePending &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[40a]"></a>EvrRtxSemaphoreAcquireTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxSemaphoreAcquireTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxSemaphoreAcquireTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[40b]"></a>EvrRtxSemaphoreAcquired</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxSemaphoreAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxSemaphoreAcquired &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[40c]"></a>EvrRtxSemaphoreCreated</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxSemaphoreCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxSemaphoreCreated &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
</UL>

<P><STRONG><a name="[40d]"></a>EvrRtxSemaphoreError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxSemaphoreError))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxSemaphoreError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[40e]"></a>EvrRtxSemaphoreNew</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxSemaphoreNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[40f]"></a>EvrRtxSemaphoreNotAcquired</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxSemaphoreNotAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxSemaphoreNotAcquired &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[410]"></a>EvrRtxSemaphoreRelease</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxSemaphoreRelease &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[411]"></a>EvrRtxSemaphoreReleased</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxSemaphoreReleased))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxSemaphoreReleased &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[412]"></a>EvrRtxThreadBlocked</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxThreadBlocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxThreadBlocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[413]"></a>EvrRtxThreadCreated</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxThreadCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxThreadCreated &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[414]"></a>EvrRtxThreadDestroyed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadDestroyed))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadDestroyed &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[415]"></a>EvrRtxThreadError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxThreadError))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[416]"></a>EvrRtxThreadExit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadExit &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[417]"></a>EvrRtxThreadFlagsWaitCompleted</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxThreadFlagsWaitCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxThreadFlagsWaitCompleted &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[418]"></a>EvrRtxThreadFlagsWaitTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadFlagsWaitTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadFlagsWaitTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[419]"></a>EvrRtxThreadJoined</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadJoined))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadJoined &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[41a]"></a>EvrRtxThreadNew</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[41b]"></a>EvrRtxThreadPreempted</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadPreempted))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>

<P><STRONG><a name="[41c]"></a>EvrRtxThreadSuspend</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadSuspend &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
</UL>

<P><STRONG><a name="[41d]"></a>EvrRtxThreadSuspended</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadSuspended &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
</UL>

<P><STRONG><a name="[41e]"></a>EvrRtxThreadSwitched</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadSwitched))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[41f]"></a>EvrRtxThreadTerminate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadTerminate &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[420]"></a>EvrRtxThreadUnblocked</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxThreadUnblocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxThreadUnblocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[421]"></a>EvrRtxTimerCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxTimerCallback &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[422]"></a>EvrRtxTimerDelete</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxTimerDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxTimerDelete &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
</UL>

<P><STRONG><a name="[423]"></a>EvrRtxTimerDestroyed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxTimerDestroyed))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxTimerDestroyed &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerDelete
</UL>

<P><STRONG><a name="[424]"></a>EvrRtxTimerError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxTimerError))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxTimerError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStop
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerDelete
</UL>

<P><STRONG><a name="[425]"></a>EvrRtxTimerStop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxTimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxTimerStop &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
</UL>

<P><STRONG><a name="[426]"></a>EvrRtxTimerStopped</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxTimerStopped))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxTimerStopped &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStop
</UL>

<P><STRONG><a name="[427]"></a>ExternalAdDatProcess</STRONG> (Thumb, 1498 bytes, Stack size 4 bytes, app_timer_periodic_adc3.o(i.ExternalAdDatProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ExternalAdDatProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Value_Soft_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit3_OvfIrqCallback
</UL>

<P><STRONG><a name="[148]"></a>FCM_End_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.FCM_End_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[149]"></a>FCM_Err_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.FCM_Err_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[14a]"></a>FCM_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.FCM_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[14b]"></a>FMAC_1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.FMAC_1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[14c]"></a>FMAC_2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.FMAC_2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[14d]"></a>FMAC_3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.FMAC_3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[14e]"></a>FMAC_4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.FMAC_4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[36a]"></a>Feed_WDG</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_gpio.o(i.Feed_WDG))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Feed_WDG &rArr; GPIO_TogglePins
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TogglePins
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWDT_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_SendData
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Set_Vector
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit3_OvfIrqCallback
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit2_OvfIrqCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit1_OvfIrqCallback
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Update_Zone
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_spi_writebyte
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_spi_readbyte
</UL>

<P><STRONG><a name="[2f0]"></a>GPIO_Init</STRONG> (Thumb, 424 bytes, Stack size 32 bytes, hc32f4a0_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSetPinAnalogMode
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_SpiInit
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_EXINT_Init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_SpiInit
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_EXINT_Init
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_M_Loop_InitGPIO
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitI2C
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCharge
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_HWDG_InitGPIO
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_FR_ADDR_InitGPIO
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_SpiInit
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_RST_Init
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_MB85R_SpiInit
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Switch_ConfigGPIO
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Init
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC2_SpiInit
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_SpiInit
</UL>

<P><STRONG><a name="[42b]"></a>GPIO_ReadInputPins</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, hc32f4a0_gpio.o(i.GPIO_ReadInputPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ReadInputPins
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Scanning
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit2_OvfIrqCallback
</UL>

<P><STRONG><a name="[307]"></a>GPIO_ResetPins</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, hc32f4a0_gpio.o(i.GPIO_ResetPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ResetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Switch_Channel
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_WriteReg
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_Reset
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_ReadReg
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7124_wait_to_power_on
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_WriteReg
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_Reset
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_ReadReg
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_ReadId
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AD7175Init
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AD7124Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Write
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOn
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Read
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Mloop
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadSR
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_EXINT_IrqCallback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_EXINT_IrqCallback
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_WriteCmd
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_ReadCmd
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Port_Cfg
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_ReadID
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_cs_select
</UL>

<P><STRONG><a name="[42c]"></a>GPIO_SetDebugPort</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, hc32f4a0_gpio.o(i.GPIO_SetDebugPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetDebugPort
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_M_Loop_InitGPIO
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_SpiInit
</UL>

<P><STRONG><a name="[312]"></a>GPIO_SetFunc</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, hc32f4a0_gpio.o(i.GPIO_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_SpiInit
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_SpiInit
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Config
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUSART
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_SpiInit
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_MB85R_SpiInit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC2_SpiInit
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_SpiInit
</UL>

<P><STRONG><a name="[30c]"></a>GPIO_SetPins</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, hc32f4a0_gpio.o(i.GPIO_SetPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Switch_Channel
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_WriteReg
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_Reset
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_ReadReg
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7124_wait_to_power_on
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_WriteReg
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_Reset
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_ReadReg
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_ReadId
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AD7175Init
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AD7124Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Write
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOn
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Read
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Mloop
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadSR
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_WriteCmd
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_ReadCmd
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Port_Cfg
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_ReadID
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_cs_deselect
</UL>

<P><STRONG><a name="[42d]"></a>GPIO_SetReadWaitCycle</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, hc32f4a0_gpio.o(i.GPIO_SetReadWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetReadWaitCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[2ef]"></a>GPIO_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hc32f4a0_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSetPinAnalogMode
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_SpiInit
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_EXINT_Init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_SpiInit
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_EXINT_Init
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_M_Loop_InitGPIO
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitI2C
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCharge
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_HWDG_InitGPIO
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_FR_ADDR_InitGPIO
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_SpiInit
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_RST_Init
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_MB85R_SpiInit
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Switch_ConfigGPIO
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Init
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC2_SpiInit
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_SpiInit
</UL>

<P><STRONG><a name="[42a]"></a>GPIO_TogglePins</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, hc32f4a0_gpio.o(i.GPIO_TogglePins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_TogglePins
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedToggle
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_WDG
</UL>

<P><STRONG><a name="[3c9]"></a>GlobalProtectDatInit</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, app_func_eeprom.o(i.GlobalProtectDatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GlobalProtectDatInit &rArr; Tier2ToTier1
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tier2ToTier1
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDatInit
</UL>

<P><STRONG><a name="[446]"></a>GlobalProtectInqAnalysis</STRONG> (Thumb, 520 bytes, Stack size 48 bytes, app_task_protocol.o(i.GlobalProtectInqAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GlobalProtectInqAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[445]"></a>GlobalProtectSetAnalysis</STRONG> (Thumb, 736 bytes, Stack size 76 bytes, app_task_protocol.o(i.GlobalProtectSetAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GlobalProtectSetAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[34d]"></a>GlobleProtectRunParmCheck</STRONG> (Thumb, 836 bytes, Stack size 0 bytes, app_task_protection.o(i.GlobleProtectRunParmCheck))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit1_OvfIrqCallback
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmQuarry
</UL>

<P><STRONG><a name="[42f]"></a>HAL_DBGCmdProcess</STRONG> (Thumb, 1868 bytes, Stack size 96 bytes, bsp_debug.o(i.HAL_DBGCmdProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_DBGCmdProcess &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC_USART_RxIrq_Callback
</UL>

<P><STRONG><a name="[b8]"></a>HC_USART3_RxErr_IrqCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_debug.o(i.HC_USART3_RxErr_IrqCallback))
<BR>[Address Reference Count : 1]<UL><LI> bsp_debug.o(i.bsp_InitUSART)
</UL>
<P><STRONG><a name="[b7]"></a>HC_USART_RxIrq_Callback</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_debug.o(i.HC_USART_RxIrq_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HC_USART_RxIrq_Callback &rArr; HAL_DBGCmdProcess &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGCmdProcess
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGRS232_RxHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_debug.o(i.bsp_InitUSART)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[14f]"></a>HardFault_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.HardFault_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[150]"></a>I2C_1_Err_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_1_Err_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[151]"></a>I2C_1_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_1_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[152]"></a>I2C_1_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_1_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[153]"></a>I2C_1_TxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_1_TxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[154]"></a>I2C_2_Err_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_2_Err_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[155]"></a>I2C_2_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_2_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[156]"></a>I2C_2_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_2_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[157]"></a>I2C_2_TxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_2_TxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[158]"></a>I2C_3_Err_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_3_Err_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[159]"></a>I2C_3_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_3_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[15a]"></a>I2C_3_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_3_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[15b]"></a>I2C_3_TxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_3_TxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[15c]"></a>I2C_4_Err_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_4_Err_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[15d]"></a>I2C_4_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_4_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[15e]"></a>I2C_4_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_4_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[15f]"></a>I2C_4_TxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_4_TxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[160]"></a>I2C_5_Err_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_5_Err_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[161]"></a>I2C_5_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_5_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[162]"></a>I2C_5_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_5_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[163]"></a>I2C_5_TxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_5_TxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[164]"></a>I2C_6_Err_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_6_Err_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[165]"></a>I2C_6_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_6_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[166]"></a>I2C_6_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_6_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[167]"></a>I2C_6_TxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2C_6_TxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[168]"></a>I2S_1_Err_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2S_1_Err_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[169]"></a>I2S_1_Rx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2S_1_Rx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[16a]"></a>I2S_1_Tx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2S_1_Tx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[16b]"></a>I2S_2_Err_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2S_2_Err_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[16c]"></a>I2S_2_Rx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2S_2_Rx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[16d]"></a>I2S_2_Tx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2S_2_Tx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[16e]"></a>I2S_3_Err_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2S_3_Err_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[16f]"></a>I2S_3_Rx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2S_3_Rx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[170]"></a>I2S_3_Tx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2S_3_Tx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[171]"></a>I2S_4_Err_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2S_4_Err_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[172]"></a>I2S_4_Rx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2S_4_Rx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[173]"></a>I2S_4_Tx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.I2S_4_Tx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[300]"></a>INTC_IrqSignIn</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, hc32f4a0_interrupts.o(i.INTC_IrqSignIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = INTC_IrqSignIn
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDmaIrqConfig
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_EXINT_Init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_EXINT_Init
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1IrqConfig
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUSART
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint3_IrqConfig
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint2_IrqConfig
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint1_IrqConfig
</UL>

<P><STRONG><a name="[363]"></a>IP_Scanning</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, bsp_gpio.o(i.IP_Scanning))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IP_Scanning &rArr; bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitW5500
</UL>

<P><STRONG><a name="[13]"></a>IRQ000_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ000_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ001_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ001_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ002_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ002_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ003_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ003_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ004_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ004_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ004_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ005_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ005_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ006_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ007_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ008_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ008_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ009_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ009_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ010_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ010_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ011_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ011_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ012_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ013_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ013_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ014_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ014_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ015_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ015_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ016_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ016_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ017_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ017_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ018_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ019_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ020_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ021_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ022_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ022_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ023_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ024_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ025_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ025_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ026_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRQ027_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ028_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ029_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ029_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ030_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ030_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ031_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ032_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ032_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ032_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ033_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ033_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ033_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ034_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ034_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ034_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ035_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ035_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ035_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ036_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ036_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ036_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ037_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ037_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ037_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ038_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ038_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ038_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>IRQ039_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ039_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ039_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>IRQ040_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ040_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ040_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IRQ041_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ041_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ041_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ042_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ042_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ042_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ043_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ043_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ043_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ044_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ044_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ044_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ045_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ045_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ045_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ046_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ046_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ046_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>IRQ047_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ047_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ047_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IRQ048_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ048_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ048_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>IRQ049_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ049_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ049_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>IRQ050_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ050_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ050_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>IRQ051_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ051_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ051_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>IRQ052_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ052_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ052_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IRQ053_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ053_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ053_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>IRQ054_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ054_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ054_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>IRQ055_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ055_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ055_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>IRQ056_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ056_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ056_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>IRQ057_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ057_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ057_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IRQ058_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ058_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ058_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>IRQ059_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ059_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ059_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IRQ060_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ060_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ060_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ061_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ061_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ061_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ062_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ062_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ062_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ063_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ063_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ063_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ064_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ064_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ064_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ065_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ065_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ065_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ066_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ066_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ066_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ067_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ067_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ067_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ068_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ068_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ068_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ069_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ069_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ069_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ070_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ070_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ070_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ071_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ071_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ071_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ072_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ072_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ072_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ073_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ073_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ073_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ074_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ074_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ074_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ075_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ075_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ075_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ076_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ076_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ076_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ077_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ077_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ077_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ078_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ078_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ078_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ079_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ079_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ079_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ080_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ080_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ080_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ081_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ081_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ081_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ082_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ082_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ082_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ083_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ083_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ083_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ084_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ084_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ084_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ085_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ085_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ085_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ086_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ086_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ086_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ087_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ087_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ087_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ088_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ088_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ088_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ089_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ089_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ089_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ090_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ090_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ090_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ091_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ091_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ091_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IRQ092_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ092_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ092_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>IRQ093_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ093_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ093_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IRQ094_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ094_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ094_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IRQ095_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ095_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ095_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>IRQ096_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ096_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ096_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IRQ097_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ097_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ097_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>IRQ098_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ098_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ098_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>IRQ099_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ099_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ099_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>IRQ100_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ100_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ100_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>IRQ101_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ101_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ101_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>IRQ102_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ102_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ102_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>IRQ103_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ103_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ103_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>IRQ104_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ104_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ104_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>IRQ105_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ105_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ105_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>IRQ106_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ106_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ106_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>IRQ107_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ107_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ107_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>IRQ108_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ108_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ108_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>IRQ109_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ109_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ109_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>IRQ110_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ110_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ110_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>IRQ111_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ111_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ111_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>IRQ112_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ112_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ112_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>IRQ113_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ113_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ113_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>IRQ114_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ114_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ114_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>IRQ115_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ115_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ115_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>IRQ116_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ116_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ116_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>IRQ117_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ117_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ117_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>IRQ118_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ118_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ118_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>IRQ119_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ119_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ119_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>IRQ120_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ120_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ120_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>IRQ121_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ121_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ121_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>IRQ122_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ122_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ122_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>IRQ123_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ123_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ123_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IRQ124_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ124_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ124_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>IRQ125_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ125_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ125_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>IRQ126_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ126_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ126_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>IRQ127_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ127_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ127_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>IRQ128_Handler</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ128_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ128_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_15_IrqHandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_14_IrqHandler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_13_IrqHandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_12_IrqHandler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_11_IrqHandler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_10_IrqHandler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_09_IrqHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_08_IrqHandler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_07_IrqHandler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_06_IrqHandler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_05_IrqHandler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_04_IrqHandler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_03_IrqHandler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_02_IrqHandler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_01_IrqHandler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_00_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>IRQ129_Handler</STRONG> (Thumb, 1244 bytes, Stack size 16 bytes, hc32f4a0_interrupts.o(i.IRQ129_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ129_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Err_IrqHandler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_PgmEraseErr_IrqHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_OpEnd_IrqHandler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ColErr_IrqHandler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Tc7_IrqHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Tc6_IrqHandler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Tc5_IrqHandler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Tc4_IrqHandler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Tc3_IrqHandler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Tc2_IrqHandler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Tc1_IrqHandler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Tc0_IrqHandler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Err7_IrqHandler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Err6_IrqHandler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Err5_IrqHandler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Err4_IrqHandler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Err3_IrqHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Err2_IrqHandler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Err1_IrqHandler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Err0_IrqHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Btc7_IrqHandler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Btc6_IrqHandler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Btc5_IrqHandler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Btc4_IrqHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Btc3_IrqHandler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Btc2_IrqHandler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Btc1_IrqHandler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_1_Btc0_IrqHandler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU_8_IrqHandler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU_7_IrqHandler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU_6_IrqHandler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU_5_IrqHandler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU_4_IrqHandler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU_3_IrqHandler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU_2_IrqHandler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU_1_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>IRQ130_Handler</STRONG> (Thumb, 1180 bytes, Stack size 16 bytes, hc32f4a0_interrupts.o(i.IRQ130_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ130_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAU_Sqrt_IrqHandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMAC_4_IrqHandler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMAC_3_IrqHandler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMAC_2_IrqHandler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMAC_1_IrqHandler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVP_SwSyncErr_IrqHandler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVP_LineStart_IrqHandler
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVP_LineEnd_IrqHandler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVP_FrameStart_IrqHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVP_FrameEnd_IrqHandler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVP_FifoErr_IrqHandler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Tc7_IrqHandler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Tc6_IrqHandler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Tc5_IrqHandler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Tc4_IrqHandler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Tc3_IrqHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Tc2_IrqHandler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Tc1_IrqHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Tc0_IrqHandler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Err7_IrqHandler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Err6_IrqHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Err5_IrqHandler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Err4_IrqHandler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Err3_IrqHandler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Err2_IrqHandler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Err1_IrqHandler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Err0_IrqHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Btc7_IrqHandler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Btc6_IrqHandler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Btc5_IrqHandler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Btc4_IrqHandler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Btc3_IrqHandler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Btc2_IrqHandler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Btc1_IrqHandler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_2_Btc0_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>IRQ131_Handler</STRONG> (Thumb, 784 bytes, Stack size 16 bytes, hc32f4a0_interrupts.o(i.IRQ131_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ131_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_4_OvfB_IrqHandler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_4_OvfA_IrqHandler
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_4_CmpB_IrqHandler
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_4_CmpA_IrqHandler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_3_OvfB_IrqHandler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_3_OvfA_IrqHandler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_3_CmpB_IrqHandler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_3_CmpA_IrqHandler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_2_OvfB_IrqHandler
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_2_OvfA_IrqHandler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_2_CmpB_IrqHandler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_2_CmpA_IrqHandler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_1_OvfB_IrqHandler
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_1_OvfA_IrqHandler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_1_CmpB_IrqHandler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_1_CmpA_IrqHandler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_2_CmpB_IrqHandler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_2_CmpA_IrqHandler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_1_CmpB_IrqHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_1_CmpA_IrqHandler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWDT_IrqHandler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeStamp1_IrqHandler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeStamp0_IrqHandler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Period_IrqHandler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IrqHandler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_WakeupTimer_IrqHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalStop_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>IRQ132_Handler</STRONG> (Thumb, 892 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ132_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ132_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GUdf_IrqHandler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GOvf_IrqHandler
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GCmpF_IrqHandler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GCmpE_IrqHandler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GCmpD_IrqHandler
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GCmpC_IrqHandler
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GCmpB_IrqHandler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GCmpA_IrqHandler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GUdf_IrqHandler
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GOvf_IrqHandler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GCmpF_IrqHandler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GCmpE_IrqHandler
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GCmpD_IrqHandler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GCmpC_IrqHandler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GCmpB_IrqHandler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GCmpA_IrqHandler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_Udf_IrqHandler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_Ovf_IrqHandler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_GCmpWL_IrqHandler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_GCmpWH_IrqHandler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_GCmpVL_IrqHandler
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_GCmpVH_IrqHandler
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_GCmpUL_IrqHandler
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_GCmpUH_IrqHandler
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_Udf_IrqHandler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_Ovf_IrqHandler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GCmpWL_IrqHandler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GCmpWH_IrqHandler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GCmpVL_IrqHandler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GCmpVH_IrqHandler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GCmpUL_IrqHandler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GCmpUH_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>IRQ133_Handler</STRONG> (Thumb, 854 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ133_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ133_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GUdf_IrqHandler
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GOvf_IrqHandler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GCmpF_IrqHandler
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GCmpE_IrqHandler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GCmpD_IrqHandler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GCmpC_IrqHandler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GCmpB_IrqHandler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GCmpA_IrqHandler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_SCmpUpB_IrqHandler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_SCmpUpA_IrqHandler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_SCmpDownB_IrqHandler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_SCmpDownA_IrqHandler
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_Gdte_IrqHandler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_SCmpUpB_IrqHandler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_SCmpUpA_IrqHandler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_SCmpDownB_IrqHandler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_SCmpDownA_IrqHandler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_Gdte_IrqHandler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_Udf_IrqHandler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_Ovf_IrqHandler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GCmpWL_IrqHandler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GCmpWH_IrqHandler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GCmpVL_IrqHandler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GCmpVH_IrqHandler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GCmpUL_IrqHandler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GCmpUH_IrqHandler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_ReloadW_IrqHandler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_ReloadV_IrqHandler
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_ReloadU_IrqHandler
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_ReloadW_IrqHandler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_ReloadV_IrqHandler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_ReloadU_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>IRQ134_Handler</STRONG> (Thumb, 548 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ134_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ134_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_SCmpUpB_IrqHandler
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_SCmpUpA_IrqHandler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_SCmpDownB_IrqHandler
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_SCmpDownA_IrqHandler
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_Gdte_IrqHandler
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_GUdf_IrqHandler
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_GOvf_IrqHandler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_GCmpF_IrqHandler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_GCmpE_IrqHandler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_GCmpD_IrqHandler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_GCmpC_IrqHandler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_GCmpB_IrqHandler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_GCmpA_IrqHandler
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_SCmpUpB_IrqHandler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_SCmpUpA_IrqHandler
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_SCmpDownB_IrqHandler
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_SCmpDownA_IrqHandler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_Gdte_IrqHandler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_ReloadW_IrqHandler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_ReloadV_IrqHandler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_ReloadU_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>IRQ135_Handler</STRONG> (Thumb, 1040 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ135_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ135_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_2_Udf_IrqHandler
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_2_Ovf_IrqHandler
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_2_Cmp4_IrqHandler
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_2_Cmp3_IrqHandler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_2_Cmp2_IrqHandler
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_2_Cmp1_IrqHandler
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_1_Udf_IrqHandler
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_1_Ovf_IrqHandler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_1_Cmp4_IrqHandler
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_1_Cmp3_IrqHandler
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_1_Cmp2_IrqHandler
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_1_Cmp1_IrqHandler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_SCmpUpB_IrqHandler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_SCmpUpA_IrqHandler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_SCmpDownB_IrqHandler
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_SCmpDownA_IrqHandler
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_Gdte_IrqHandler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_GUdf_IrqHandler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_GOvf_IrqHandler
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_GCmpF_IrqHandler
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_GCmpE_IrqHandler
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_GCmpD_IrqHandler
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_GCmpC_IrqHandler
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_GCmpB_IrqHandler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_GCmpA_IrqHandler
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_SCmpUpB_IrqHandler
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_SCmpUpA_IrqHandler
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_SCmpDownB_IrqHandler
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_SCmpDownA_IrqHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_Gdte_IrqHandler
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_GUdf_IrqHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_GOvf_IrqHandler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_GCmpF_IrqHandler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_GCmpE_IrqHandler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_GCmpD_IrqHandler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_GCmpC_IrqHandler
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_GCmpB_IrqHandler
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_GCmpA_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>IRQ136_Handler</STRONG> (Thumb, 1040 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.IRQ136_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ136_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_4_Udf_IrqHandler
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_4_Ovf_IrqHandler
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_4_Cmp4_IrqHandler
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_4_Cmp3_IrqHandler
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_4_Cmp2_IrqHandler
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_4_Cmp1_IrqHandler
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_3_Udf_IrqHandler
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_3_Ovf_IrqHandler
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_3_Cmp4_IrqHandler
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_3_Cmp3_IrqHandler
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_3_Cmp2_IrqHandler
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_3_Cmp1_IrqHandler
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_SCmpUpB_IrqHandler
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_SCmpUpA_IrqHandler
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_SCmpDownB_IrqHandler
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_SCmpDownA_IrqHandler
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_Gdte_IrqHandler
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_GUdf_IrqHandler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_GOvf_IrqHandler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_GCmpF_IrqHandler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_GCmpE_IrqHandler
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_GCmpD_IrqHandler
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_GCmpC_IrqHandler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_GCmpB_IrqHandler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_GCmpA_IrqHandler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_SCmpUpB_IrqHandler
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_SCmpUpA_IrqHandler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_SCmpDownB_IrqHandler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_SCmpDownA_IrqHandler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_Gdte_IrqHandler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_GUdf_IrqHandler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_GOvf_IrqHandler
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_GCmpF_IrqHandler
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_GCmpE_IrqHandler
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_GCmpD_IrqHandler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_GCmpC_IrqHandler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_GCmpB_IrqHandler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_GCmpA_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>IRQ137_Handler</STRONG> (Thumb, 774 bytes, Stack size 16 bytes, hc32f4a0_interrupts.o(i.IRQ137_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ137_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_2_TxEnd_IrqHandler
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_2_TxEmpty_IrqHandler
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_2_RxTO_IrqHandler
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_2_RxErr_IrqHandler
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_2_RxEnd_IrqHandler
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_1_TxEnd_IrqHandler
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_1_TxEmpty_IrqHandler
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_1_RxTO_IrqHandler
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_1_RxErr_IrqHandler
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_1_RxEnd_IrqHandler
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2_TxEmpty_IrqHandler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2_RxEnd_IrqHandler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2_Idle_IrqHandler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2_Err_IrqHandler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1_TxEmpty_IrqHandler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1_RxEnd_IrqHandler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1_Idle_IrqHandler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1_Err_IrqHandler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMB_GR6_IrqHandler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMB_GR5_IrqHandler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMB_GR4_IrqHandler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMB_GR3_IrqHandler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMB_GR2_IrqHandler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMB_GR1_IrqHandler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMB_GR0_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>IRQ138_Handler</STRONG> (Thumb, 1392 bytes, Stack size 32 bytes, hc32f4a0_interrupts.o(i.IRQ138_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IRQ138_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_4_TxEnd_IrqHandler
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_4_TxEmpty_IrqHandler
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_4_RxErr_IrqHandler
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_4_RxEnd_IrqHandler
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_3_TxEnd_IrqHandler
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_3_TxEmpty_IrqHandler
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_3_RxErr_IrqHandler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_3_RxEnd_IrqHandler
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_8_Udf_IrqHandler
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_8_Ovf_IrqHandler
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_8_Cmp4_IrqHandler
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_8_Cmp3_IrqHandler
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_8_Cmp2_IrqHandler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_8_Cmp1_IrqHandler
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_7_Udf_IrqHandler
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_7_Ovf_IrqHandler
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_7_Cmp4_IrqHandler
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_7_Cmp3_IrqHandler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_7_Cmp2_IrqHandler
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_7_Cmp1_IrqHandler
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_6_Udf_IrqHandler
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_6_Ovf_IrqHandler
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_6_Cmp4_IrqHandler
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_6_Cmp3_IrqHandler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_6_Cmp2_IrqHandler
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_6_Cmp1_IrqHandler
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_5_Udf_IrqHandler
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_5_Ovf_IrqHandler
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_5_Cmp4_IrqHandler
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_5_Cmp3_IrqHandler
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_5_Cmp2_IrqHandler
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_5_Cmp1_IrqHandler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_4_TxEmpty_IrqHandler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_4_RxEnd_IrqHandler
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_4_Idle_IrqHandler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_4_Err_IrqHandler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_3_TxEmpty_IrqHandler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_3_RxEnd_IrqHandler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_3_Idle_IrqHandler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_3_Err_IrqHandler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_2_IrqHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_1_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>IRQ139_Handler</STRONG> (Thumb, 1240 bytes, Stack size 16 bytes, hc32f4a0_interrupts.o(i.IRQ139_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ139_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_6_TxEnd_IrqHandler
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_6_TxEmpty_IrqHandler
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_6_RxTO_IrqHandler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_6_RxErr_IrqHandler
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_6_RxEnd_IrqHandler
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_5_TxEnd_IrqHandler
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_5_TxEmpty_IrqHandler
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_5_RxErr_IrqHandler
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_5_RxEnd_IrqHandler
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_5_LinWakeup_IrqHandler
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_5_LinBreakField_IrqHandler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_9_Udf_IrqHandler
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_9_Ovf_IrqHandler
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_9_Cmp4_IrqHandler
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_9_Cmp3_IrqHandler
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_9_Cmp2_IrqHandler
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_9_Cmp1_IrqHandler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_12_Udf_IrqHandler
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_12_Ovf_IrqHandler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_12_Cmp4_IrqHandler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_12_Cmp3_IrqHandler
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_12_Cmp2_IrqHandler
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_12_Cmp1_IrqHandler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_11_Udf_IrqHandler
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_11_Ovf_IrqHandler
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_11_Cmp4_IrqHandler
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_11_Cmp3_IrqHandler
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_11_Cmp2_IrqHandler
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_11_Cmp1_IrqHandler
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_10_Udf_IrqHandler
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_10_Ovf_IrqHandler
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_10_Cmp4_IrqHandler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_10_Cmp3_IrqHandler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_10_Cmp2_IrqHandler
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_10_Cmp1_IrqHandler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_6_TxEmpty_IrqHandler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_6_RxEnd_IrqHandler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_6_Idle_IrqHandler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_6_Err_IrqHandler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_5_TxEmpty_IrqHandler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_5_RxEnd_IrqHandler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_5_Idle_IrqHandler
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_5_Err_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>IRQ140_Handler</STRONG> (Thumb, 802 bytes, Stack size 72 bytes, hc32f4a0_interrupts.o(i.IRQ140_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IRQ140_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_Global_IrqHandler
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_8_TxEnd_IrqHandler
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_8_TxEmpty_IrqHandler
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_8_RxErr_IrqHandler
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_8_RxEnd_IrqHandler
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_7_TxEnd_IrqHandler
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_7_TxEmpty_IrqHandler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_7_RxTO_IrqHandler
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_7_RxErr_IrqHandler
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_7_RxEnd_IrqHandler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_2_Normal_IrqHandler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_2_Error_IrqHandler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_1_Normal_IrqHandler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_1_Error_IrqHandler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_2_Tx_IrqHandler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_2_Rx_IrqHandler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_2_Err_IrqHandler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_1_Tx_IrqHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_1_Rx_IrqHandler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_1_Err_IrqHandler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Wakeup_IrqHandler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Global_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>IRQ141_Handler</STRONG> (Thumb, 800 bytes, Stack size 16 bytes, hc32f4a0_interrupts.o(i.IRQ141_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ141_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_9_TxEnd_IrqHandler
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_9_TxEmpty_IrqHandler
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_9_RxErr_IrqHandler
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_9_RxEnd_IrqHandler
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_10_TxEnd_IrqHandler
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_10_TxEmpty_IrqHandler
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_10_RxErr_IrqHandler
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_10_RxEnd_IrqHandler
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_10_LinWakeup_IrqHandler
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_10_LinBreakField_IrqHandler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_4_Tx_IrqHandler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_4_Rx_IrqHandler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_4_Err_IrqHandler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_3_Tx_IrqHandler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_3_Rx_IrqHandler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_3_Err_IrqHandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_3_TxEnd_IrqHandler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_3_TxEmpty_IrqHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_3_RxEnd_IrqHandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_3_Err_IrqHandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_2_TxEnd_IrqHandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_2_TxEmpty_IrqHandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_2_RxEnd_IrqHandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_2_Err_IrqHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_1_TxEnd_IrqHandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_1_TxEmpty_IrqHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_1_RxEnd_IrqHandler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_1_Err_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>IRQ142_Handler</STRONG> (Thumb, 592 bytes, Stack size 16 bytes, hc32f4a0_interrupts.o(i.IRQ142_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ142_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IrqHandler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Pvd2_IrqHandler
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Pvd1_IrqHandler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_6_TxEnd_IrqHandler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_6_TxEmpty_IrqHandler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_6_RxEnd_IrqHandler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_6_Err_IrqHandler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_5_TxEnd_IrqHandler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_5_TxEmpty_IrqHandler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_5_RxEnd_IrqHandler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_5_Err_IrqHandler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_4_TxEnd_IrqHandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_4_TxEmpty_IrqHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_4_RxEnd_IrqHandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_4_Err_IrqHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_Ovf_IrqHandler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_Err_IrqHandler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_End_IrqHandler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTC_Udf_IrqHandler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTC_Ovf_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>IRQ143_Handler</STRONG> (Thumb, 484 bytes, Stack size 16 bytes, hc32f4a0_interrupts.o(i.IRQ143_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ143_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_IrqHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_3_SeqB_IrqHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_3_SeqA_IrqHandler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_3_Cmp1Ind_IrqHandler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_3_Cmp1Comb_IrqHandler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_3_Cmp0_IrqHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_2_SeqB_IrqHandler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_2_SeqA_IrqHandler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_2_Cmp1Ind_IrqHandler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_2_Cmp1Comb_IrqHandler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_2_Cmp0_IrqHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_1_SeqB_IrqHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_1_SeqA_IrqHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_1_Cmp1Ind_IrqHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_1_Cmp1Comb_IrqHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_1_Cmp0_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[4bf]"></a>InitRingBuffer</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ringbuffer.o(i.InitRingBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitW5500
</UL>

<P><STRONG><a name="[36c]"></a>IntelProtectDeviceCheck</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, app_task_protection.o(i.IntelProtectDeviceCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = IntelProtectDeviceCheck &rArr; ACDC_Fan_Speed51_ModeTest &rArr; CANx_SendData &rArr; CAN_TransData &rArr; CAN_GetStatusVal
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDC_Fan_Speed51_ModeTest
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytesWithCheck
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[34c]"></a>IntelProtectRunParmCheck</STRONG> (Thumb, 2496 bytes, Stack size 32 bytes, app_task_protection.o(i.IntelProtectRunParmCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IntelProtectRunParmCheck &rArr; __hardfp_fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit1_OvfIrqCallback
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmQuarry
</UL>

<P><STRONG><a name="[3ca]"></a>InternalProtectDatInit</STRONG> (Thumb, 590 bytes, Stack size 16 bytes, app_func_eeprom.o(i.InternalProtectDatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InternalProtectDatInit &rArr; Tier2ToTier1
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tier2ToTier1
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDatInit
</UL>

<P><STRONG><a name="[447]"></a>InternalProtectInqAnalysis</STRONG> (Thumb, 512 bytes, Stack size 48 bytes, app_task_protocol.o(i.InternalProtectInqAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InternalProtectInqAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[436]"></a>InternalProtectSetAnalysis</STRONG> (Thumb, 714 bytes, Stack size 80 bytes, app_task_protocol.o(i.InternalProtectSetAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = InternalProtectSetAnalysis &rArr; EepDatSync &rArr; ee_WriteBytesWithCheck &rArr; ee_ReadBytes &rArr; osKernelRestoreLock &rArr; EvrRtxKernelRestoreLock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepDatSync
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[4be]"></a>Lan_cfg</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, bsp_lan.o(i.Lan_cfg))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitW5500
</UL>

<P><STRONG><a name="[437]"></a>Led_Shine_Ctrl</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, bsp_led.o(i.Led_Shine_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Led_Shine_Ctrl &rArr; bsp_LedOn &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOn
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedStaExecute
</UL>

<P><STRONG><a name="[174]"></a>MAU_Sqrt_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.MAU_Sqrt_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[36f]"></a>MB85Ctrl_Read</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bsp_mb85rs2.o(i.MB85Ctrl_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MB85Ctrl_Read &rArr; SPI_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Set_Vector
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInqAnalysis
</UL>

<P><STRONG><a name="[435]"></a>MB85Ctrl_ReadID</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bsp_mb85rs2.o(i.MB85Ctrl_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MB85Ctrl_ReadID &rArr; SPI_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntelProtectDeviceCheck
</UL>

<P><STRONG><a name="[353]"></a>MB85Ctrl_Write</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, bsp_mb85rs2.o(i.MB85Ctrl_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MB85Ctrl_Write &rArr; SPI_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Set_Vector
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDebug
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit3_OvfIrqCallback
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetAnalysis
</UL>

<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemManage_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[175]"></a>MemManage_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.MemManage_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[176]"></a>NFC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.NFC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NMI_Handler &rArr; NMI_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>NMI_IrqHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.NMI_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMI_IrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[508]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[513]"></a>OS_Tick_Enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[512]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[511]"></a>OS_Tick_Setup</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, os_systick.o(i.OS_Tick_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_Tick_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[332]"></a>PWC_Fcg0PeriphClockCmd</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, hc32f4a0_pwc.o(i.PWC_Fcg0PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWC_Fcg0PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDmaConfig
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRNG
</UL>

<P><STRONG><a name="[311]"></a>PWC_Fcg1PeriphClockCmd</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hc32f4a0_pwc.o(i.PWC_Fcg1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWC_Fcg1PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_SpiInit
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_SpiInit
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Config
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_SpiInit
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_MB85R_SpiInit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC2_SpiInit
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_SpiInit
</UL>

<P><STRONG><a name="[43e]"></a>PWC_Fcg2PeriphClockCmd</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hc32f4a0_pwc.o(i.PWC_Fcg2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWC_Fcg2PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint3_Config
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint2_Config
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint1_Config
</UL>

<P><STRONG><a name="[33e]"></a>PWC_Fcg3PeriphClockCmd</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hc32f4a0_pwc.o(i.PWC_Fcg3PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWC_Fcg3PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInitConfig
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUSART
</UL>

<P><STRONG><a name="[177]"></a>PWC_Pvd1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.PWC_Pvd1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[178]"></a>PWC_Pvd2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.PWC_Pvd2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[43f]"></a>PWC_VBAT_Reset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hc32f4a0_pwc.o(i.PWC_VBAT_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWC_VBAT_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[179]"></a>PWC_WakeupTimer_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.PWC_WakeupTimer_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[17a]"></a>PendSV_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.PendSV_IrqHandler), UNUSED, KEPT)

<P><STRONG><a name="[35d]"></a>Protect_Action_Func</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, app_task_workstep.o(i.Protect_Action_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Protect_Action_Func &rArr; WorkstepProtUpcast &rArr; W5500_send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingStop
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepProtUpcast
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskProtection
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_BitAction_Func
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Protect_Func
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Abort_Func
</UL>

<P><STRONG><a name="[34f]"></a>Protect_BitAction_Func</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, app_task_workstep.o(i.Protect_BitAction_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Protect_BitAction_Func &rArr; Protect_Action_Func &rArr; WorkstepProtUpcast &rArr; W5500_send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Action_Func
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppACDC_alarm
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmQuarry
</UL>

<P><STRONG><a name="[375]"></a>Protect_Trigger_Judgemet</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, app_task_ageing.o(i.Protect_Trigger_Judgemet))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Protect_Trigger_Judgemet &rArr; Chg_Dis_Off_Cfg &rArr; DAC_SetLinearData &rArr; DAC80508_ReadDacData &rArr; DAC80508_ReadCmd &rArr; SPI5_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_send
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_sync_func
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Off_Cfg
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[360]"></a>ProtocolDataProcess</STRONG> (Thumb, 604 bytes, Stack size 24 bytes, app_task_protocol.o(i.ProtocolDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = ProtocolDataProcess &rArr; SystemUpdateAnalysis &rArr; osTimerStop &rArr; EvrRtxTimerError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepSetAnalysis
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepRunstaSetAnalysis
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepInqAnalysis
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetAnalysis
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInqAnalysis
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordInqAnalysis
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalProtectSetAnalysis
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalProtectInqAnalysis
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalProtectSetAnalysis
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalProtectInqAnalysis
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultAnalyze
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugSystemSetAnalysis
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugParamSetAnalysis
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugDataInqAnalysis
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateSetAnalysis
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateInqAnalysis
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdDataInqAnalysis
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDCUpdateAnalysis
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPack
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvUnpack
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskProtocol
</UL>

<P><STRONG><a name="[17b]"></a>QSPI_Err_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.QSPI_Err_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[364]"></a>RNG_Get_RandomRange</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_rng.o(i.RNG_Get_RandomRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RNG_Get_RandomRange &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Generate
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[17c]"></a>RTC_Alarm_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.RTC_Alarm_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[17d]"></a>RTC_Period_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.RTC_Period_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[17e]"></a>RTC_TimeStamp0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.RTC_TimeStamp0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[17f]"></a>RTC_TimeStamp1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.RTC_TimeStamp1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[35e]"></a>ReadRingBuffer</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ringbuffer.o(i.ReadRingBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadRingBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskProtocol
</UL>

<P><STRONG><a name="[454]"></a>RecordDatSync</STRONG> (Thumb, 1632 bytes, Stack size 12 bytes, app_task_protocol.o(i.RecordDatSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RecordDatSync
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordDatUpcast
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordInqAnalysis
</UL>

<P><STRONG><a name="[453]"></a>RecordDatUpcast</STRONG> (Thumb, 326 bytes, Stack size 304 bytes, app_task_protocol.o(i.RecordDatUpcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = RecordDatUpcast &rArr; CRC16N &rArr; CRC16_2
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Data_To_Buffer
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordDatSync
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16N
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit3_OvfIrqCallback
</UL>

<P><STRONG><a name="[448]"></a>RecordInqAnalysis</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, app_task_protocol.o(i.RecordInqAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RecordInqAnalysis &rArr; RecordDatSync
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordDatSync
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[455]"></a>Record_Data_To_Buffer</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, app_task_protocol.o(i.Record_Data_To_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Record_Data_To_Buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordDatUpcast
</UL>

<P><STRONG><a name="[36e]"></a>Record_Msg_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_task_protocol.o(i.Record_Msg_Init))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[2]"></a>RunPer1000ms</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, app_timer_periodic_adc3.o(i.RunPer1000ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RunPer1000ms &rArr; ACDC_Fan_Speed_CMD &rArr; CANx_SendData &rArr; CAN_TransData &rArr; CAN_GetStatusVal
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDC_Fan_Speed_CMD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_systick.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>RunPer100ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_timer_periodic_adc3.o(i.RunPer100ms))
<BR>[Address Reference Count : 1]<UL><LI> bsp_systick.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>RunPer10ms</STRONG> (Thumb, 2070 bytes, Stack size 48 bytes, app_timer_periodic_adc3.o(i.RunPer10ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = RunPer10ms &rArr; BatteryFormattingStop &rArr; CurLinearOutputSetting &rArr; DAC80508_ReadDacData &rArr; DAC80508_ReadCmd &rArr; SPI5_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingStop
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxRecordDatSync
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Value_Soft_Process
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_systick.o(.data)
</UL>
<P><STRONG><a name="[180]"></a>SDIOC_1_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SDIOC_1_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[181]"></a>SDIOC_1_Normal_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SDIOC_1_Normal_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[182]"></a>SDIOC_2_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SDIOC_2_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[183]"></a>SDIOC_2_Normal_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SDIOC_2_Normal_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[184]"></a>SPI_1_Err_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_1_Err_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[185]"></a>SPI_1_Idle_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_1_Idle_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[186]"></a>SPI_1_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_1_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[187]"></a>SPI_1_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_1_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[188]"></a>SPI_2_Err_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_2_Err_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[189]"></a>SPI_2_Idle_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_2_Idle_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[18a]"></a>SPI_2_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_2_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[18b]"></a>SPI_2_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_2_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[18c]"></a>SPI_3_Err_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_3_Err_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[18d]"></a>SPI_3_Idle_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_3_Idle_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[18e]"></a>SPI_3_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_3_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[18f]"></a>SPI_3_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_3_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[190]"></a>SPI_4_Err_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_4_Err_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[191]"></a>SPI_4_Idle_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_4_Idle_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[192]"></a>SPI_4_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_4_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[193]"></a>SPI_4_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_4_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[194]"></a>SPI_5_Err_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_5_Err_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[195]"></a>SPI_5_Idle_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_5_Idle_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[196]"></a>SPI_5_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_5_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[197]"></a>SPI_5_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_5_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[198]"></a>SPI_6_Err_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_6_Err_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[199]"></a>SPI_6_Idle_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_6_Idle_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[19a]"></a>SPI_6_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_6_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[19b]"></a>SPI_6_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SPI_6_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[313]"></a>SPI_DeInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hc32f4a0_spi.o(i.SPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_DeInit &rArr; SPI_FunctionCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FunctionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_SpiInit
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_SpiInit
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_SpiInit
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_MB85R_SpiInit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC2_SpiInit
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_SpiInit
</UL>

<P><STRONG><a name="[457]"></a>SPI_FLASH_Write_Enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_flash.o(i.SPI_FLASH_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_FLASH_Write_Enable &rArr; SPI_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
</UL>

<P><STRONG><a name="[459]"></a>SPI_Flash_Erase_Sector</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bsp_flash.o(i.SPI_Flash_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_Flash_Erase_Sector &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Wait_Busy
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
</UL>

<P><STRONG><a name="[45b]"></a>SPI_Flash_Read</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bsp_flash.o(i.SPI_Flash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_Flash_Read &rArr; SPI_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WriteWithCheck
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInqAnalysis
</UL>

<P><STRONG><a name="[45c]"></a>SPI_Flash_ReadSR</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_flash.o(i.SPI_Flash_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_Flash_ReadSR &rArr; SPI_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Wait_Busy
</UL>

<P><STRONG><a name="[45a]"></a>SPI_Flash_Wait_Busy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_flash.o(i.SPI_Flash_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
</UL>

<P><STRONG><a name="[45d]"></a>SPI_Flash_Write</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, bsp_flash.o(i.SPI_Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SPI_Flash_Write &rArr; SPI_Flash_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_NoCheck
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WriteWithCheck
</UL>

<P><STRONG><a name="[45f]"></a>SPI_Flash_WriteWithCheck</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bsp_flash.o(i.SPI_Flash_WriteWithCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SPI_Flash_WriteWithCheck &rArr; SPI_Flash_Write &rArr; SPI_Flash_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetAnalysis
</UL>

<P><STRONG><a name="[45e]"></a>SPI_Flash_Write_NoCheck</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bsp_flash.o(i.SPI_Flash_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI_Flash_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
</UL>

<P><STRONG><a name="[460]"></a>SPI_Flash_Write_Page</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bsp_flash.o(i.SPI_Flash_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Wait_Busy
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_NoCheck
</UL>

<P><STRONG><a name="[316]"></a>SPI_FunctionCmd</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, hc32f4a0_spi.o(i.SPI_FunctionCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_FunctionCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_SpiInit
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_SpiInit
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_SpiInit
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_MB85R_SpiInit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC2_SpiInit
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_SpiInit
</UL>

<P><STRONG><a name="[315]"></a>SPI_Init</STRONG> (Thumb, 634 bytes, Stack size 16 bytes, hc32f4a0_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_SpiInit
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_SpiInit
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_SpiInit
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_MB85R_SpiInit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC2_SpiInit
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_SpiInit
</UL>

<P><STRONG><a name="[314]"></a>SPI_StructInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hc32f4a0_spi.o(i.SPI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_SpiInit
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_SpiInit
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_SpiInit
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_MB85R_SpiInit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC2_SpiInit
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_SpiInit
</UL>

<P><STRONG><a name="[30b]"></a>SPI_TransmitReceive</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hc32f4a0_spi.o(i.SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_WriteReg
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_Reset
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_ReadReg
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7124_wait_to_power_on
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_WriteReg
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_Reset
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_ReadReg
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_ReadId
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI5_ReadWriteByte
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_ReadWriteByte
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_WriteCmd
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[462]"></a>SRAM_SetWaitCycle</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, hc32f4a0_sram.o(i.SRAM_SetWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SRAM_SetWaitCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[19c]"></a>SVC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SVC_IrqHandler), UNUSED, KEPT)

<P><STRONG><a name="[429]"></a>SWDT_Feed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f4a0_swdt.o(i.SWDT_Feed))
<BR><BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSWDT
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_WDG
</UL>

<P><STRONG><a name="[463]"></a>SWDT_Init</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, hc32f4a0_swdt.o(i.SWDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SWDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSWDT
</UL>

<P><STRONG><a name="[19d]"></a>SWDT_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.SWDT_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[352]"></a>SelfChecking</STRONG> (Thumb, 2202 bytes, Stack size 24 bytes, app_task_ageing.o(i.SelfChecking))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SelfChecking &rArr; Chg_Dis_On_Cfg &rArr; DAC_SetLinearData &rArr; DAC80508_ReadDacData &rArr; DAC80508_ReadCmd &rArr; SPI5_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Port_Cfg
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_send
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_On_Cfg
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Off_Cfg
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskAgeing
</UL>

<P><STRONG><a name="[2b8]"></a>SysTick_IrqHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_systick.o(i.SysTick_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_IrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit3_OvfIrqCallback
</UL>

<P><STRONG><a name="[2d9]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 190 bytes, Stack size 12 bytes, system_hc32f4a0sitb.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSrc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>SystemInit</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, system_hc32f4a0sitb.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(.text)
</UL>
<P><STRONG><a name="[44d]"></a>SystemInqAnalysis</STRONG> (Thumb, 888 bytes, Stack size 112 bytes, app_task_protocol.o(i.SystemInqAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SystemInqAnalysis &rArr; ACDC_FW_VERSION_CMD &rArr; CANx_SendData &rArr; CAN_TransData &rArr; CAN_GetStatusVal
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDC_FW_VERSION_CMD
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDC_ACV_Query_CMD
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Read
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[44e]"></a>SystemSetAnalysis</STRONG> (Thumb, 1806 bytes, Stack size 144 bytes, app_task_protocol.o(i.SystemSetAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SystemSetAnalysis &rArr; SPI_Flash_WriteWithCheck &rArr; SPI_Flash_Write &rArr; SPI_Flash_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Write
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;En_int
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_int
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WriteWithCheck
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytesWithCheck
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Port_Cfg
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[44f]"></a>SystemUpdateAnalysis</STRONG> (Thumb, 636 bytes, Stack size 1080 bytes, app_task_protocol.o(i.SystemUpdateAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = SystemUpdateAnalysis &rArr; osTimerStop &rArr; EvrRtxTimerError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SequenceProgram
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorCmd_Sequential
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FWMC_Unlock
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FWMC_Lock
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUintStop
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Write
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Read
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_send
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Update_Zone
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[46d]"></a>System_Init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, bsp.o(i.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = System_Init &rArr; bsp_Init &rArr; bsp_InitUSART &rArr; USART_UartInit &rArr; USART_SetBaudrate &rArr; CalcSmartcardBaudrate &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetReadWaitCycle
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_VBAT_Reset
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSWDT
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitDWT
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_HWDG_InitGPIO
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_MB85R_SpiInit
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUintStop
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Set_Vector
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peripheral_WP
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peripheral_WE
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_WDG
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[19e]"></a>TMR0_1_CmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR0_1_CmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[19f]"></a>TMR0_1_CmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR0_1_CmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1a0]"></a>TMR0_2_CmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR0_2_CmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1a1]"></a>TMR0_2_CmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR0_2_CmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1a2]"></a>TMR2_1_CmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR2_1_CmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1a3]"></a>TMR2_1_CmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR2_1_CmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1a4]"></a>TMR2_1_OvfA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR2_1_OvfA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1a5]"></a>TMR2_1_OvfB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR2_1_OvfB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1a6]"></a>TMR2_2_CmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR2_2_CmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1a7]"></a>TMR2_2_CmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR2_2_CmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1a8]"></a>TMR2_2_OvfA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR2_2_OvfA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1a9]"></a>TMR2_2_OvfB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR2_2_OvfB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1aa]"></a>TMR2_3_CmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR2_3_CmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1ab]"></a>TMR2_3_CmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR2_3_CmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1ac]"></a>TMR2_3_OvfA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR2_3_OvfA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1ad]"></a>TMR2_3_OvfB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR2_3_OvfB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1ae]"></a>TMR2_4_CmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR2_4_CmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1af]"></a>TMR2_4_CmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR2_4_CmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1b0]"></a>TMR2_4_OvfA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR2_4_OvfA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1b1]"></a>TMR2_4_OvfB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR2_4_OvfB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[1b2]"></a>TMR4_1_GCmpUH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_1_GCmpUH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1b3]"></a>TMR4_1_GCmpUL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_1_GCmpUL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1b4]"></a>TMR4_1_GCmpVH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_1_GCmpVH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1b5]"></a>TMR4_1_GCmpVL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_1_GCmpVL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1b6]"></a>TMR4_1_GCmpWH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_1_GCmpWH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1b7]"></a>TMR4_1_GCmpWL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_1_GCmpWL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1b8]"></a>TMR4_1_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_1_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1b9]"></a>TMR4_1_ReloadU_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_1_ReloadU_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1ba]"></a>TMR4_1_ReloadV_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_1_ReloadV_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1bb]"></a>TMR4_1_ReloadW_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_1_ReloadW_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1bc]"></a>TMR4_1_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_1_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1bd]"></a>TMR4_2_GCmpUH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_2_GCmpUH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1be]"></a>TMR4_2_GCmpUL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_2_GCmpUL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1bf]"></a>TMR4_2_GCmpVH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_2_GCmpVH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1c0]"></a>TMR4_2_GCmpVL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_2_GCmpVL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1c1]"></a>TMR4_2_GCmpWH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_2_GCmpWH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1c2]"></a>TMR4_2_GCmpWL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_2_GCmpWL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1c3]"></a>TMR4_2_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_2_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1c4]"></a>TMR4_2_ReloadU_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_2_ReloadU_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1c5]"></a>TMR4_2_ReloadV_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_2_ReloadV_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1c6]"></a>TMR4_2_ReloadW_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_2_ReloadW_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1c7]"></a>TMR4_2_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_2_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1c8]"></a>TMR4_3_GCmpUH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_3_GCmpUH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1c9]"></a>TMR4_3_GCmpUL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_3_GCmpUL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1ca]"></a>TMR4_3_GCmpVH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_3_GCmpVH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1cb]"></a>TMR4_3_GCmpVL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_3_GCmpVL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1cc]"></a>TMR4_3_GCmpWH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_3_GCmpWH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1cd]"></a>TMR4_3_GCmpWL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_3_GCmpWL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1ce]"></a>TMR4_3_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_3_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1cf]"></a>TMR4_3_ReloadU_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_3_ReloadU_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1d0]"></a>TMR4_3_ReloadV_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_3_ReloadV_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1d1]"></a>TMR4_3_ReloadW_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_3_ReloadW_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1d2]"></a>TMR4_3_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR4_3_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1d3]"></a>TMR6_1_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_1_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1d4]"></a>TMR6_1_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_1_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1d5]"></a>TMR6_1_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_1_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1d6]"></a>TMR6_1_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_1_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1d7]"></a>TMR6_1_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_1_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1d8]"></a>TMR6_1_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_1_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1d9]"></a>TMR6_1_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_1_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1da]"></a>TMR6_1_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_1_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1db]"></a>TMR6_1_Gdte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_1_Gdte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1dc]"></a>TMR6_1_SCmpDownA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_1_SCmpDownA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1dd]"></a>TMR6_1_SCmpDownB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_1_SCmpDownB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1de]"></a>TMR6_1_SCmpUpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_1_SCmpUpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1df]"></a>TMR6_1_SCmpUpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_1_SCmpUpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1e0]"></a>TMR6_2_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_2_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1e1]"></a>TMR6_2_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_2_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1e2]"></a>TMR6_2_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_2_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1e3]"></a>TMR6_2_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_2_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1e4]"></a>TMR6_2_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_2_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1e5]"></a>TMR6_2_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_2_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1e6]"></a>TMR6_2_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_2_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1e7]"></a>TMR6_2_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_2_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1e8]"></a>TMR6_2_Gdte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_2_Gdte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1e9]"></a>TMR6_2_SCmpDownA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_2_SCmpDownA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1ea]"></a>TMR6_2_SCmpDownB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_2_SCmpDownB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1eb]"></a>TMR6_2_SCmpUpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_2_SCmpUpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1ec]"></a>TMR6_2_SCmpUpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_2_SCmpUpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1ed]"></a>TMR6_3_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_3_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1ee]"></a>TMR6_3_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_3_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1ef]"></a>TMR6_3_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_3_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1f0]"></a>TMR6_3_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_3_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1f1]"></a>TMR6_3_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_3_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1f2]"></a>TMR6_3_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_3_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1f3]"></a>TMR6_3_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_3_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1f4]"></a>TMR6_3_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_3_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1f5]"></a>TMR6_3_Gdte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_3_Gdte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1f6]"></a>TMR6_3_SCmpDownA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_3_SCmpDownA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1f7]"></a>TMR6_3_SCmpDownB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_3_SCmpDownB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1f8]"></a>TMR6_3_SCmpUpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_3_SCmpUpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1f9]"></a>TMR6_3_SCmpUpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_3_SCmpUpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1fa]"></a>TMR6_4_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_4_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1fb]"></a>TMR6_4_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_4_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1fc]"></a>TMR6_4_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_4_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1fd]"></a>TMR6_4_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_4_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1fe]"></a>TMR6_4_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_4_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1ff]"></a>TMR6_4_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_4_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[200]"></a>TMR6_4_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_4_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[201]"></a>TMR6_4_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_4_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[202]"></a>TMR6_4_Gdte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_4_Gdte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[203]"></a>TMR6_4_SCmpDownA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_4_SCmpDownA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[204]"></a>TMR6_4_SCmpDownB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_4_SCmpDownB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[205]"></a>TMR6_4_SCmpUpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_4_SCmpUpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[206]"></a>TMR6_4_SCmpUpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_4_SCmpUpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[207]"></a>TMR6_5_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_5_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[208]"></a>TMR6_5_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_5_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[209]"></a>TMR6_5_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_5_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[20a]"></a>TMR6_5_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_5_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[20b]"></a>TMR6_5_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_5_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[20c]"></a>TMR6_5_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_5_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[20d]"></a>TMR6_5_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_5_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[20e]"></a>TMR6_5_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_5_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[20f]"></a>TMR6_5_Gdte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_5_Gdte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[210]"></a>TMR6_5_SCmpDownA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_5_SCmpDownA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[211]"></a>TMR6_5_SCmpDownB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_5_SCmpDownB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[212]"></a>TMR6_5_SCmpUpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_5_SCmpUpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[213]"></a>TMR6_5_SCmpUpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_5_SCmpUpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[214]"></a>TMR6_6_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_6_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[215]"></a>TMR6_6_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_6_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[216]"></a>TMR6_6_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_6_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[217]"></a>TMR6_6_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_6_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[218]"></a>TMR6_6_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_6_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[219]"></a>TMR6_6_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_6_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[21a]"></a>TMR6_6_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_6_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[21b]"></a>TMR6_6_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_6_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[21c]"></a>TMR6_6_Gdte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_6_Gdte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[21d]"></a>TMR6_6_SCmpDownA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_6_SCmpDownA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[21e]"></a>TMR6_6_SCmpDownB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_6_SCmpDownB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[21f]"></a>TMR6_6_SCmpUpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_6_SCmpUpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[220]"></a>TMR6_6_SCmpUpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_6_SCmpUpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[221]"></a>TMR6_7_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_7_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[222]"></a>TMR6_7_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_7_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[223]"></a>TMR6_7_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_7_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[224]"></a>TMR6_7_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_7_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[225]"></a>TMR6_7_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_7_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[226]"></a>TMR6_7_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_7_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[227]"></a>TMR6_7_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_7_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[228]"></a>TMR6_7_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_7_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[229]"></a>TMR6_7_Gdte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_7_Gdte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[22a]"></a>TMR6_7_SCmpDownA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_7_SCmpDownA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[22b]"></a>TMR6_7_SCmpDownB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_7_SCmpDownB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[22c]"></a>TMR6_7_SCmpUpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_7_SCmpUpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[22d]"></a>TMR6_7_SCmpUpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_7_SCmpUpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[22e]"></a>TMR6_8_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_8_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[22f]"></a>TMR6_8_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_8_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[230]"></a>TMR6_8_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_8_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[231]"></a>TMR6_8_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_8_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[232]"></a>TMR6_8_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_8_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[233]"></a>TMR6_8_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_8_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[234]"></a>TMR6_8_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_8_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[235]"></a>TMR6_8_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_8_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[236]"></a>TMR6_8_Gdte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_8_Gdte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[237]"></a>TMR6_8_SCmpDownA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_8_SCmpDownA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[238]"></a>TMR6_8_SCmpDownB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_8_SCmpDownB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[239]"></a>TMR6_8_SCmpUpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_8_SCmpUpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[23a]"></a>TMR6_8_SCmpUpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMR6_8_SCmpUpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[23b]"></a>TMRA_10_Cmp1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_10_Cmp1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[23c]"></a>TMRA_10_Cmp2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_10_Cmp2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[23d]"></a>TMRA_10_Cmp3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_10_Cmp3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[23e]"></a>TMRA_10_Cmp4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_10_Cmp4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[23f]"></a>TMRA_10_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_10_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[240]"></a>TMRA_10_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_10_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[241]"></a>TMRA_11_Cmp1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_11_Cmp1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[242]"></a>TMRA_11_Cmp2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_11_Cmp2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[243]"></a>TMRA_11_Cmp3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_11_Cmp3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[244]"></a>TMRA_11_Cmp4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_11_Cmp4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[245]"></a>TMRA_11_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_11_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[246]"></a>TMRA_11_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_11_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[247]"></a>TMRA_12_Cmp1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_12_Cmp1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[248]"></a>TMRA_12_Cmp2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_12_Cmp2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[249]"></a>TMRA_12_Cmp3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_12_Cmp3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[24a]"></a>TMRA_12_Cmp4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_12_Cmp4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[24b]"></a>TMRA_12_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_12_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[24c]"></a>TMRA_12_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_12_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[24d]"></a>TMRA_1_Cmp1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_1_Cmp1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[24e]"></a>TMRA_1_Cmp2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_1_Cmp2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[24f]"></a>TMRA_1_Cmp3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_1_Cmp3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[250]"></a>TMRA_1_Cmp4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_1_Cmp4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[251]"></a>TMRA_1_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_1_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[252]"></a>TMRA_1_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_1_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[253]"></a>TMRA_2_Cmp1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_2_Cmp1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[254]"></a>TMRA_2_Cmp2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_2_Cmp2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[255]"></a>TMRA_2_Cmp3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_2_Cmp3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[256]"></a>TMRA_2_Cmp4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_2_Cmp4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[257]"></a>TMRA_2_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_2_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[258]"></a>TMRA_2_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_2_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[259]"></a>TMRA_3_Cmp1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_3_Cmp1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[25a]"></a>TMRA_3_Cmp2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_3_Cmp2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[25b]"></a>TMRA_3_Cmp3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_3_Cmp3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[25c]"></a>TMRA_3_Cmp4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_3_Cmp4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[25d]"></a>TMRA_3_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_3_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[25e]"></a>TMRA_3_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_3_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[25f]"></a>TMRA_4_Cmp1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_4_Cmp1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[260]"></a>TMRA_4_Cmp2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_4_Cmp2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[261]"></a>TMRA_4_Cmp3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_4_Cmp3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[262]"></a>TMRA_4_Cmp4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_4_Cmp4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[263]"></a>TMRA_4_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_4_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[264]"></a>TMRA_4_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_4_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[265]"></a>TMRA_5_Cmp1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_5_Cmp1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[266]"></a>TMRA_5_Cmp2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_5_Cmp2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[267]"></a>TMRA_5_Cmp3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_5_Cmp3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[268]"></a>TMRA_5_Cmp4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_5_Cmp4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[269]"></a>TMRA_5_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_5_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[26a]"></a>TMRA_5_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_5_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[26b]"></a>TMRA_6_Cmp1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_6_Cmp1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[26c]"></a>TMRA_6_Cmp2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_6_Cmp2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[26d]"></a>TMRA_6_Cmp3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_6_Cmp3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[26e]"></a>TMRA_6_Cmp4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_6_Cmp4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[26f]"></a>TMRA_6_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_6_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[270]"></a>TMRA_6_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_6_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[271]"></a>TMRA_7_Cmp1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_7_Cmp1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[272]"></a>TMRA_7_Cmp2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_7_Cmp2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[273]"></a>TMRA_7_Cmp3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_7_Cmp3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[274]"></a>TMRA_7_Cmp4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_7_Cmp4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[275]"></a>TMRA_7_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_7_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[276]"></a>TMRA_7_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_7_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[277]"></a>TMRA_8_Cmp1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_8_Cmp1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[278]"></a>TMRA_8_Cmp2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_8_Cmp2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[279]"></a>TMRA_8_Cmp3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_8_Cmp3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[27a]"></a>TMRA_8_Cmp4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_8_Cmp4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[27b]"></a>TMRA_8_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_8_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[27c]"></a>TMRA_8_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_8_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[27d]"></a>TMRA_9_Cmp1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_9_Cmp1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[27e]"></a>TMRA_9_Cmp2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_9_Cmp2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[27f]"></a>TMRA_9_Cmp3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_9_Cmp3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[280]"></a>TMRA_9_Cmp4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_9_Cmp4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[281]"></a>TMRA_9_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_9_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[282]"></a>TMRA_9_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.TMRA_9_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[474]"></a>TMRA_ClrStatus</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, hc32f4a0_tmra.o(i.TMRA_ClrStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMRA_ClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit3_OvfIrqCallback
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit2_OvfIrqCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit1_OvfIrqCallback
</UL>

<P><STRONG><a name="[475]"></a>TMRA_GetStatus</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, hc32f4a0_tmra.o(i.TMRA_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMRA_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit3_OvfIrqCallback
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit2_OvfIrqCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit1_OvfIrqCallback
</UL>

<P><STRONG><a name="[476]"></a>TMRA_Init</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, hc32f4a0_tmra.o(i.TMRA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMRA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint3_Config
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint2_Config
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint1_Config
</UL>

<P><STRONG><a name="[477]"></a>TMRA_IntCmd</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, hc32f4a0_tmra.o(i.TMRA_IntCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMRA_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint3_IrqConfig
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint2_IrqConfig
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint1_IrqConfig
</UL>

<P><STRONG><a name="[478]"></a>TMRA_Start</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, hc32f4a0_tmra.o(i.TMRA_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMRA_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUintStart
</UL>

<P><STRONG><a name="[479]"></a>TMRA_Stop</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, hc32f4a0_tmra.o(i.TMRA_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMRA_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUintStop
</UL>

<P><STRONG><a name="[480]"></a>TMRA_StructInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hc32f4a0_tmra.o(i.TMRA_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint3_Config
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint2_Config
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint1_Config
</UL>

<P><STRONG><a name="[452]"></a>TRNG_Generate</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, hc32f4a0_trng.o(i.TRNG_Generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TRNG_Generate
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
</UL>

<P><STRONG><a name="[47a]"></a>TRNG_ReloadCmd</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hc32f4a0_trng.o(i.TRNG_ReloadCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TRNG_ReloadCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRNG
</UL>

<P><STRONG><a name="[47b]"></a>TRNG_SetShiftCnt</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hc32f4a0_trng.o(i.TRNG_SetShiftCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TRNG_SetShiftCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRNG
</UL>

<P><STRONG><a name="[3c6]"></a>Tier1ToTier2</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, app_func_eeprom.o(i.Tier1ToTier2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Tier1ToTier2
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepDatLoad
</UL>

<P><STRONG><a name="[3a4]"></a>Tier2ToTier1</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, app_func_eeprom.o(i.Tier2ToTier1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Tier2ToTier1
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalProtectDatInit
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalProtectDatInit
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateDatInit
</UL>

<P><STRONG><a name="[47f]"></a>TimerAUint1_Config</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, bsp_timer.o(i.TimerAUint1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TimerAUint1_Config &rArr; TimerAUint1_IrqConfig &rArr; TMRA_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_StructInit
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_Init
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint1_IrqConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[485]"></a>TimerAUint2_Config</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, bsp_timer.o(i.TimerAUint2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TimerAUint2_Config &rArr; TimerAUint2_IrqConfig &rArr; TMRA_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_StructInit
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_Init
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint2_IrqConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[487]"></a>TimerAUint3_Config</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, bsp_timer.o(i.TimerAUint3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TimerAUint3_Config &rArr; TimerAUint3_IrqConfig &rArr; TMRA_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_StructInit
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_Init
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint3_IrqConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[373]"></a>TimerAUintStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_timer.o(i.TimerAUintStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerAUintStart &rArr; TMRA_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[2e0]"></a>TimerAUintStop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_timer.o(i.TimerAUintStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerAUintStop &rArr; TMRA_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDCUpdateAnalysis
</UL>

<P><STRONG><a name="[283]"></a>USART_10_LinBreakField_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_10_LinBreakField_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[284]"></a>USART_10_LinWakeup_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_10_LinWakeup_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[285]"></a>USART_10_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_10_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[286]"></a>USART_10_RxErr_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_10_RxErr_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[287]"></a>USART_10_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_10_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[288]"></a>USART_10_TxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_10_TxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[289]"></a>USART_1_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_1_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[28a]"></a>USART_1_RxErr_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_1_RxErr_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[28b]"></a>USART_1_RxTO_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_1_RxTO_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[28c]"></a>USART_1_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_1_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[28d]"></a>USART_1_TxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_1_TxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[28e]"></a>USART_2_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_2_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[28f]"></a>USART_2_RxErr_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_2_RxErr_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[290]"></a>USART_2_RxTO_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_2_RxTO_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[291]"></a>USART_2_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_2_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[292]"></a>USART_2_TxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_2_TxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[293]"></a>USART_3_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_3_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[294]"></a>USART_3_RxErr_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_3_RxErr_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[295]"></a>USART_3_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_3_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[296]"></a>USART_3_TxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_3_TxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[297]"></a>USART_4_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_4_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[298]"></a>USART_4_RxErr_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_4_RxErr_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[299]"></a>USART_4_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_4_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[29a]"></a>USART_4_TxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_4_TxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[29b]"></a>USART_5_LinBreakField_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_5_LinBreakField_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[29c]"></a>USART_5_LinWakeup_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_5_LinWakeup_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[29d]"></a>USART_5_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_5_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[29e]"></a>USART_5_RxErr_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_5_RxErr_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[29f]"></a>USART_5_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_5_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[2a0]"></a>USART_5_TxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_5_TxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[2a1]"></a>USART_6_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_6_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[2a2]"></a>USART_6_RxErr_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_6_RxErr_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[2a3]"></a>USART_6_RxTO_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_6_RxTO_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[2a4]"></a>USART_6_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_6_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[2a5]"></a>USART_6_TxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_6_TxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[2a6]"></a>USART_7_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_7_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[2a7]"></a>USART_7_RxErr_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_7_RxErr_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[2a8]"></a>USART_7_RxTO_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_7_RxTO_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[2a9]"></a>USART_7_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_7_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[2aa]"></a>USART_7_TxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_7_TxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[2ab]"></a>USART_8_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_8_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[2ac]"></a>USART_8_RxErr_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_8_RxErr_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[2ad]"></a>USART_8_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_8_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[2ae]"></a>USART_8_TxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_8_TxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[2af]"></a>USART_9_RxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_9_RxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[2b0]"></a>USART_9_RxErr_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_9_RxErr_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[2b1]"></a>USART_9_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_9_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[2b2]"></a>USART_9_TxEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USART_9_TxEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[489]"></a>USART_DeInit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, hc32f4a0_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUSART
</UL>

<P><STRONG><a name="[3b6]"></a>USART_FuncCmd</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, hc32f4a0_usart.o(i.USART_FuncCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUSART
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGCmdProcess
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGRS232_RxHandler
</UL>

<P><STRONG><a name="[48a]"></a>USART_GetStatus</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, hc32f4a0_usart.o(i.USART_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[431]"></a>USART_RecData</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, hc32f4a0_usart.o(i.USART_RecData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_RecData
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC_USART_RxIrq_Callback
</UL>

<P><STRONG><a name="[48b]"></a>USART_SendData</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hc32f4a0_usart.o(i.USART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[48c]"></a>USART_SetBaudrate</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, hc32f4a0_usart.o(i.USART_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = USART_SetBaudrate &rArr; CalcSmartcardBaudrate &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcUartBaudrate
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSmartcardBaudrate
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcClkSyncBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UartInit
</UL>

<P><STRONG><a name="[48d]"></a>USART_UartInit</STRONG> (Thumb, 490 bytes, Stack size 16 bytes, hc32f4a0_usart.o(i.USART_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = USART_UartInit &rArr; USART_SetBaudrate &rArr; CalcSmartcardBaudrate &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUSART
</UL>

<P><STRONG><a name="[2b3]"></a>USBFS_Global_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.USBFS_Global_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f4a0_interrupts.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsageFault_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0sitb.o(RESET)
</UL>
<P><STRONG><a name="[2b4]"></a>UsageFault_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.UsageFault_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[472]"></a>User_Set_Vector</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, bsp.o(i.User_Set_Vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = User_Set_Vector &rArr; MB85Ctrl_Write &rArr; SPI_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Write
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Read
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_WDG
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[4a7]"></a>Vbat_Pre_Check</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, app_task_workstep.o(i.Vbat_Pre_Check))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Execute_Func
</UL>

<P><STRONG><a name="[37b]"></a>VolAnalogToDigital</STRONG> (Thumb, 244 bytes, Stack size 20 bytes, app_task_workstep.o(i.VolAnalogToDigital))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VolAnalogToDigital
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingProcess
</UL>

<P><STRONG><a name="[428]"></a>Voltage_Value_Soft_Process</STRONG> (Thumb, 298 bytes, Stack size 0 bytes, app_timer_periodic_adc3.o(i.Voltage_Value_Soft_Process))
<BR><BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalAdDatProcess
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPer10ms
</UL>

<P><STRONG><a name="[471]"></a>W25Q_MB85R_SpiInit</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, bsp_spi.o(i.W25Q_MB85R_SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = W25Q_MB85R_SpiInit &rArr; GPIO_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FunctionCmd
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[48e]"></a>W5500_Init</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, bsp_lan.o(i.W5500_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = W5500_Init &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_settimeout
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_spi_cbfunc
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_cs_cbfunc
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_cris_cbfunc
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitW5500
</UL>

<P><STRONG><a name="[355]"></a>W5500_Poll</STRONG> (Thumb, 1652 bytes, Stack size 2112 bytes, bsp_lan.o(i.W5500_Poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 3600<LI>Call Chain = W5500_Poll &rArr; AlarmQuarry &rArr; Protect_BitAction_Func &rArr; Protect_Action_Func &rArr; WorkstepProtUpcast &rArr; W5500_send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRingBuffer
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_socket
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_send
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_recv
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_listen
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_disconnect
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_close
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmQuarry
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskEth
</UL>

<P><STRONG><a name="[49c]"></a>W5500_RST_Init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bsp_lan.o(i.W5500_RST_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = W5500_RST_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[49d]"></a>W5500_SpiInit</STRONG> (Thumb, 220 bytes, Stack size 72 bytes, bsp_spi.o(i.W5500_SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = W5500_SpiInit &rArr; GPIO_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDebugPort
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FunctionCmd
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[356]"></a>W5500_TCP_Client</STRONG> (Thumb, 1596 bytes, Stack size 2104 bytes, bsp_lan.o(i.W5500_TCP_Client))
<BR><BR>[Stack]<UL><LI>Max Depth = 3592<LI>Call Chain = W5500_TCP_Client &rArr; AlarmQuarry &rArr; Protect_BitAction_Func &rArr; Protect_Action_Func &rArr; WorkstepProtUpcast &rArr; W5500_send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRingBuffer
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_socket
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_send
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_recv
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_disconnect
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_close
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmQuarry
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskEth
</UL>

<P><STRONG><a name="[357]"></a>W5500_close</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, w5500socket.o(i.W5500_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W5500_close &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskEth
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_socket
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_send
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_recv
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_listen
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_disconnect
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_TCP_Client
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Poll
</UL>

<P><STRONG><a name="[49a]"></a>W5500_disconnect</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, w5500socket.o(i.W5500_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W5500_disconnect &rArr; W5500_close &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_close
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_TCP_Client
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Poll
</UL>

<P><STRONG><a name="[497]"></a>W5500_listen</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, w5500socket.o(i.W5500_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W5500_listen &rArr; W5500_close &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_close
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Poll
</UL>

<P><STRONG><a name="[499]"></a>W5500_recv</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, w5500socket.o(i.W5500_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = W5500_recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_close
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_TCP_Client
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Poll
</UL>

<P><STRONG><a name="[345]"></a>W5500_send</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, w5500socket.o(i.W5500_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = W5500_send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_close
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Trigger_Judgemet
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskProtocol
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskProtection
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppACDC_alarm
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmQuarry
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_TCP_Client
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Poll
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkstepProtUpcast
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Data_To_Record
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxRecordDatUpcast
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfChecking
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ageing
</UL>

<P><STRONG><a name="[49b]"></a>W5500_socket</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, w5500socket.o(i.W5500_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W5500_socket &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_close
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_TCP_Client
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Poll
</UL>

<P><STRONG><a name="[2b5]"></a>WDT_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_interrupts.o(i.WDT_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[2e8]"></a>WIZCHIP_READ</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, w5500.o(i.WIZCHIP_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDC_DataHandle
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_socket
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_send
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_recv
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_listen
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_disconnect
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_close
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_TCP_Client
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Poll
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_gettimeout
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetmode
</UL>

<P><STRONG><a name="[4a3]"></a>WIZCHIP_READ_BUF</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, w5500.o(i.WIZCHIP_READ_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_socket
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetinfo
</UL>

<P><STRONG><a name="[498]"></a>WIZCHIP_WRITE</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, w5500.o(i.WIZCHIP_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_settimeout
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_socket
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_send
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_recv
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_listen
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_disconnect
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_close
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_TCP_Client
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Poll
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
</UL>

<P><STRONG><a name="[4c2]"></a>WIZCHIP_WRITE_BUF</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, w5500.o(i.WIZCHIP_WRITE_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetinfo
</UL>

<P><STRONG><a name="[44b]"></a>WorkstepInqAnalysis</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, app_task_protocol.o(i.WorkstepInqAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WorkstepInqAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[442]"></a>WorkstepProtUpcast</STRONG> (Thumb, 312 bytes, Stack size 304 bytes, app_task_protocol.o(i.WorkstepProtUpcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = WorkstepProtUpcast &rArr; W5500_send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_send
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16N
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Action_Func
</UL>

<P><STRONG><a name="[44a]"></a>WorkstepRunstaSetAnalysis</STRONG> (Thumb, 962 bytes, Stack size 36 bytes, app_task_protocol.o(i.WorkstepRunstaSetAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WorkstepRunstaSetAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[449]"></a>WorkstepSetAnalysis</STRONG> (Thumb, 1678 bytes, Stack size 56 bytes, app_task_protocol.o(i.WorkstepSetAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WorkstepSetAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[377]"></a>Workstep_Abort_Func</STRONG> (Thumb, 2468 bytes, Stack size 40 bytes, app_task_workstep.o(i.Workstep_Abort_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Workstep_Abort_Func &rArr; Protect_Action_Func &rArr; WorkstepProtUpcast &rArr; W5500_send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingStop
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Switch_Func
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Action_Func
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskWorkstep
</UL>

<P><STRONG><a name="[376]"></a>Workstep_Analysis_Func</STRONG> (Thumb, 1218 bytes, Stack size 16 bytes, app_task_workstep.o(i.Workstep_Analysis_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Workstep_Analysis_Func &rArr; Workstep_Switch_Func &rArr; Workstep_Execute_Func &rArr; BatteryFormattingProcess &rArr; CurLinearOutputSetting &rArr; DAC80508_ReadDacData &rArr; DAC80508_ReadCmd &rArr; SPI5_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingStop
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Switch_Func
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Reload_Func
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Execute_Func
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskWorkstep
</UL>

<P><STRONG><a name="[4a5]"></a>Workstep_Execute_Func</STRONG> (Thumb, 628 bytes, Stack size 16 bytes, app_task_workstep.o(i.Workstep_Execute_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Workstep_Execute_Func &rArr; BatteryFormattingProcess &rArr; CurLinearOutputSetting &rArr; DAC80508_ReadDacData &rArr; DAC80508_ReadCmd &rArr; SPI5_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingStop
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vbat_Pre_Check
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Switch_Func
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Analysis_Func
</UL>

<P><STRONG><a name="[379]"></a>Workstep_Protect_Func</STRONG> (Thumb, 988 bytes, Stack size 40 bytes, app_task_workstep.o(i.Workstep_Protect_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Workstep_Protect_Func &rArr; Protect_Action_Func &rArr; WorkstepProtUpcast &rArr; W5500_send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Action_Func
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskWorkstep
</UL>

<P><STRONG><a name="[4a6]"></a>Workstep_Reload_Func</STRONG> (Thumb, 2800 bytes, Stack size 24 bytes, app_task_workstep.o(i.Workstep_Reload_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Workstep_Reload_Func
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Switch_Func
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Analysis_Func
</UL>

<P><STRONG><a name="[4a4]"></a>Workstep_Switch_Func</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, app_task_workstep.o(i.Workstep_Switch_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Workstep_Switch_Func &rArr; Workstep_Execute_Func &rArr; BatteryFormattingProcess &rArr; CurLinearOutputSetting &rArr; DAC80508_ReadDacData &rArr; DAC80508_ReadCmd &rArr; SPI5_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingStop
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Reload_Func
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Execute_Func
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Analysis_Func
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Abort_Func
</UL>

<P><STRONG><a name="[35f]"></a>WriteRingBuffer</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, ringbuffer.o(i.WriteRingBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteRingBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskProtocol
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_TCP_Client
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Poll
</UL>

<P><STRONG><a name="[4a8]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[559]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[351]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUSART
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskWorkstep
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppACDC_alarm
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGCmdProcess
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGRS232_RxHandler
</UL>

<P><STRONG><a name="[55a]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[55b]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[4aa]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[55c]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[344]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Trigger_Judgemet
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppACDC_alarm
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_TCP_Client
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Poll
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfChecking
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ageing
</UL>

<P><STRONG><a name="[55d]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[55e]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[395]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntelProtectRunParmCheck
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPer10ms
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Protect_Func
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtoCVConvertFunc
</UL>

<P><STRONG><a name="[55f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[560]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[561]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[30e]"></a>ad7124_wait_to_power_on</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bsp_ad7124.o(i.ad7124_wait_to_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ad7124_wait_to_power_on &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_Reset
</UL>

<P><STRONG><a name="[4af]"></a>bsp_AD7124Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bsp_ad7124.o(i.bsp_AD7124Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bsp_AD7124Init &rArr; AD7124_CfgADC &rArr; AD7124_WriteReg &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_SpiInit
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_EXINT_Init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_CfgADC
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[4b0]"></a>bsp_AD7175Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bsp_ad7175.o(i.bsp_AD7175Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bsp_AD7175Init &rArr; AD7175_CfgADC &rArr; AD7175_ReadReg &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_SpiInit
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_EXINT_Init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_CfgADC
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[2dc]"></a>bsp_DelayMS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_dwt.o(i.bsp_DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Value_Set
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_SendData
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCharge
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Scanning
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskProtocol
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteSingleByte
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmQuarry
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepDatSync
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInqAnalysis
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDCUpdateAnalysis
</UL>

<P><STRONG><a name="[2e5]"></a>bsp_DelayUS</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, bsp_dwt.o(i.bsp_DelayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_SendData
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Write
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadSingleBytes
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDCUpdateAnalysis
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_spi_writebyte
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_spi_readbyte
</UL>

<P><STRONG><a name="[4b1]"></a>bsp_FR_ADDR_InitGPIO</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, bsp_gpio.o(i.bsp_FR_ADDR_InitGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_FR_ADDR_InitGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[470]"></a>bsp_HWDG_InitGPIO</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bsp_gpio.o(i.bsp_HWDG_InitGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_HWDG_InitGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[4b9]"></a>bsp_InitACDC</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_acdc.o(i.bsp_InitACDC))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bsp_InitACDC &rArr; Can1Config &rArr; CAN_Init &rArr; CAN_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[4b3]"></a>bsp_InitCharge</STRONG> (Thumb, 640 bytes, Stack size 32 bytes, bsp_charge.o(i.bsp_InitCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsp_InitCharge &rArr; Chg_Dis_Port_Cfg &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Port_Cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[46e]"></a>bsp_InitDWT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp_dwt.o(i.bsp_InitDWT))
<BR><BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[4b8]"></a>bsp_InitI2C</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bsp_eeprom.o(i.bsp_InitI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_InitI2C &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[4b2]"></a>bsp_InitLed</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, bsp_led.o(i.bsp_InitLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_InitLed &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[4b5]"></a>bsp_InitRNG</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_rng.o(i.bsp_InitRNG))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_InitRNG &rArr; CLK_ClkDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PERI_ClkConfig
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_ClkDiv
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_SetShiftCnt
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_ReloadCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[46f]"></a>bsp_InitSWDT</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, bsp_swdt.o(i.bsp_InitSWDT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_InitSWDT &rArr; SWDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWDT_Init
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWDT_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[4b4]"></a>bsp_InitUSART</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, bsp_debug.o(i.bsp_InitUSART))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = bsp_InitUSART &rArr; USART_UartInit &rArr; USART_SetBaudrate &rArr; CalcSmartcardBaudrate &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg3PeriphClockCmd
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UartInit
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[354]"></a>bsp_InitW5500</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_lan.o(i.bsp_InitW5500))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bsp_InitW5500 &rArr; W5500_Init &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Scanning
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRingBuffer
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lan_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskEth
</UL>

<P><STRONG><a name="[36b]"></a>bsp_LedOff</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_led.o(i.bsp_LedOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_LedOff &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Shine_Ctrl
</UL>

<P><STRONG><a name="[368]"></a>bsp_LedOn</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_led.o(i.bsp_LedOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_LedOn &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Shine_Ctrl
</UL>

<P><STRONG><a name="[369]"></a>bsp_LedToggle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_led.o(i.bsp_LedToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_LedToggle &rArr; GPIO_TogglePins
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TogglePins
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit1_OvfIrqCallback
</UL>

<P><STRONG><a name="[4b6]"></a>bsp_M_Loop_InitGPIO</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, bsp_gpio.o(i.bsp_M_Loop_InitGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_M_Loop_InitGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDebugPort
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[4b7]"></a>bsp_dacx0508_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_dac80508.o(i.bsp_dacx0508_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bsp_dacx0508_init &rArr; dacx0508_cfg &rArr; DAC80508_BRDCAST &rArr; DAC80508_WriteCmd &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dacx0508_cfg
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_dac_spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[49e]"></a>connect</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, w5500socket.o(i.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = connect &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_TCP_Client
</UL>

<P><STRONG><a name="[493]"></a>ctlnetwork</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wizchip_conf.o(i.ctlnetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ctlnetwork &rArr; wizchip_setnetmode &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_settimeout
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetinfo
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_gettimeout
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetmode
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[347]"></a>data_sync_func</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, app_task_ageing.o(i.data_sync_func))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Trigger_Judgemet
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ageing
</UL>

<P><STRONG><a name="[362]"></a>ee_ReadBytes</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, bsp_eeprom.o(i.ee_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ee_ReadBytes &rArr; osKernelRestoreLock &rArr; EvrRtxKernelRestoreLock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;En_int
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_int
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadSingleBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDatInit
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode_Mac_CheckSet
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytesWithCheck
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepDatLoad
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInqAnalysis
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateSetAnalysis
</UL>

<P><STRONG><a name="[4c8]"></a>ee_ReadSingleBytes</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bsp_eeprom.o(i.ee_ReadSingleBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ee_ReadSingleBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
</UL>

<P><STRONG><a name="[3c8]"></a>ee_WriteBytes</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, bsp_eeprom.o(i.ee_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ee_WriteBytes &rArr; ee_WriteSingleByte &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteSingleByte
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDatInit
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytesWithCheck
</UL>

<P><STRONG><a name="[3a7]"></a>ee_WriteBytesWithCheck</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bsp_eeprom.o(i.ee_WriteBytesWithCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ee_WriteBytesWithCheck &rArr; ee_ReadBytes &rArr; osKernelRestoreLock &rArr; EvrRtxKernelRestoreLock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntelProtectDeviceCheck
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepDatSync
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetAnalysis
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateSetAnalysis
</UL>

<P><STRONG><a name="[4cd]"></a>ee_WriteSingleByte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bsp_eeprom.o(i.ee_WriteSingleByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ee_WriteSingleByte &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
</UL>

<P><STRONG><a name="[b5]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_debug.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; USART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[49f]"></a>getSn_RX_RSR</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, w5500.o(i.getSn_RX_RSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getSn_RX_RSR &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_recv
</UL>

<P><STRONG><a name="[4a0]"></a>getSn_TX_FSR</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, w5500.o(i.getSn_TX_FSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getSn_TX_FSR &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_send
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_recv
</UL>

<P><STRONG><a name="[2da]"></a>$Super$$main</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = $Super$$main &rArr; System_Init &rArr; bsp_Init &rArr; bsp_InitUSART &rArr; USART_UartInit &rArr; USART_SetBaudrate &rArr; CalcSmartcardBaudrate &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ec]"></a>osDelay</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rtx_delay.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osDelay &rArr; EvrRtxDelayError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingStop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskWorkstep
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLed
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskEth
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDebug
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskAgeing
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppACDC_alarm
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDC_Fan_Speed51_ModeTest
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedStaInit
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Switch_Func
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Execute_Func
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Workstep_Analysis_Func
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryFormattingProcess
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Action_Func
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfChecking
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_On_Cfg
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_Dis_Off_Cfg
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ageing
</UL>

<P><STRONG><a name="[4de]"></a>osKernelGetState</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPrivileged
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>

<P><STRONG><a name="[4da]"></a>osKernelInitialize</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osKernelInitialize &rArr; osRtxKernelPreInit &rArr; evr_initialize &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2dd]"></a>osKernelLock</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osKernelLock &rArr; EvrRtxKernelLock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelLock
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepDatSync
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetAnalysis
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDCUpdateAnalysis
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurLinearOutputSetting
</UL>

<P><STRONG><a name="[2e3]"></a>osKernelRestoreLock</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rtx_kernel.o(i.osKernelRestoreLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osKernelRestoreLock &rArr; EvrRtxKernelRestoreLock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelRestoreLock
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepDatSync
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetAnalysis
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDCUpdateAnalysis
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurLinearOutputSetting
</UL>

<P><STRONG><a name="[4db]"></a>osKernelStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osKernelStart &rArr; EvrRtxKernelStart &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2e2]"></a>osKernelUnlock</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osKernelUnlock &rArr; EvrRtxKernelUnlock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelUnlock
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepDatSync
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetAnalysis
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDCUpdateAnalysis
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurLinearOutputSetting
</UL>

<P><STRONG><a name="[4e3]"></a>osMessageQueueGet</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; EvrRtxMessageQueueRetrieved &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[371]"></a>osMessageQueueNew</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMessageQueueNew &rArr; EvrRtxMessageQueueNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNew
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[4e6]"></a>osMessageQueuePut</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxMemoryPoolAlloc &rArr; EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[4f8]"></a>osRtxErrorNotify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxErrorNotify))
<BR><BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>

<P><STRONG><a name="[c4]"></a>osRtxIdleThread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxIdleThread))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[4e2]"></a>osRtxKernelPreInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_lib.o(i.osRtxKernelPreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxKernelPreInit &rArr; evr_initialize &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evr_initialize
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[4e7]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, rtx_memory.o(i.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[4e9]"></a>osRtxMemoryFree</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_memory.o(i.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerDelete
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[4ea]"></a>osRtxMemoryInit</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, rtx_memory.o(i.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxMemoryInit &rArr; EvrRtxMemoryInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[4d3]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_mempool.o(i.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxMemoryPoolAlloc &rArr; EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_get
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[4ed]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtx_mempool.o(i.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerDelete
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[4ef]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rtx_mempool.o(i.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[4f4]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rtx_mutex.o(i.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[4f5]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, rtx_mutex.o(i.osRtxMutexOwnerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[2b9]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, rtx_system.o(i.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[4d1]"></a>osRtxPostProcess</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_system.o(i.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[4fa]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxThreadDelayTick &rArr; EvrRtxThreadUnblocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[4f7]"></a>osRtxThreadDispatch</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rtx_thread.o(i.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[4f1]"></a>osRtxThreadListGet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[502]"></a>osRtxThreadListPut</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, rtx_thread.o(i.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>

<P><STRONG><a name="[4fc]"></a>osRtxThreadListRemove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
</UL>

<P><STRONG><a name="[4f6]"></a>osRtxThreadListSort</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
</UL>

<P><STRONG><a name="[4fd]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[4f3]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[503]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadStackCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadStackCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[504]"></a>osRtxThreadStartup</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[500]"></a>osRtxThreadSwitch</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[505]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxThreadWaitEnter &rArr; EvrRtxThreadBlocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[4f2]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, rtx_thread.o(i.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[2ba]"></a>osRtxTick_Handler</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, rtx_system.o(i.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c5]"></a>osRtxTimerThread</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_timer.o(i.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; EvrRtxMessageQueueRetrieved &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[350]"></a>osSemaphoreAcquire</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, rtx_semaphore.o(i.osSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreAcquire &rArr; EvrRtxSemaphoreError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquire
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskProtocol
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskProtection
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppACDC_alarm
</UL>

<P><STRONG><a name="[366]"></a>osSemaphoreNew</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtx_semaphore.o(i.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osSemaphoreNew &rArr; EvrRtxSemaphoreNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNew
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[2e9]"></a>osSemaphoreRelease</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rtx_semaphore.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; EvrRtxSemaphoreReleased &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreRelease
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDC_DataHandle
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUnit1_OvfIrqCallback
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_TCP_Client
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Poll
</UL>

<P><STRONG><a name="[d4]"></a>osThreadExit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_thread.o(i.osThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osThreadExit &rArr; EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[367]"></a>osThreadNew</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtx_thread.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
</UL>

<P><STRONG><a name="[2de]"></a>osThreadSuspend</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(i.osThreadSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osThreadSuspend &rArr; EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSuspend
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDCUpdateAnalysis
</UL>

<P><STRONG><a name="[46c]"></a>osThreadTerminate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(i.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osThreadTerminate &rArr; EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadTerminate
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
</UL>

<P><STRONG><a name="[46b]"></a>osTimerDelete</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_timer.o(i.osTimerDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osTimerDelete &rArr; EvrRtxTimerError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerDelete
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
</UL>

<P><STRONG><a name="[2df]"></a>osTimerStop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_timer.o(i.osTimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osTimerStop &rArr; EvrRtxTimerError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStop
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDCUpdateAnalysis
</UL>

<P><STRONG><a name="[48f]"></a>reg_wizchip_cris_cbfunc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wizchip_conf.o(i.reg_wizchip_cris_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[490]"></a>reg_wizchip_cs_cbfunc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wizchip_conf.o(i.reg_wizchip_cs_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[491]"></a>reg_wizchip_spi_cbfunc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, wizchip_conf.o(i.reg_wizchip_spi_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[36d]"></a>sys_cfg_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.sys_cfg_set))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[4a1]"></a>wiz_recv_data</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, w5500.o(i.wiz_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_recv
</UL>

<P><STRONG><a name="[4a2]"></a>wiz_send_data</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, w5500.o(i.wiz_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_send
</UL>

<P><STRONG><a name="[7]"></a>wizchip_bus_readdata</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_bus_readdata))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>wizchip_bus_writedata</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_bus_writedata))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>wizchip_cris_enter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_cris_enter))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(i.reg_wizchip_cris_cbfunc)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>wizchip_cris_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_cris_exit))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(i.reg_wizchip_cris_cbfunc)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>wizchip_cs_deselect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizchip_cs_deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizchip_cs_deselect &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(i.reg_wizchip_cs_cbfunc)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>wizchip_cs_select</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizchip_cs_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizchip_cs_select &rArr; GPIO_ResetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(i.reg_wizchip_cs_cbfunc)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[4c4]"></a>wizchip_getnetinfo</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizchip_getnetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_getnetinfo &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[4c6]"></a>wizchip_getnetmode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizchip_getnetmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizchip_getnetmode &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[4c7]"></a>wizchip_gettimeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_gettimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_gettimeout &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[495]"></a>wizchip_init</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, wizchip_conf.o(i.wizchip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[4c3]"></a>wizchip_setnetinfo</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizchip_setnetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_setnetinfo &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[4c5]"></a>wizchip_setnetmode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_setnetmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_setnetmode &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[496]"></a>wizchip_settimeout</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizchip_settimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizchip_settimeout &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[d0]"></a>wizchip_spi_readbyte</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizchip_spi_readbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_spi_readbyte &rArr; Feed_WDG &rArr; GPIO_TogglePins
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_WDG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(i.reg_wizchip_spi_cbfunc)
</UL>
<P><STRONG><a name="[d1]"></a>wizchip_spi_writebyte</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_spi_writebyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wizchip_spi_writebyte &rArr; Feed_WDG &rArr; GPIO_TogglePins
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_WDG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(i.reg_wizchip_spi_cbfunc)
</UL>
<P><STRONG><a name="[492]"></a>wizchip_sw_reset</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, wizchip_conf.o(i.wizchip_sw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[461]"></a>SPI_TxRx</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, hc32f4a0_spi.o(i.SPI_TxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_TxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitReceive
</UL>

<P><STRONG><a name="[3a0]"></a>CalcClkSyncBaudrate</STRONG> (Thumb, 642 bytes, Stack size 104 bytes, hc32f4a0_usart.o(i.CalcClkSyncBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CalcClkSyncBaudrate &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[3a1]"></a>CalcSmartcardBaudrate</STRONG> (Thumb, 718 bytes, Stack size 128 bytes, hc32f4a0_usart.o(i.CalcSmartcardBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CalcSmartcardBaudrate &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[3a2]"></a>CalcUartBaudrate</STRONG> (Thumb, 710 bytes, Stack size 112 bytes, hc32f4a0_usart.o(i.CalcUartBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CalcUartBaudrate &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[372]"></a>CreateTask</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(i.CreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CreateTask &rArr; osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[440]"></a>Peripheral_WE</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bsp.o(i.Peripheral_WE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Peripheral_WE &rArr; EFM_FWMC_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FWMC_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[441]"></a>Peripheral_WP</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bsp.o(i.Peripheral_WP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Peripheral_WP &rArr; EFM_FWMC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FWMC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[468]"></a>SystemClock_Config</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, bsp.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SystemClock_Config &rArr; CLK_PLLHInit &rArr; CLK_PLLHCmd &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalStructInit
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSrc
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLHStructInit
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLHInit
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLHCmd
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_ClkDiv
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetWaitCycle
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetWaitCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[3bb]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_int
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[3cb]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bsp.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;En_int
</UL>

<P><STRONG><a name="[473]"></a>bsp_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, bsp.o(i.bsp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = bsp_Init &rArr; bsp_InitUSART &rArr; USART_UartInit &rArr; USART_SetBaudrate &rArr; CalcSmartcardBaudrate &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_dacx0508_init
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_M_Loop_InitGPIO
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUSART
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRNG
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitI2C
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCharge
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitACDC
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_FR_ADDR_InitGPIO
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AD7175Init
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_AD7124Init
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_SpiInit
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_RST_Init
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint3_Config
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint2_Config
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint1_Config
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_adc3_init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Switch_ConfigGPIO
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Init
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUintStart
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Scanning
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[2e7]"></a>ACDC_DataHandle</STRONG> (Thumb, 1794 bytes, Stack size 40 bytes, bsp_acdc.o(i.ACDC_DataHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ACDC_DataHandle &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; EvrRtxSemaphoreReleased &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_ResvData
</UL>

<P><STRONG><a name="[ab]"></a>CAN1_IrqCallback</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bsp_acdc.o(i.CAN1_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CAN1_IrqCallback &rArr; CANx_ResvData &rArr; ACDC_DataHandle &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; EvrRtxSemaphoreReleased &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetStatusVal
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetErrType
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClrStatus
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_ResvData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_acdc.o(i.Can1IrqConfig)
</UL>
<P><STRONG><a name="[380]"></a>CANx_ResvData</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, bsp_acdc.o(i.CANx_ResvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CANx_ResvData &rArr; ACDC_DataHandle &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; EvrRtxSemaphoreReleased &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReceiveData
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDC_DataHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IrqCallback
</UL>

<P><STRONG><a name="[3a8]"></a>Can1Config</STRONG> (Thumb, 128 bytes, Stack size 104 bytes, bsp_acdc.o(i.Can1Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Can1Config &rArr; CAN_Init &rArr; CAN_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_CAN_ClkConfig
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1IrqConfig
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitACDC
</UL>

<P><STRONG><a name="[3a9]"></a>Can1IrqConfig</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bsp_acdc.o(i.Can1IrqConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Can1IrqConfig &rArr; CAN_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IntCmd
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Config
</UL>

<P><STRONG><a name="[432]"></a>IIC_Ack</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_ad5245.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IIC_Ack &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[434]"></a>IIC_NAck</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_ad5245.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IIC_NAck &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[2f6]"></a>IIC_Read_Byte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bsp_ad5245.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Value_Read
</UL>

<P><STRONG><a name="[2f4]"></a>IIC_Send_Byte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bsp_ad5245.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IIC_Send_Byte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Value_Set
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Value_Read
</UL>

<P><STRONG><a name="[2f3]"></a>IIC_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_ad5245.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IIC_Start &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Value_Set
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Value_Read
</UL>

<P><STRONG><a name="[2f1]"></a>IIC_Stop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_ad5245.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IIC_Stop &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Value_Set
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Value_Read
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Init
</UL>

<P><STRONG><a name="[2f5]"></a>IIC_Wait_Ack</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bsp_ad5245.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IIC_Wait_Ack &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Value_Set
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5245_Value_Read
</UL>

<P><STRONG><a name="[433]"></a>i2c_Delay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_ad5245.o(i.i2c_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[30f]"></a>Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ad7124.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_Reset
</UL>

<P><STRONG><a name="[319]"></a>Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ad7175.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_CfgADC
</UL>

<P><STRONG><a name="[327]"></a>ADC_Start_DMA</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, bsp_adc3.o(i.ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_Start_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Switch_Channel
</UL>

<P><STRONG><a name="[32a]"></a>ADC_Switch_Channel</STRONG> (Thumb, 1208 bytes, Stack size 32 bytes, bsp_adc3.o(i.ADC_Switch_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADC_Switch_Channel &rArr; ADC_Start_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start_DMA
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start_Stop_DMA
</UL>

<P><STRONG><a name="[32c]"></a>AdcChannelConfig</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, bsp_adc3.o(i.AdcChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AdcChannelConfig &rArr; AdcSetChannelPinAnalogMode &rArr; AdcSetPinAnalogMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelRemap
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelCmd
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AvgChannelConfig
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AvgChannelCmd
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSetChannelPinAnalogMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_adc3_init
</UL>

<P><STRONG><a name="[32e]"></a>AdcClockConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_adc3.o(i.AdcClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AdcClockConfig &rArr; CLK_ClkDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PERI_ClkConfig
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_ClkDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_adc3_init
</UL>

<P><STRONG><a name="[331]"></a>AdcDmaConfig</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, bsp_adc3.o(i.AdcDmaConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AdcDmaConfig &rArr; AdcDmaIrqConfig &rArr; DMA_ClearTransIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTriggerSrc
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RepeatStructInit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RepeatInit
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDmaIrqConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_adc3_init
</UL>

<P><STRONG><a name="[338]"></a>AdcDmaIrqConfig</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, bsp_adc3.o(i.AdcDmaIrqConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AdcDmaIrqConfig &rArr; DMA_ClearTransIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearTransIntStatus
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDmaConfig
</UL>

<P><STRONG><a name="[33c]"></a>AdcInitConfig</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_adc3.o(i.AdcInitConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AdcInitConfig &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg3PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_adc3_init
</UL>

<P><STRONG><a name="[32d]"></a>AdcSetChannelPinAnalogMode</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bsp_adc3.o(i.AdcSetChannelPinAnalogMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = AdcSetChannelPinAnalogMode &rArr; AdcSetPinAnalogMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetChannelPinNum
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSetPinAnalogMode
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcChannelConfig
</UL>

<P><STRONG><a name="[33f]"></a>AdcSetPinAnalogMode</STRONG> (Thumb, 100 bytes, Stack size 176 bytes, bsp_adc3.o(i.AdcSetPinAnalogMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = AdcSetPinAnalogMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSetChannelPinAnalogMode
</UL>

<P><STRONG><a name="[a8]"></a>DMA_Btc0_IrqCallback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_adc3.o(i.DMA_Btc0_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Btc0_IrqCallback &rArr; DMA_ClearTransIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearTransIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_adc3.o(i.AdcDmaIrqConfig)
</UL>
<P><STRONG><a name="[3b3]"></a>DAC80508_ReadCmd</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, bsp_dac80508.o(i.DAC80508_ReadCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DAC80508_ReadCmd &rArr; SPI5_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI5_ReadWriteByte
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_ReadDacData
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dacx0508_cfg
</UL>

<P><STRONG><a name="[3b2]"></a>DAC80508_WriteCmd</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, bsp_dac80508.o(i.DAC80508_WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DAC80508_WriteCmd &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitReceive
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_SetDacData
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_BRDCAST
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dacx0508_cfg
</UL>

<P><STRONG><a name="[3b4]"></a>SPI4_ReadWriteByte</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bsp_dac80508.o(i.SPI4_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI4_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_ReadCmd
</UL>

<P><STRONG><a name="[3b5]"></a>SPI5_ReadWriteByte</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bsp_dac80508.o(i.SPI5_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI5_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_ReadCmd
</UL>

<P><STRONG><a name="[4c0]"></a>bsp_dac_spi_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_dac80508.o(i.bsp_dac_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bsp_dac_spi_init &rArr; DAC2_SpiInit &rArr; GPIO_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC2_SpiInit
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_SpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_dacx0508_init
</UL>

<P><STRONG><a name="[4c1]"></a>dacx0508_cfg</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, bsp_dac80508.o(i.dacx0508_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dacx0508_cfg &rArr; DAC80508_BRDCAST &rArr; DAC80508_WriteCmd &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_BRDCAST
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_WriteCmd
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC80508_ReadCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_dacx0508_init
</UL>

<P><STRONG><a name="[4bb]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_debug.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUSART
</UL>

<P><STRONG><a name="[4bd]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bsp_debug.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUSART
</UL>

<P><STRONG><a name="[4bc]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_debug.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUSART
</UL>

<P><STRONG><a name="[4cf]"></a>i2c_Delay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_eeprom.o(i.i2c_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
</UL>

<P><STRONG><a name="[4cc]"></a>i2c_ReadByte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp_eeprom.o(i.i2c_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadSingleBytes
</UL>

<P><STRONG><a name="[4ca]"></a>i2c_SendByte</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bsp_eeprom.o(i.i2c_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteSingleByte
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadSingleBytes
</UL>

<P><STRONG><a name="[4c9]"></a>i2c_Start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_eeprom.o(i.i2c_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = i2c_Start &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteSingleByte
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadSingleBytes
</UL>

<P><STRONG><a name="[4ba]"></a>i2c_Stop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_eeprom.o(i.i2c_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = i2c_Stop &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitI2C
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteSingleByte
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadSingleBytes
</UL>

<P><STRONG><a name="[4cb]"></a>i2c_WaitAck</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bsp_eeprom.o(i.i2c_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = i2c_WaitAck &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteSingleByte
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadSingleBytes
</UL>

<P><STRONG><a name="[a6]"></a>AD7124_EXINT_IrqCallback</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, bsp_exti.o(i.AD7124_EXINT_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AD7124_EXINT_IrqCallback &rArr; AD7124_Process &rArr; AD7124_ReadData &rArr; AD7124_ReadReg &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_Process
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT_GetExIntSrc
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT_ClrExIntSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_exti.o(i.AD7124_EXINT_Init)
</UL>
<P><STRONG><a name="[a7]"></a>AD7175_EXINT_IrqCallback</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bsp_exti.o(i.AD7175_EXINT_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AD7175_EXINT_IrqCallback &rArr; AD7175_Process &rArr; AD7175_ReadData &rArr; AD7175_ReadReg &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_Process
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT_GetExIntSrc
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT_ClrExIntSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_exti.o(i.AD7175_EXINT_Init)
</UL>
<P><STRONG><a name="[301]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_exti.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_EXINT_Init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_EXINT_Init
</UL>

<P><STRONG><a name="[303]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp_exti.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_EXINT_Init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_EXINT_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_EXINT_IrqCallback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_EXINT_IrqCallback
</UL>

<P><STRONG><a name="[308]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bsp_exti.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_EXINT_IrqCallback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_EXINT_IrqCallback
</UL>

<P><STRONG><a name="[302]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_exti.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7175_EXINT_Init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7124_EXINT_Init
</UL>

<P><STRONG><a name="[458]"></a>SPI_ReadWriteByte</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp_flash.o(i.SPI_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadSR
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
</UL>

<P><STRONG><a name="[438]"></a>SPI_ReadWriteByte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_mb85rs2.o(i.SPI_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_ReadWriteByte &rArr; SPI_TransmitReceive &rArr; SPI_TxRx
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitReceive
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Write
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Read
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_ReadID
</UL>

<P><STRONG><a name="[481]"></a>TimerAUint1_IrqConfig</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp_timer.o(i.TimerAUint1_IrqConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TimerAUint1_IrqConfig &rArr; TMRA_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_IntCmd
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint1_Config
</UL>

<P><STRONG><a name="[486]"></a>TimerAUint2_IrqConfig</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp_timer.o(i.TimerAUint2_IrqConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TimerAUint2_IrqConfig &rArr; TMRA_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_IntCmd
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint2_Config
</UL>

<P><STRONG><a name="[488]"></a>TimerAUint3_IrqConfig</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp_timer.o(i.TimerAUint3_IrqConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TimerAUint3_IrqConfig &rArr; TMRA_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_IntCmd
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint3_Config
</UL>

<P><STRONG><a name="[b2]"></a>TimerAUnit1_OvfIrqCallback</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, bsp_timer.o(i.TimerAUnit1_OvfIrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TimerAUnit1_OvfIrqCallback &rArr; AlarmClear &rArr; CANx_SendData &rArr; CAN_TransData &rArr; CAN_GetStatusVal
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_GetStatus
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_ClrStatus
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedToggle
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_WDG
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntelProtectRunParmCheck
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobleProtectRunParmCheck
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_timer.o(i.TimerAUint1_IrqConfig)
</UL>
<P><STRONG><a name="[b3]"></a>TimerAUnit2_OvfIrqCallback</STRONG> (Thumb, 372 bytes, Stack size 8 bytes, bsp_timer.o(i.TimerAUnit2_OvfIrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TimerAUnit2_OvfIrqCallback &rArr; TMRA_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_GetStatus
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_ClrStatus
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_WDG
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxRecordDatSync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_timer.o(i.TimerAUint2_IrqConfig)
</UL>
<P><STRONG><a name="[b4]"></a>TimerAUnit3_OvfIrqCallback</STRONG> (Thumb, 1128 bytes, Stack size 24 bytes, bsp_timer.o(i.TimerAUnit3_OvfIrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = TimerAUnit3_OvfIrqCallback &rArr; RecordDatUpcast &rArr; CRC16N &rArr; CRC16_2
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_GetStatus
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_ClrStatus
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB85Ctrl_Write
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_WDG
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Mloop
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Mloop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start_Stop_DMA
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordDatUpcast
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalAdDatProcess
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IrqHandler
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_timer.o(i.TimerAUint3_IrqConfig)
</UL>
<P><STRONG><a name="[482]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_timer.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint3_IrqConfig
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint2_IrqConfig
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint1_IrqConfig
</UL>

<P><STRONG><a name="[484]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bsp_timer.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint3_IrqConfig
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint2_IrqConfig
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint1_IrqConfig
</UL>

<P><STRONG><a name="[483]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_timer.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint3_IrqConfig
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint2_IrqConfig
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAUint1_IrqConfig
</UL>

<P><STRONG><a name="[35a]"></a>LedStaExecute</STRONG> (Thumb, 556 bytes, Stack size 8 bytes, app_task_led.o(i.LedStaExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LedStaExecute &rArr; Led_Shine_Ctrl &rArr; bsp_LedOn &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Shine_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLed
</UL>

<P><STRONG><a name="[358]"></a>LedStaInit</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, app_task_led.o(i.LedStaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LedStaInit &rArr; osDelay &rArr; EvrRtxDelayError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLed
</UL>

<P><STRONG><a name="[359]"></a>LedStaSwFunc</STRONG> (Thumb, 1108 bytes, Stack size 0 bytes, app_task_led.o(i.LedStaSwFunc))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLed
</UL>

<P><STRONG><a name="[443]"></a>RecvUnpack</STRONG> (Thumb, 242 bytes, Stack size 12 bytes, app_task_protocol.o(i.RecvUnpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RecvUnpack &rArr; CRC16N &rArr; CRC16_2
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16N
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[444]"></a>SendPack</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, app_task_protocol.o(i.SendPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendPack &rArr; CRC16N &rArr; CRC16_2
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16N
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolDataProcess
</UL>

<P><STRONG><a name="[2e1]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_task_protocol.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACDCUpdateAnalysis
</UL>

<P><STRONG><a name="[361]"></a>__NVIC_SystemReset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_task_protocol.o(i.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskProtocol
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetAnalysis
</UL>

<P><STRONG><a name="[3ce]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_task_protocol.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemUpdateAnalysis
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Update_Zone
</UL>

<P><STRONG><a name="[4dd]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_delay.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[4dc]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_delay.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[ba]"></a>svcRtxDelay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_delay.o(i.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; EvrRtxThreadBlocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(i.osDelay)
</UL>
<P><STRONG><a name="[4e0]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_kernel.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[4df]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_kernel.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[4e1]"></a>IsPrivileged</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_kernel.o(i.IsPrivileged))
<BR><BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[bb]"></a>svcRtxKernelGetState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_kernel.o(i.svcRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetState)
</UL>
<P><STRONG><a name="[bc]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 538 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[bd]"></a>svcRtxKernelLock</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxKernelLock &rArr; EvrRtxKernelLocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelLocked
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelLock)
</UL>
<P><STRONG><a name="[be]"></a>svcRtxKernelRestoreLock</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rtx_kernel.o(i.svcRtxKernelRestoreLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxKernelRestoreLock &rArr; EvrRtxKernelLockRestored &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelLockRestored
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelRestoreLock)
</UL>
<P><STRONG><a name="[bf]"></a>svcRtxKernelStart</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[c0]"></a>svcRtxKernelUnlock</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxKernelUnlock &rArr; EvrRtxKernelUnlocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelUnlocked
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelUnlock)
</UL>
<P><STRONG><a name="[4ce]"></a>evr_initialize</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rtx_lib.o(i.evr_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = evr_initialize &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>

<P><STRONG><a name="[4e8]"></a>MemBlockPtr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtx_memory.o(i.MemBlockPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[4e5]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_msgqueue.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[4e4]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_msgqueue.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[439]"></a>MessageQueueGet</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec32_nz
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_wr8
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[43c]"></a>MessageQueuePut</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[4f0]"></a>MessageQueueRemove</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_msgqueue.o(i.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[4d0]"></a>isrRtxMessageQueueGet</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, rtx_msgqueue.o(i.isrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = isrRtxMessageQueueGet &rArr; EvrRtxMessageQueueRetrieved &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[4d2]"></a>isrRtxMessageQueuePut</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, rtx_msgqueue.o(i.isrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = isrRtxMessageQueuePut &rArr; osRtxMemoryPoolAlloc &rArr; EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[d2]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, rtx_msgqueue.o(i.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[c1]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, rtx_msgqueue.o(i.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueGet)
</UL>
<P><STRONG><a name="[c2]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 396 bytes, Stack size 48 bytes, rtx_msgqueue.o(i.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueNew)
</UL>
<P><STRONG><a name="[c3]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, rtx_msgqueue.o(i.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueuePut)
</UL>
<P><STRONG><a name="[50c]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_semaphore.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[50b]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_semaphore.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[464]"></a>SemaphoreTokenDecrement</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_semaphore.o(i.SemaphoreTokenDecrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenDecrement
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[466]"></a>SemaphoreTokenIncrement</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtx_semaphore.o(i.SemaphoreTokenIncrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[4d4]"></a>isrRtxSemaphoreRelease</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rtx_semaphore.o(i.isrRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = isrRtxSemaphoreRelease &rArr; EvrRtxSemaphoreReleased &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[d3]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rtx_semaphore.o(i.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[c7]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, rtx_semaphore.o(i.svcRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = svcRtxSemaphoreAcquire &rArr; osRtxThreadWaitEnter &rArr; EvrRtxThreadBlocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquirePending
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreAcquire)
</UL>
<P><STRONG><a name="[c8]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, rtx_semaphore.o(i.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreCreated
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreNew)
</UL>
<P><STRONG><a name="[c9]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_semaphore.o(i.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[4d5]"></a>isr_queue_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtx_system.o(i.isr_queue_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isr_queue_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[4d8]"></a>isr_queue_put</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, rtx_system.o(i.isr_queue_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[50e]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_thread.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
</UL>

<P><STRONG><a name="[50d]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
</UL>

<P><STRONG><a name="[47c]"></a>ThreadFlagsCheck</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rtx_thread.o(i.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_any
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[4fe]"></a>osRtxKernelGetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[4f9]"></a>osRtxThreadBlock</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rtx_thread.o(i.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[506]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
</UL>

<P><STRONG><a name="[507]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
</UL>

<P><STRONG><a name="[501]"></a>osRtxThreadFree</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[4ff]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[4fb]"></a>osRtxThreadListRoot</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadListRoot))
<BR><BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[d5]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[514]"></a>osRtxThreadSetRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadSetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[ca]"></a>svcRtxThreadExit</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, rtx_thread.o(i.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[cb]"></a>svcRtxThreadNew</STRONG> (Thumb, 612 bytes, Stack size 56 bytes, rtx_thread.o(i.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadNew)
</UL>
<P><STRONG><a name="[cc]"></a>svcRtxThreadSuspend</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, rtx_thread.o(i.svcRtxThreadSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = svcRtxThreadSuspend &rArr; EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSuspended
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadSuspend)
</UL>
<P><STRONG><a name="[cd]"></a>svcRtxThreadTerminate</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, rtx_thread.o(i.svcRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = svcRtxThreadTerminate &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadTerminate)
</UL>
<P><STRONG><a name="[510]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_timer.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
</UL>

<P><STRONG><a name="[50f]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_timer.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
</UL>

<P><STRONG><a name="[50a]"></a>TimerInsert</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, rtx_timer.o(i.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[515]"></a>TimerRemove</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rtx_timer.o(i.TimerRemove))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStop
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerDelete
</UL>

<P><STRONG><a name="[509]"></a>TimerUnlink</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_timer.o(i.TimerUnlink))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[c6]"></a>osRtxTimerTick</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_timer.o(i.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxMemoryPoolAlloc &rArr; EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerUnlink
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osRtxTimerThread)
</UL>
<P><STRONG><a name="[ce]"></a>svcRtxTimerDelete</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rtx_timer.o(i.svcRtxTimerDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = svcRtxTimerDelete &rArr; osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerDestroyed
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osTimerDelete)
</UL>
<P><STRONG><a name="[cf]"></a>svcRtxTimerStop</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rtx_timer.o(i.svcRtxTimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = svcRtxTimerStop &rArr; EvrRtxTimerError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStopped
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osTimerStop)
</UL>
<P><STRONG><a name="[3d4]"></a>EventCheckFilter</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, eventrecorder.o(i.EventCheckFilter))
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[3cf]"></a>EventGetTS</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, eventrecorder.o(i.EventGetTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventGetTS
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__atomic_xch32
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__atomic_inc32
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
</UL>

<P><STRONG><a name="[3d5]"></a>EventRecordItem</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, eventrecorder.o(i.EventRecordItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__UnlockRecord
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__LockRecord
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
</UL>

<P><STRONG><a name="[3d7]"></a>GetContext</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, eventrecorder.o(i.GetContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetContext
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__atomic_inc8
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>

<P><STRONG><a name="[3db]"></a>crc16_ccitt</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, eventrecorder.o(i.crc16_ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[4ab]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4a9]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[4ad]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4ac]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b6]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
